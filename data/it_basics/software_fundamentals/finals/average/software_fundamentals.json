{
  "subtopic_id": "software_fundamentals",
  "subtopic_name": "Software Fundamentals",
  "mode": "finals",
  "difficulty": "average",
  "questions": [
    {
      "question": "What is free software?",
      "answer": "Software with freedom to use/modify/share",
      "alternatives": [
        "Libre software"
      ],
      "explanation": "Free software: freedom of use, study, modification. License: GPL typical. Examples: Linux, Apache. Distinction: free vs free-as-in-beer. Community: user-driven development. Philosophy: user empowerment."
    },
    {
      "question": "What is freeware?",
      "answer": "Free to use but closed-source",
      "alternatives": [
        "No-cost software"
      ],
      "explanation": "Freeware: no cost, but restricted use. Source: usually closed. Examples: Skype (historical), Notepad. License: proprietary free. Support: vendor-dependent. Rights: limited usually."
    },
    {
      "question": "What is shareware?",
      "answer": "Try-before-buy software model",
      "alternatives": [
        "Limited trial"
      ],
      "explanation": "Shareware: try free, payment for full use. Method: honor system originally. Time-limited: trial periods common. Limitations: features restricted. Modern: SaaS replaced mostly."
    },
    {
      "question": "What is SaaS?",
      "answer": "Software as a Service",
      "alternatives": [
        "Cloud-based software"
      ],
      "explanation": "SaaS: web-based software accessed via browser. Benefits: no installation, automatic updates. Examples: Gmail, Office 365, Salesforce. Subscription: monthly payment. Data: stored on provider servers."
    },
    {
      "question": "What is PaaS?",
      "answer": "Platform as a Service",
      "alternatives": [
        "Cloud platform"
      ],
      "explanation": "PaaS: cloud development platform. Provides: OS, middleware, tools. Purpose: app development, deployment. Examples: Heroku, Google App Engine. Benefit: reduce infrastructure burden."
    },
    {
      "question": "What is IaaS?",
      "answer": "Infrastructure as a Service",
      "alternatives": [
        "Cloud infrastructure"
      ],
      "explanation": "IaaS: cloud computing resources. Provides: VM, storage, networking. Examples: AWS, Azure, GCP. Flexibility: scale as needed. Cost: pay-as-you-go model."
    },
    {
      "question": "What is API software?",
      "answer": "Interface for program communication",
      "alternatives": [
        "Web API"
      ],
      "explanation": "API: interface between programs. Purpose: functionality access, data exchange. Format: JSON, XML, REST. Documentation: describes usage. Importance: enables integration."
    },
    {
      "question": "What is a library?",
      "answer": "Reusable code collection",
      "alternatives": [
        "Code package"
      ],
      "explanation": "Library: functions for common tasks. Purpose: avoid reinventing wheel. Language: language-specific. Installation: package manager typical. Versioning: compatibility important."
    },
    {
      "question": "What is a framework?",
      "answer": "Structured application foundation",
      "alternatives": [
        "Application skeleton"
      ],
      "explanation": "Framework: provides structure, pre-built components. Examples: React, Django, Spring. Purpose: speed development. Convention: imposes structure. Learning: requires understanding."
    },
    {
      "question": "What is a patch?",
      "answer": "Small software update",
      "alternatives": [
        "Bug fix update"
      ],
      "explanation": "Patch: fixes specific issue, small update. Purpose: security, bug fixes. Installation: quick typically. Versioning: minor version bump. Testing: important before deployment."
    }
  ]
}
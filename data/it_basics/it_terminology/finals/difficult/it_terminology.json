{
  "subtopic_id": "it_terminology",
  "subtopic_name": "IT Terminology",
  "mode": "finals",
  "difficulty": "difficult",
  "questions": [
    {
      "question": "What does OAuth stand for?",
      "answer": "Open Authorization",
      "alternatives": [
        "Authentication protocol"
      ],
      "explanation": "OAuth: delegated authentication framework. Version: 2.0 most common. Use: social login, API access. Security: tokens, scopes. Standards: RFC 6749 defines. Adoption: industry standard now."
    },
    {
      "question": "What does LDAP stand for?",
      "answer": "Lightweight Directory Access Protocol",
      "alternatives": [
        "Directory service"
      ],
      "explanation": "LDAP: directory information protocol. Purpose: user authentication, search. Implementation: hierarchical database. Port: 389 standard. Enterprise: widely used in corporations. Security: LDAPS variant available."
    },
    {
      "question": "What does REST stand for?",
      "answer": "Representational State Transfer",
      "alternatives": [
        "Web architecture"
      ],
      "explanation": "REST: architectural style for web APIs. Principles: client-server, stateless, cacheable. Methods: HTTP verbs (GET, POST). Format: typically JSON. Standards: not formal specification. Popularity: de facto standard for APIs."
    },
    {
      "question": "What does SOAP stand for?",
      "answer": "Simple Object Access Protocol",
      "alternatives": [
        "Message protocol"
      ],
      "explanation": "SOAP: XML-based messaging protocol. Complexity: more verbose than REST. Standards: formal W3C definition. Uses: enterprise integration, web services. Decline: REST increasingly preferred. Purpose: service communication."
    },
    {
      "question": "What does JSON stand for?",
      "answer": "JavaScript Object Notation",
      "alternatives": [
        "Data format"
      ],
      "explanation": "JSON: lightweight data interchange format. Structure: key-value pairs. Human-readable: easy to understand. Efficiency: widely supported. Uses: APIs, configuration files. Parsing: simple for programmers."
    },
    {
      "question": "What does XML stand for?",
      "answer": "eXtensible Markup Language",
      "alternatives": [
        "Markup format"
      ],
      "explanation": "XML: extensible data format. Structure: hierarchical tags. Uses: configuration, data exchange. Verbosity: more than JSON. Standards: W3C maintains. Parsing: libraries available widely."
    },
    {
      "question": "What does SQL stand for?",
      "answer": "Structured Query Language",
      "alternatives": [
        "Database language"
      ],
      "explanation": "SQL: database interaction language. Operations: SELECT, INSERT, UPDATE, DELETE. Standards: SQL:2016 latest version. Uses: queries, administration. Importance: database backbone. Variants: MySQL, PostgreSQL, T-SQL."
    },
    {
      "question": "What does NoSQL stand for?",
      "answer": "Not Only SQL",
      "alternatives": [
        "Non-relational database"
      ],
      "explanation": "NoSQL: non-relational databases. Types: key-value, document, graph. Examples: MongoDB, Redis, Cassandra. Scalability: horizontal scaling easier. Flexibility: schema-less typically. Use: big data, real-time."
    },
    {
      "question": "What does ACID stand for?",
      "answer": "Atomicity Consistency Isolation Durability",
      "alternatives": [
        "Database properties"
      ],
      "explanation": "ACID: transaction properties. Atomicity: all or nothing. Consistency: valid state always. Isolation: concurrent independence. Durability: persistent after commit. Importance: data integrity. Standard: SQL databases guarantee."
    },
    {
      "question": "What does CAP stand for?",
      "answer": "Consistency Availability Partition-tolerance",
      "alternatives": [
        "Theorem about databases"
      ],
      "explanation": "CAP theorem: only two of three achievable. Consistency: same data everywhere. Availability: always responsive. Partition-tolerance: network failures tolerated. Implication: tradeoffs necessary. Application: distributed system design."
    }
  ]
}
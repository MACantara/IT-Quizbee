{
  "subtopic_id": "deadlock",
  "subtopic_name": "Deadlock",
  "mode": "finals",
  "difficulty": "difficult",
  "questions": [
    {
      "question": "What algorithm finds safe execution sequences?",
      "answer": "Safety algorithm",
      "alternatives": [],
      "explanation": "The safety algorithm simulates process completion to find safe sequences. It's central to Banker's algorithm."
    },
    {
      "question": "What criterion selects which process to terminate?",
      "answer": "Victim selection",
      "alternatives": [],
      "explanation": "Victim selection chooses processes for termination based on priority, resource count, or execution time. It minimizes cost."
    },
    {
      "question": "What technique saves process state for potential rollback?",
      "answer": "Checkpointing",
      "alternatives": [],
      "explanation": "Checkpointing periodically saves process state. After preemption, processes can restart from checkpoints."
    },
    {
      "question": "What occurs when processes continuously change state without progress?",
      "answer": "Livelock",
      "alternatives": [],
      "explanation": "Livelock has active processes that don't make progress. Unlike deadlock, processes aren't blocked."
    },
    {
      "question": "What graph edge points from process to resource?",
      "answer": "Request edge",
      "alternatives": [],
      "explanation": "Request edges indicate processes waiting for resources. They point from process nodes to resource nodes."
    },
    {
      "question": "What graph edge points from resource to process?",
      "answer": "Assignment edge",
      "alternatives": [],
      "explanation": "Assignment edges show allocated resources. They point from resource nodes to process nodes."
    },
    {
      "question": "What metric counts resources held by a victim process?",
      "answer": "Resource count",
      "alternatives": [],
      "explanation": "Resource count influences victim selection. Processes holding many resources may be chosen to maximize freed resources."
    },
    {
      "question": "What matrix operation computes remaining needs?",
      "answer": "Need = Max - Allocation",
      "alternatives": [],
      "explanation": "The need calculation determines outstanding resource requirements. It's essential for safety checking."
    },
    {
      "question": "What approach ignores deadlock and assumes it's rare?",
      "answer": "Ostrich algorithm",
      "alternatives": [],
      "explanation": "The ostrich algorithm handles deadlock by ignoring it. It's used when deadlock is extremely rare."
    },
    {
      "question": "What detection granularity checks after every request?",
      "answer": "Immediate detection",
      "alternatives": [],
      "explanation": "Immediate detection runs after every resource request. It identifies deadlock quickly but has high overhead."
    }
  ]
}
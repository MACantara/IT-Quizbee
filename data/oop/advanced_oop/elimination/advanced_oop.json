{
  "subtopic_id": "advanced_oop",
  "subtopic_name": "Advanced OOP",
  "mode": "elimination",
  "questions": [
    {
      "question": "What Python technique allows adding functionality from multiple classes without inheritance?",
      "options": [
        "Traits",
        "Mixins",
        "Interfaces",
        "Abstract classes"
      ],
      "correct": 1,
      "explanation": "Mixins are classes designed to add specific functionality to other classes through multiple inheritance. They provide reusable code without creating is-a relationships."
    },
    {
      "question": "What are classes that define the behavior of other classes called?",
      "options": [
        "Abstract classes",
        "Base classes",
        "Metaclasses",
        "Parent classes"
      ],
      "correct": 2,
      "explanation": "Metaclasses are classes of classes that define how classes behave. In Python, type is the default metaclass. They control class creation and behavior."
    },
    {
      "question": "What technique allows a program to examine its own structure at runtime?",
      "options": [
        "Metaprogramming",
        "Reflection",
        "Introspection",
        "Dynamic typing"
      ],
      "correct": 2,
      "explanation": "Introspection is the ability to examine objects, classes, and their properties at runtime. Functions like type(), dir(), and hasattr() enable introspection in Python."
    },
    {
      "question": "What technique allows a program to modify its own structure and behavior at runtime?",
      "options": [
        "Introspection",
        "Reflection",
        "Metaprogramming",
        "Dynamic dispatch"
      ],
      "correct": 1,
      "explanation": "Reflection goes beyond introspection by allowing modification of structure at runtime. It includes examining and modifying classes, methods, and attributes dynamically."
    },
    {
      "question": "What programming technique involves writing code that manipulates code?",
      "options": [
        "Reflection",
        "Introspection",
        "Metaprogramming",
        "Dynamic programming"
      ],
      "correct": 2,
      "explanation": "Metaprogramming is writing programs that generate or manipulate other programs or themselves. It includes techniques like decorators, metaclasses, and code generation."
    },
    {
      "question": "What Python feature allows modifying function or class behavior without changing their code?",
      "options": [
        "Mixins",
        "Decorators",
        "Properties",
        "Metaclasses"
      ],
      "correct": 1,
      "explanation": "Decorators are functions that modify other functions or classes. They use the @ syntax and allow adding functionality through wrapping without changing the original code."
    },
    {
      "question": "What Python feature manages attribute access with get and set methods?",
      "options": [
        "Properties",
        "Decorators",
        "Descriptors",
        "Slots"
      ],
      "correct": 2,
      "explanation": "Descriptors are objects that define __get__, __set__, and __delete__ methods to control attribute access. Properties are implemented using descriptors."
    },
    {
      "question": "What Scala feature is similar to mixins but uses explicit composition?",
      "options": [
        "Interfaces",
        "Traits",
        "Abstract classes",
        "Modules"
      ],
      "correct": 1,
      "explanation": "Traits in Scala are similar to interfaces but can contain concrete implementations. They provide reusable method and field definitions that can be mixed into classes."
    },
    {
      "question": "What method is called before __init__ to create a new instance?",
      "options": [
        "__new__",
        "__create__",
        "__make__",
        "__construct__"
      ],
      "correct": 0,
      "explanation": "__new__ is the method that creates a new instance. It's called before __init__ and is responsible for returning a new object instance, often used in metaclasses."
    },
    {
      "question": "What Python feature allows introspecting and modifying function arguments at runtime?",
      "options": [
        "Decorators",
        "Type hints",
        "Annotations",
        "Inspection module"
      ],
      "correct": 3,
      "explanation": "The inspect module provides functions like signature(), getargspec(), and getmembers() to examine live objects, including functions, classes, and their arguments."
    }
  ]
}
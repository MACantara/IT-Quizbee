{
  "subtopic_id": "design_patterns",
  "subtopic_name": "Design Patterns",
  "mode": "finals",
  "difficulty": "easy",
  "questions": [
    {
      "question": "What pattern creates only one instance?",
      "answer": "singleton",
      "alternatives": ["singleton pattern"],
      "explanation": "Singleton ensures single instance existence."
    },
    {
      "question": "What pattern creates objects without specifying classes?",
      "answer": "factory",
      "alternatives": ["factory pattern"],
      "explanation": "Factory delegates object instantiation."
    },
    {
      "question": "What pattern adds behavior to objects?",
      "answer": "decorator",
      "alternatives": ["decorator pattern"],
      "explanation": "Decorator wraps objects with new functionality."
    },
    {
      "question": "What pattern simplifies complex systems?",
      "answer": "facade",
      "alternatives": ["facade pattern"],
      "explanation": "Facade provides unified interface."
    },
    {
      "question": "What pattern converts interfaces?",
      "answer": "adapter",
      "alternatives": ["adapter pattern"],
      "explanation": "Adapter makes incompatible interfaces compatible."
    },
    {
      "question": "What pattern notifies multiple observers?",
      "answer": "observer",
      "alternatives": ["observer pattern"],
      "explanation": "Observer implements publish-subscribe mechanism."
    },
    {
      "question": "What pattern encapsulates algorithms?",
      "answer": "strategy",
      "alternatives": ["strategy pattern"],
      "explanation": "Strategy defines interchangeable algorithms."
    },
    {
      "question": "What pattern clones objects?",
      "answer": "prototype",
      "alternatives": ["prototype pattern"],
      "explanation": "Prototype creates copies of existing objects."
    },
    {
      "question": "What pattern builds complex objects?",
      "answer": "builder",
      "alternatives": ["builder pattern"],
      "explanation": "Builder constructs objects step by step."
    },
    {
      "question": "What pattern encapsulates requests?",
      "answer": "command",
      "alternatives": ["command pattern"],
      "explanation": "Command turns requests into objects."
    }
  ]
}
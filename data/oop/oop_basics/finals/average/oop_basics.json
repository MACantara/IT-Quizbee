{
  "subtopic_id": "oop_basics",
  "subtopic_name": "OOP Basics",
  "mode": "finals",
  "difficulty": "average",
  "questions": [
    {
      "question": "What type of variable is shared among all instances of a class?",
      "answer": "class variable",
      "alternatives": [
        "static variable",
        "class attribute"
      ],
      "explanation": "Class variables are shared by all objects of that class.",
      "id": "oop_bas_oop_bas_a_finals_000"
    },
    {
      "question": "What type of variable is unique to each object instance?",
      "answer": "instance variable",
      "alternatives": [
        "object variable",
        "instance attribute"
      ],
      "explanation": "Instance variables hold data specific to each object.",
      "id": "oop_bas_oop_bas_a_finals_001"
    },
    {
      "question": "What type of method can be called without creating an instance?",
      "answer": "static method",
      "alternatives": [
        "class method"
      ],
      "explanation": "Static methods belong to the class rather than instances.",
      "id": "oop_bas_oop_bas_a_finals_002"
    },
    {
      "question": "What is the implicit first parameter in Python instance methods?",
      "answer": "self",
      "alternatives": [],
      "explanation": "Self refers to the instance calling the method.",
      "id": "oop_bas_oop_bas_a_finals_003"
    },
    {
      "question": "What is the implicit first parameter in Java instance methods?",
      "answer": "this",
      "alternatives": [],
      "explanation": "This keyword references the current object instance.",
      "id": "oop_bas_oop_bas_a_finals_004"
    },
    {
      "question": "What principle bundles data and methods while restricting access?",
      "answer": "encapsulation",
      "alternatives": [
        "data hiding"
      ],
      "explanation": "Encapsulation is one of the four main OOP principles along with inheritance, polymorphism, and abstraction.",
      "id": "oop_bas_oop_bas_a_finals_005"
    },
    {
      "question": "What mechanism allows a class to acquire properties from another class?",
      "answer": "inheritance",
      "alternatives": [],
      "explanation": "Inheritance enables code reuse by extending existing classes.",
      "id": "oop_bas_oop_bas_a_finals_006"
    },
    {
      "question": "What allows objects of different classes to be treated uniformly?",
      "answer": "polymorphism",
      "alternatives": [],
      "explanation": "Polymorphism enables a single interface to represent different types.",
      "id": "oop_bas_oop_bas_a_finals_007"
    },
    {
      "question": "What principle hides internal implementation details?",
      "answer": "encapsulation",
      "alternatives": [
        "data hiding"
      ],
      "explanation": "Encapsulation bundles data and methods while restricting access.",
      "id": "oop_bas_oop_bas_a_finals_008"
    },
    {
      "question": "What focuses on essential features while hiding complexity?",
      "answer": "abstraction",
      "alternatives": [],
      "explanation": "Abstraction simplifies complex systems by exposing only relevant details.",
      "id": "oop_bas_oop_bas_a_finals_009"
    }
  ]
}
{
  "subtopic_id": "constructors",
  "subtopic_name": "Constructors & Destructors",
  "questions": [
    {
      "question": "What is a constructor?",
      "options": [
        "A special method that initializes objects",
        "A destructor",
        "A variable",
        "A loop"
      ],
      "correct": 0,
      "explanation": "A constructor is a special method automatically called when an object is created. It has the same name as the class and is used to initialize the object's state."
    },
    {
      "question": "Can a constructor have a return type?",
      "options": [
        "No, constructors don't have return types",
        "Yes, always void",
        "Yes, can return any type",
        "Only primitives"
      ],
      "correct": 0,
      "explanation": "Constructors do not have return types, not even void. They implicitly return the newly created object instance."
    },
    {
      "question": "What is a default constructor?",
      "options": [
        "A constructor with no parameters provided by the compiler if no constructor is defined",
        "A constructor with parameters",
        "A static constructor",
        "A private constructor"
      ],
      "correct": 0,
      "explanation": "A default constructor is a no-argument constructor automatically provided by the compiler if no constructors are explicitly defined in the class."
    },
    {
      "question": "What is a parameterized constructor?",
      "options": [
        "A constructor that accepts parameters to initialize object with specific values",
        "A constructor with no parameters",
        "A static method",
        "A destructor"
      ],
      "correct": 0,
      "explanation": "A parameterized constructor is a constructor that accepts one or more parameters, allowing objects to be initialized with specific values upon creation."
    },
    {
      "question": "What is constructor overloading?",
      "options": [
        "Having multiple constructors with different parameter lists in the same class",
        "Having one constructor",
        "Overriding a constructor",
        "Deleting a constructor"
      ],
      "correct": 0,
      "explanation": "Constructor overloading is having multiple constructors in a class with different parameter lists (different number or types of parameters), providing flexibility in object creation."
    },
    {
      "question": "What is a copy constructor?",
      "options": [
        "A constructor that creates a new object as a copy of an existing object",
        "A default constructor",
        "A constructor that deletes objects",
        "A static constructor"
      ],
      "correct": 0,
      "explanation": "A copy constructor creates a new object by copying the values from an existing object of the same class. It takes a reference to an object of the same class as a parameter."
    },
    {
      "question": "What is constructor chaining?",
      "options": [
        "Calling one constructor from another constructor in the same or parent class",
        "Creating multiple constructors",
        "Deleting constructors",
        "Static methods"
      ],
      "correct": 0,
      "explanation": "Constructor chaining is the process of calling one constructor from another constructor using 'this()' (same class) or 'super()' (parent class) to avoid code duplication."
    },
    {
      "question": "What is a destructor?",
      "options": [
        "A special method called when an object is destroyed to release resources",
        "A constructor",
        "A variable",
        "A loop"
      ],
      "correct": 0,
      "explanation": "A destructor is a special method called automatically when an object is destroyed or goes out of scope. It's used for cleanup operations like releasing resources (used in C++, not in Java which uses garbage collection)."
    },
    {
      "question": "Can you call a constructor explicitly like a regular method?",
      "options": [
        "No, constructors are automatically called during object creation",
        "Yes, always",
        "Only static constructors",
        "Only in Java"
      ],
      "correct": 0,
      "explanation": "Constructors cannot be called explicitly like regular methods. They are automatically invoked during object creation using the 'new' keyword."
    },
    {
      "question": "What happens if you define a constructor in a class?",
      "options": [
        "The compiler will not provide a default constructor",
        "Compiler still provides default constructor",
        "Nothing changes",
        "Class becomes abstract"
      ],
      "correct": 0,
      "explanation": "Once you define any constructor in a class, the compiler will not provide a default no-argument constructor. You must explicitly define it if needed."
    }
  ]
}
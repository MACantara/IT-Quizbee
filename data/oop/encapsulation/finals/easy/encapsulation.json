{
  "subtopic_id": "encapsulation",
  "subtopic_name": "Encapsulation",
  "mode": "finals",
  "difficulty": "easy",
  "questions": [
    {
      "question": "What is encapsulation?",
      "answer": "Bundle data with methods, control access",
      "alternatives": [
        "Data bundling"
      ],
      "explanation": "Encapsulation: group related items. Purpose: hide internals. Methods: provide access. Benefit: prevent misuse. Importance: core principle."
    },
    {
      "question": "What is data hiding?",
      "answer": "Hide internal state from outside",
      "alternatives": [
        "Information hiding"
      ],
      "explanation": "Hiding: make private. Purpose: protect state. Access: through methods only. Benefit: prevent corruption. Importance: security."
    },
    {
      "question": "What is the public keyword?",
      "answer": "Member accessible from anywhere",
      "alternatives": [
        "Public access"
      ],
      "explanation": "Public: visible to all. Scope: entire program. Usage: safe public interface. Benefit: expose necessary. Importance: access control."
    },
    {
      "question": "What is the private keyword?",
      "answer": "Member accessible only in class",
      "alternatives": [
        "Private access"
      ],
      "explanation": "Private: not visible outside. Scope: class only. Usage: hide implementation. Benefit: prevent misuse. Importance: access control."
    },
    {
      "question": "What is the protected keyword?",
      "answer": "Member accessible in class, subclass, same package",
      "alternatives": [
        "Protected access"
      ],
      "explanation": "Protected: limited visibility. Scope: inheritance hierarchy. Usage: allow subclass access. Benefit: controlled inheritance. Importance: access control."
    },
    {
      "question": "What is the package-private keyword?",
      "answer": "Member accessible in same package",
      "alternatives": [
        "Default access"
      ],
      "explanation": "Package-private: default in Java. Scope: same package only. Usage: related classes. Benefit: grouping. Importance: access control."
    },
    {
      "question": "What is an accessor method?",
      "answer": "Method to read private member",
      "alternatives": [
        "Getter"
      ],
      "explanation": "Accessor: read-only access. Naming: get prefix. Purpose: controlled retrieval. Benefit: encapsulation. Example: getName(). Importance: access control."
    },
    {
      "question": "What is a mutator method?",
      "answer": "Method to modify private member",
      "alternatives": [
        "Setter"
      ],
      "explanation": "Mutator: write access. Naming: set prefix. Purpose: controlled modification. Validation: can validate input. Example: setAge(). Importance: access control."
    },
    {
      "question": "What is property?",
      "answer": "Encapsulated data with getter/setter",
      "alternatives": [
        "Encapsulated field"
      ],
      "explanation": "Property: looks like field, acts like method. Syntax: language dependent. Benefit: clean syntax. Example: C# properties. Importance: abstraction."
    },
    {
      "question": "What is const correctness?",
      "answer": "Promise not to modify through const reference",
      "alternatives": [
        "Const commitment"
      ],
      "explanation": "Const: compiler enforced promise. Purpose: prevent accidental modification. Language: C++. Benefit: safety. Importance: compiler feature."
    }
  ]
}
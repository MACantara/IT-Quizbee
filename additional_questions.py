ALL_ADDITIONAL_QUESTIONS = {}

# 31. HTML Basics
HTML_BASICS_QUESTIONS = {
    "easy": [
        {"question": "What markup language structures web content?", "answer": "HTML", "alternatives": ["HyperText Markup Language"], "explanation": "HTML (HyperText Markup Language) structures content using tags (elements). Tags: paired (<tag></tag>) or self-closing (<tag/>). Creates semantic meaning: headings, paragraphs, lists, forms. Browsers interpret HTML, render visually. Foundation of web. Combined with CSS (styling), JavaScript (behavior). Every website uses HTML."},
        {"question": "What tag creates page structure?", "answer": "DOCTYPE", "alternatives": ["Document type"], "explanation": "DOCTYPE declaration tells browser HTML version. Modern: <!DOCTYPE html> for HTML5. Placed first in document. Ensures consistent rendering across browsers. Without DOCTYPE: quirks mode (inconsistent). Essential for standards-compliant pages. HTML5 DOCTYPE simplest: <!DOCTYPE html>."},
        {"question": "What container holds page metadata?", "answer": "Head", "alternatives": ["<head>"], "explanation": "<head> contains metadata (not visible on page): title, meta tags, style links, scripts. Title: appears in browser tab. Meta tags: character encoding, viewport (responsive), description (search engines). Important for: SEO, responsive design, page information."},
        {"question": "What tag displays visible page content?", "answer": "Body", "alternatives": ["<body>"], "explanation": "<body> contains all visible content: text, images, links, forms. Rendered on screen. All interactive elements, layouts defined here. Entire page layout contained within. Nested tags define content structure."},
        {"question": "What tag creates largest heading?", "answer": "H1", "alternatives": ["<h1>"], "explanation": "<h1> creates largest heading (most important). Six levels: H1-H6 (decreasing size/importance). H1 should appear once per page (main topic). Screen readers: use headings for navigation. SEO: H1 important for keywords. Proper hierarchy: H1  H2  H3, not skipping levels."},
        {"question": "What tag groups related content?", "answer": "Div", "alternatives": ["<div>"], "explanation": "<div> generic container grouping content. Block-level: takes full width. Used for layout structure, styling containers. Can nest divs for complex layouts. Foundation for CSS positioning, layout. No semantic meaning (unlike section, article). Used extensively in web design."},
        {"question": "What tag creates clickable links?", "answer": "Anchor", "alternatives": ["<a>", "<a> tag"], "explanation": "<a> (anchor) creates hyperlink. Attribute href=\"URL\" specifies destination. Text between tags visible/clickable. Types: external (other sites), internal (same site), email (mailto:), anchors (#id). Essential for navigation, user journey. href missing: not link."},
        {"question": "What tag embeds images?", "answer": "Image", "alternatives": ["<img>", "Img tag"], "explanation": "<img> self-closing tag displays image. Attributes: src (image path), alt (fallback text). alt critical: accessibility (screen readers), if image fails to load. src missing: broken image. Can scale with width/height. Essential for visual content."},
        {"question": "What tag creates unordered list?", "answer": "Unordered List", "alternatives": ["<ul>"], "explanation": "<ul> creates bulleted list. Items: <li> (list item). Unordered: no sequence importance. Common for navigation, features, options. Nested: create sub-lists. Semantic structure improves accessibility, SEO. <ol> for ordered (numbered) lists."},
        {"question": "What tag creates form input?", "answer": "Input", "alternatives": ["<input>"], "explanation": "<input> self-closing tag creates form field. Types: text, password, email, number, checkbox, radio, submit. Attributes: type, name, placeholder, value. Collects user data. Essential for: login, search, filters. Combined with <form> for submission."}
    ],
    "average": [
        {"question": "What semantic tag represents article content?", "answer": "Article", "alternatives": ["<article>"], "explanation": "<article> semantic tag represents independent content (blog post, news story, comment). Improves: accessibility (screen readers), SEO (structure). Vs. <div>: <article> has semantic meaning. Can nest <article> within <article>. Used: news sites, blogs, forums. Helps organize content logically."},
        {"question": "What semantic tag defines page sections?", "answer": "Section", "alternatives": ["<section>"], "explanation": "<section> semantic tag groups thematically related content. Represents document section (chapters, tabs, etc.). Improves accessibility, SEO. Use when content naturally groups. Vs. <div>: <section> semantic. Too many <section>s harm readability. Use judiciously for meaningful sections."},
        {"question": "What semantic tag identifies main content?", "answer": "Main", "alternatives": ["<main>"], "explanation": "<main> semantic tag contains primary page content (excludes header, footer, navigation). One <main> per page. Helps screen readers skip to content. Improves accessibility, SEO. Assistive tech: identifies main focus. Use instead of generic <div> for content area."},
        {"question": "What semantic tag labels navigation?", "answer": "Nav", "alternatives": ["<nav>"], "explanation": "<nav> semantic tag defines navigation section. Contains links: main navigation, breadcrumbs, pagination. Not all links need <nav> (e.g., footer links). Improves: accessibility (skip to nav), SEO (crawling). Screen readers: identify navigation purpose."},
        {"question": "What tag creates table structure?", "answer": "Table", "alternatives": ["<table>"], "explanation": "<table> creates data table. Structure: <tr> (row), <td> (data cell), <th> (header cell). <thead>, <tbody>, <tfoot> organize sections. Semantic: indicates data relationship. Use: tabular data (not layout - use CSS Grid/Flexbox). Accessibility: scope attributes link headers to cells."},
        {"question": "What attribute validates email input?", "answer": "type=\"email\"", "alternatives": ["Email type", "Email input"], "explanation": "type=\"email\" on <input> validates email format. Browser checks: @ symbol, domain. Shows email keyboard on mobile. Provides user feedback for invalid format. Client-side validation (prevent unnecessary submissions). Server-side validation still needed for security."},
        {"question": "What attribute makes input required?", "answer": "required", "alternatives": ["Required attribute"], "explanation": "required attribute makes form field mandatory. Browser prevents form submission if empty. Shows validation message. Client-side validation (UX improvement). Server-side validation essential for security (never trust client). Improves form usability, error prevention."},
        {"question": "What attribute provides input hints?", "answer": "placeholder", "alternatives": ["Placeholder attribute"], "explanation": "placeholder attribute displays hint text in input field. Disappears on focus. Improves UX: shows expected format (e.g., \"mm/dd/yyyy\"). Not replacement for label (accessibility). Assistive tech: ignores placeholder. Use with explicit <label> tags."},
        {"question": "What tag associates label with input?", "answer": "Label", "alternatives": ["<label>"], "explanation": "<label> associates text with form input. Attribute for=\"id\" matches input id. Improves: accessibility (screen readers), usability (larger click area for checkbox/radio). Clicks label: focuses/activates input. Essential for accessible forms."},
        {"question": "What tag groups related form elements?", "answer": "Fieldset", "alternatives": ["<fieldset>"], "explanation": "<fieldset> groups related form inputs. <legend> labels group. Visually: border around grouped inputs. Improves: accessibility (logical grouping), organization. Example: personal info, payment info sections. Semantic structure for complex forms."}
    ],
    "difficult": [
        {"question": "What improves semantic meaning for screen readers?", "answer": "ARIA attributes", "alternatives": ["Accessibility Markup"], "explanation": "ARIA (Accessible Rich Internet Applications) attributes enhance accessibility. Examples: role (defines element purpose), aria-label (text label), aria-hidden (hide from readers). Screen readers: use ARIA to understand complex components. Important: don't replace semantic HTML. Enhances, not replaces, native semantics."},
        {"question": "What attribute marks content inaccessible?", "answer": "aria-hidden=\"true\"", "alternatives": ["Hidden from readers"], "explanation": "aria-hidden=\"true\" hides element from screen readers (but visible on page). Use: decorative elements (icons, spacing). Prevents confusion for accessibility users. Important: don't hide meaningful content. Improves accessibility by reducing clutter."},
        {"question": "What enhances form accessibility for complex inputs?", "answer": "aria-label", "alternatives": ["ARIA labels"], "explanation": "aria-label provides accessible name for elements. Useful: inputs without visible labels, complex buttons. Screen readers: read aria-label instead of text. Invisible: doesn't change visual appearance. Fallback when visual label impossible. Improves accessibility for assistive tech."},
        {"question": "What improves landmark navigation?", "answer": "Semantic HTML landmarks", "alternatives": ["Landmark regions"], "explanation": "Semantic landmarks (<main>, <nav>, <header>, <footer>, <article>, <section>) help screen readers navigate. Users skip sections: 'Jump to main content'. Improves: accessibility, user experience. Landmarks create document outline. Essential for accessible, scannable pages."},
        {"question": "What meta tag ensures mobile responsiveness?", "answer": "viewport meta tag", "alternatives": ["Viewport metatag"], "explanation": "Viewport meta tag: <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">. Tells browser: scale to device width. Without: page zoomed out (tiny text). Mobile-first design requires viewport tag. Responsive: works all screen sizes. Critical for modern web."},
        {"question": "What attribute marks content language?", "answer": "lang attribute", "alternatives": ["Language attribute"], "explanation": "lang attribute on <html> specifies page language. Example: <html lang=\"en\">. Improves: screen reader pronunciation, search engine optimization. lang on specific elements: phrases in different languages. Screen readers: adjust pronunciation. SEO: helps language detection."},
        {"question": "What prevents browser autocomplete?", "answer": "autocomplete=\"off\"", "alternatives": ["No autocomplete"], "explanation": "autocomplete=\"off\" disables browser autofill (passwords, previous entries). Use: sensitive forms (passwords), custom implementations. Note: modern browsers ignore for passwords (security). Improves security/UX for forms. User privacy: prevents data leakage."},
        {"question": "What meta tag improves SEO?", "answer": "meta description", "alternatives": ["Description tag"], "explanation": "Meta description: <meta name=\"description\" content=\"page summary\">. Appears in search results below title. Improves: click-through rate, SEO. Search engines: use for indexing. Optimal length: 150-160 characters. Relevant description increases organic traffic."},
        {"question": "What ensures proper character encoding?", "answer": "charset meta tag", "alternatives": ["Character set"], "explanation": "Charset meta tag: <meta charset=\"UTF-8\">. Specifies character encoding. UTF-8: supports all languages, universal standard. Without: special characters display incorrectly. Place: first in <head>. Essential for: international sites, special symbols. Prevents garbled text."},
        {"question": "What Open Graph tag enables social sharing?", "answer": "og:title", "alternatives": ["Open Graph tags"], "explanation": "Open Graph tags (og:title, og:description, og:image) customize social media previews. When shared: preview shows custom title, description, image. Examples: og:type (website, article), og:url (canonical). Improves social sharing, engagement. Major sites: use Open Graph for rich previews."}
    ]
}

ALL_ADDITIONAL_QUESTIONS['html_basics'] = HTML_BASICS_QUESTIONS

# 32. CSS Styling
CSS_STYLING_QUESTIONS = {
    "easy": [
        {"question": "What styles HTML elements visually?", "answer": "CSS", "alternatives": ["Cascading Style Sheets"], "explanation": "CSS (Cascading Style Sheets) defines visual presentation of HTML. Properties: color, font, layout, spacing, animations. Selectors: target elements (tag, class, id). Cascading: specificity determines which rules apply. Separation: HTML (content), CSS (appearance). Modern web requires CSS mastery."},
        {"question": "What connects CSS to HTML?", "answer": "Stylesheet link", "alternatives": ["<link> tag"], "explanation": "<link> tag in <head> references external CSS file. Syntax: <link rel=\"stylesheet\" href=\"style.css\">. Benefits: external (reusable, cacheable), separation of concerns. Alternative: inline <style> (not recommended for maintainability). External CSS: best practice."},
        {"question": "What selects HTML elements to style?", "answer": "Selector", "alternatives": ["CSS selector"], "explanation": "CSS selector targets HTML elements. Types: element (p), class (.classname), id (#idname), attribute ([type=\"text\"]). Combines for specificity. Example: p.highlight selects <p> with class highlight. Foundation of CSS: correct selectors = correct styling."},
        {"question": "What class selector targets elements?", "answer": ".classname", "alternatives": ["Dot notation"], "explanation": ".classname selects all elements with that class. Class: HTML attribute class=\"classname\". Reusable: same class, multiple elements. Important: lowercase, no spaces. Multiple classes: <div class=\"red bold\">. Most common selector in practice."},
        {"question": "What unique selector targets single element?", "answer": "#idname", "alternatives": ["ID selector"], "explanation": "#idname selects element with that ID. ID: HTML attribute id=\"idname\". Unique: only one ID per page (if following best practices). Higher specificity than classes. Use: special styling, JavaScript targeting. Avoid overuse: classes better for multiple elements."},
        {"question": "What property sets text color?", "answer": "color", "alternatives": ["Text color property"], "explanation": "color property sets text foreground color. Values: names (red), hex (#FF0000), RGB (rgb(255,0,0)), HSL (hsl(0,100%,50%)). Inheritance: inherits from parent. Contrast important: accessibility, readability. Used constantly in stylesheets."},
        {"question": "What property sets background?", "answer": "background-color", "alternatives": ["Background property"], "explanation": "background-color sets element background. Values: color names, hex, RGB, HSL. Transparency: rgba(255,0,0,0.5) or hsla. Doesn't inherit. background shorthand: color, image, position. Controls element appearance behind content."},
        {"question": "What property sizes text?", "answer": "font-size", "alternatives": ["Text size"], "explanation": "font-size sets text size. Units: px (pixels, fixed), em (relative to parent), rem (relative to root), % (percentage). Responsive: em/rem scale automatically. Common: 14-16px base size. Inheritance: inherits from parent. Hierarchy: larger headings."},
        {"question": "What property sets font type?", "answer": "font-family", "alternatives": ["Font property"], "explanation": "font-family specifies typeface. Multiple fonts: fallback chain (first available used). Web fonts: @import or @font-face. Generic families: serif, sans-serif, monospace. Readability: sans-serif common for web. Specificity: Arial, 'Courier New' (quotes if spaces)."},
        {"question": "What property creates space inside element?", "answer": "padding", "alternatives": ["Padding property"], "explanation": "padding creates space inside element (inside border). Values: px, em, %. Directions: padding-top, -right, -bottom, -left. Shorthand: padding: 10px 20px (vertical horizontal). Important: increases element size. Background color extends into padding."}
    ],
    "average": [
        {"question": "What property creates space outside element?", "answer": "margin", "alternatives": ["Margin property"], "explanation": "margin creates space outside element (outside border). Directions: margin-top, -right, -bottom, -left. Shorthand: margin: 10px 20px. Collapsing: adjacent margins combine (not add). Auto: margin: auto centers. Important: doesn't affect element size (unlike padding)."},
        {"question": "What property displays element?", "answer": "display", "alternatives": ["Display property"], "explanation": "display controls layout behavior. Values: block (full width), inline (text flow), inline-block (hybrid), flex (flexible), grid (layout), none (hidden). Default: block for divs, inline for span. Changes element nature. Foundation of modern layout."},
        {"question": "What layout method uses flexible containers?", "answer": "Flexbox", "alternatives": ["CSS Flexbox", "Flexible Box"], "explanation": "Flexbox (Flexible Box) layout aligns items flex direction (row/column). Properties: flex-direction, justify-content (horizontal), align-items (vertical), flex-wrap. Container: display: flex. Children: flex (grow), flex-shrink, flex-basis. Responsive, adaptive layouts. Industry standard."},
        {"question": "What layout method organizes grid structure?", "answer": "CSS Grid", "alternatives": ["Grid layout"], "explanation": "CSS Grid creates two-dimensional layout. Container: display: grid. Properties: grid-template-columns (widths), grid-template-rows (heights). Children: grid-column, grid-row placement. Responsive: repeat(), fr units. Powerful: complex layouts easily. Combines with media queries."},
        {"question": "What adjusts styles for screen sizes?", "answer": "Media queries", "alternatives": ["Responsive design"], "explanation": "Media queries apply styles conditionally. Syntax: @media (max-width: 768px) { styles }. Breakpoints: mobile (400px), tablet (768px), desktop (1024px). Mobile-first: design mobile first, add complexity. Responsive: one codebase, multiple screens. Essential for modern web."},
        {"question": "What units scale with viewport?", "answer": "Relative units", "alternatives": ["em", "rem", "vw"], "explanation": "Relative units scale based on context. em: relative to element font-size. rem: relative to root font-size. % : relative to parent. vw/vh: viewport width/height. Responsive: flexible sizing. Absolute: px (fixed). Mix for flexibility: use rem for base sizes."},
        {"question": "What controls element opacity?", "answer": "opacity", "alternatives": ["Transparency"], "explanation": "opacity sets transparency. Values: 0 (invisible) to 1 (opaque). 0.5 = 50% transparent. Affects element and children. rgba color: transparency without affecting children. Hover effects: opacity changes on interaction. Subtle effects improve UX."},
        {"question": "What applies visual effects?", "answer": "Transform", "alternatives": ["CSS transform"], "explanation": "transform applies 2D/3D effects. Functions: rotate(), scale(), translate(), skew(). No layout impact: performance good. Animations: smooth transitions. Example: transform: rotate(45deg) scale(1.2). Performance: hardware accelerated. Modern effects possible."},
        {"question": "What animates property changes?", "answer": "Transition", "alternatives": ["CSS transition"], "explanation": "transition smooths property changes. Syntax: transition: property duration timing-function. Example: transition: color 0.3s ease. Hover: trigger transition on interaction. Duration: how long (ms/s). Timing: linear, ease, ease-in, ease-out. Improves UX."},
        {"question": "What combines selectors?", "answer": "Selector combinators", "alternatives": ["Combinators"], "explanation": "Selector combinators combine selectors. Types: descendant (space), child (>), adjacent sibling (+), general sibling (~). Example: div > p (children), ul + p (after). Specificity increases. Complex selectors: careful use. Readability: balance power and clarity."}
    ],
    "difficult": [
        {"question": "What calculates value from other values?", "answer": "calc()", "alternatives": ["CSS calc function"], "explanation": "calc() performs calculations: addition, subtraction, multiplication, division. Syntax: calc(100% - 20px). Mixes units: powerful flexibility. Responsive: 50% width minus margin. Browser support: excellent. Dynamic sizing without JavaScript."},
        {"question": "What creates animations from keyframes?", "answer": "Animation", "alternatives": ["CSS animation"], "explanation": "animation runs keyframe sequences. Syntax: @keyframes name { 0% {...} 100% {...} }. Property: animation-name, -duration, -timing-function, -iteration-count. Complex effects: loops, direction changes. Performance: GPU accelerated. Enhances engagement."},
        {"question": "What selects based on state?", "answer": "Pseudo-class", "alternatives": [":hover, :focus, :active"], "explanation": "Pseudo-class selects element state. Examples: :hover (mouse over), :focus (keyboard), :active (clicked), :visited (link visited). :nth-child(n): select by position. Syntax: selector:pseudo-class. No HTML change: purely CSS. Interactive behavior."},
        {"question": "What generates content without HTML?", "answer": "Pseudo-element", "alternatives": ["::before, ::after"], "explanation": "Pseudo-element generates content without HTML. ::before: before content. ::after: after content. Syntax: selector::pseudo-element { content: \"text\" }. Common: ::first-line, ::selection. Content property. Reduces HTML clutter."},
        {"question": "What organizes style hierarchy?", "answer": "Specificity", "alternatives": ["CSS specificity"], "explanation": "Specificity determines which rule applies. Calculate: inline (1000) > ID (100) > class (10) > element (1). Equal specificity: last rule wins (cascade). !important: override (avoid). Understand: debug styling conflicts. Lower specificity when possible: maintainability."},
        {"question": "What scopes styles to component?", "answer": "CSS Modules", "alternatives": ["Scoped CSS"], "explanation": "CSS Modules scope styles to components. Import: styles as JavaScript object. Prevents: global naming conflicts. Unique class names generated. Tools: webpack, Next.js, Vue. Benefits: maintainability, reusability. Modern approach: separation of concerns."},
        {"question": "What defines design system colors?", "answer": "CSS Variables", "alternatives": ["Custom properties", "--variable"], "explanation": "CSS Variables (custom properties) define reusable values. Syntax: --color-primary: #007bff; use: color: var(--color-primary). Benefits: consistency, maintainability, dynamic changes. JavaScript access: getComputedStyle(). Modern approach: DRY principle."},
        {"question": "What gradient blends colors?", "answer": "Gradient", "alternatives": ["CSS gradient"], "explanation": "Gradient smoothly blends colors. Types: linear (direction), radial (center), conic (angle). Syntax: linear-gradient(90deg, red, blue). Multiple colors: smooth transitions. Performance: fast. Background, text, buttons. Creates professional appearance."},
        {"question": "What hides overflow content?", "answer": "overflow", "alternatives": ["Overflow property"], "explanation": "overflow controls content exceeding container. Values: visible (default), hidden (cut), scroll (always), auto (when needed). X/Y: overflow-x, overflow-y. Scrollbars: browser controlled. Layouts: prevent unintended overflow. Text: text-overflow: ellipsis truncates."},
        {"question": "What property positions element?", "answer": "position", "alternatives": ["Positioning"], "explanation": "position determines placement method. Values: static (default), relative (offset from normal), absolute (positioned within parent), fixed (viewport), sticky (scroll behavior). Properties: top, right, bottom, left (displacement). z-index: layering. Complex layouts."}
    ]
}

ALL_ADDITIONAL_QUESTIONS['css_styling'] = CSS_STYLING_QUESTIONS

# 33. JavaScript Basics
JAVASCRIPT_BASICS_QUESTIONS = {
    "easy": [
        {"question": "What language adds interactivity to web pages?", "answer": "JavaScript", "alternatives": ["JS"], "explanation": "JavaScript is programming language enabling interactivity on web pages. Executes in browser (client-side). Manipulates DOM (HTML elements), handles events (clicks, input). Popular frameworks: React, Vue, Angular. Essential for modern web. Server-side (Node.js) also possible."},
        {"question": "What holds data value?", "answer": "Variable", "alternatives": ["Variable declaration"], "explanation": "Variable stores data value. Declaration: var, let, const. var: function-scoped (avoid). let: block-scoped, reassignable. const: block-scoped, immutable. Naming: camelCase convention. Types: string, number, boolean, object, array. Assignment: variableName = value."},
        {"question": "What are text data type?", "answer": "String", "alternatives": ["Text"], "explanation": "String represents text. Syntax: 'single', \"double\", `backticks` (template literals). Template literals: interpolation ${variable}. Methods: length, substring(), toUpperCase(), toLowerCase(). Common: user input, messages. Immutable: operations return new string."},
        {"question": "What are numeric data type?", "answer": "Number", "alternatives": ["Numeric value"], "explanation": "Number represents integers, decimals. Operators: +, -, *, /, %. Special values: NaN (not a number), Infinity. Methods: parseInt(), parseFloat(), toFixed(). Math object: Math.round(), Math.floor(), Math.max(). Precision: 64-bit floating point."},
        {"question": "What are boolean data type?", "answer": "Boolean", "alternatives": ["True/False"], "explanation": "Boolean represents true or false. Operators: && (AND), || (OR), ! (NOT). Comparison: ==, ===, !=, !==, <, >, <=, >=. Truthy/Falsy: non-zero/non-empty = true, null/undefined/0/'' = false. Conditionals: if/else use booleans. Logic foundation."},
        {"question": "What displays output?", "answer": "console.log()", "alternatives": ["Logging"], "explanation": "console.log() displays output in browser console. Debugging: inspect variables, execution flow. Syntax: console.log('message', variable). Other methods: console.error(), console.warn(), console.table(). Development tool: not visible to users. Essential for debugging."},
        {"question": "What executes code conditionally?", "answer": "if/else", "alternatives": ["Conditional statement"], "explanation": "if/else executes code based on condition. Syntax: if (condition) {...} else {...}. Condition: boolean expression. Else if: multiple conditions. Ternary: condition ? true : false. Controls program flow based on decisions. Essential control structure."},
        {"question": "What repeats code block?", "answer": "Loop", "alternatives": ["Iteration"], "explanation": "Loop repeats code block. Types: for (known iterations), while (condition-based), for...of (iterate collection). Syntax: for (let i = 0; i < 10; i++) {...}. Break: exit loop. Continue: skip iteration. Essential: process arrays, generate sequences."},
        {"question": "What organizes related data?", "answer": "Object", "alternatives": ["Key-value pairs"], "explanation": "Object stores related data as key-value pairs. Syntax: {key: value}. Access: object.key or object['key']. Properties: attributes. Methods: functions within object. Used constantly: DOM elements, API responses, modeling real-world entities."},
        {"question": "What organizes ordered data?", "answer": "Array", "alternatives": ["List", "Collection"], "explanation": "Array stores ordered values. Syntax: [value1, value2, ...]. Access: array[index] (0-based). Methods: push(), pop(), length. Iteration: for loop, forEach(), map(). Common: store lists of items, process collections. Mutable: modify after creation."}
    ],
    "average": [
        {"question": "What transforms array elements?", "answer": "map()", "alternatives": ["Array map method"], "explanation": "map() transforms each array element using function. Returns: new array (same length). Syntax: array.map(element => element * 2). Common: convert data format, calculate values. Not modifying original. Functional programming: preferred over for loops."},
        {"question": "What filters array elements?", "answer": "filter()", "alternatives": ["Array filter method"], "explanation": "filter() selects elements meeting condition. Returns: new array with matching elements. Syntax: array.filter(element => element > 5). Common: find items, remove invalid. Non-destructive: original unchanged. Chainable: combine with map(), reduce()."},
        {"question": "What selects HTML element?", "answer": "document.querySelector()", "alternatives": ["DOM selector"], "explanation": "document.querySelector() selects first matching element. Syntax: document.querySelector('.class'). Returns: element or null. Selectors: CSS syntax. Alternative: getElementById(), getElementsByClassName() (less common now). Manipulate: change content, style, attributes."},
        {"question": "What responds to user action?", "answer": "Event listener", "alternatives": ["Event handler"], "explanation": "Event listener responds to user action (click, input, submit). Syntax: element.addEventListener('event', function). Events: 'click', 'submit', 'keydown', 'change'. Parameters: event object contains details. Remove: removeEventListener(). Essential: interactivity."},
        {"question": "What modifies HTML content?", "answer": "innerHTML", "alternatives": ["innerHTML property"], "explanation": "innerHTML sets/gets HTML content. Syntax: element.innerHTML = '<p>Hello</p>'. Security risk: XSS if trusting user input. Alternative: textContent (text only). Caution: overwrites children. Parse/render: browser processes HTML. Common but dangerous."},
        {"question": "What changes element style?", "answer": "style property", "alternatives": ["Style attribute"], "explanation": "style property modifies CSS. Syntax: element.style.color = 'red'. Properties: camelCase (backgroundColor not background-color). Inline styles: high specificity. Alternative: classList (better). Apply multiple: use class instead of individual properties."},
        {"question": "What manages element classes?", "answer": "classList", "alternatives": ["Class management"], "explanation": "classList manages CSS classes. Methods: add(), remove(), toggle(). Syntax: element.classList.add('active'). Multiple classes: preferred over style property. Separation: HTML structure, CSS styling. Dynamic behavior: toggle on events."},
        {"question": "What triggers multiple conditions?", "answer": "Switch statement", "alternatives": ["Switch/case"], "explanation": "Switch evaluates multiple conditions. Syntax: switch(value) { case 1: ... break; }. Break: prevents fallthrough. Default: if no match. Cleaner than if/else chains. Pattern matching: exact value comparison. Efficient: multiple branches."},
        {"question": "What reuses code?", "answer": "Function", "alternatives": ["Method", "Function definition"], "explanation": "Function encapsulates reusable code. Syntax: function name(parameters) {...} or const name = (parameters) => {...}. Arrow functions: modern syntax. Parameters: inputs. Return: output. Call: name(arguments). DRY: don't repeat yourself principle."},
        {"question": "What waits for delayed execution?", "answer": "setTimeout()", "alternatives": ["Timeout function"], "explanation": "setTimeout() executes code after delay. Syntax: setTimeout(function, milliseconds). Example: setTimeout(() => alert('hi'), 2000). Cancel: clearTimeout(id). Common: delays, animations, API polling. setInterval(): repeats after intervals."}
    ],
    "difficult": [
        {"question": "What manages asynchronous operations?", "answer": "Promise", "alternatives": ["JavaScript Promise"], "explanation": "Promise represents eventual completion of async operation. States: pending, fulfilled, rejected. Then/catch: handle results. Syntax: new Promise((resolve, reject) => {...}). Chaining: multiple operations in sequence. Modern: fetch() returns Promise. Foundation of async JavaScript."},
        {"question": "What simplifies async code?", "answer": "Async/await", "alternatives": ["Async function"], "explanation": "Async/await simplifies Promise handling. async: function returns Promise. await: pause until Promise resolves. Syntax: async function() { const result = await promise; }. Cleaner than .then(). Error handling: try/catch. Modern approach: preferred over callbacks."},
        {"question": "What prevents variable mutation?", "answer": "Immutability", "alternatives": ["Const, object freeze"], "explanation": "Immutability prevents unintended data changes. const: prevent reassignment. Object.freeze(): prevent modification. Benefits: predictability, debugging. Functional programming: compose functions without side effects. Libraries: Immer.js, Immutable.js. Important for large applications."},
        {"question": "What shares code between objects?", "answer": "Prototype", "alternatives": ["Inheritance"], "explanation": "Prototype enables code sharing between objects. Object inherits properties from prototype. Chain: prototype of prototype. Constructor: uses prototype. Modern: classes (syntactic sugar for prototypes). Understanding: essential for JavaScript mastery."},
        {"question": "What encapsulates related data?", "answer": "Class", "alternatives": ["ES6 class"], "explanation": "Class organizes data and methods. Syntax: class Name { constructor() {...} method() {...} }. Constructor: initialization. Inheritance: extends. Modern: replaces function constructors. Object-oriented: model real-world entities. Methods: behaviors."},
        {"question": "What fetches remote data?", "answer": "fetch()", "alternatives": ["Fetch API"], "explanation": "fetch() retrieves data from URLs. Returns: Promise resolving to Response. JSON: response.json(). Syntax: fetch(url).then(r => r.json()).then(data => {...}). Async/await: cleaner. Error handling: try/catch. Modern: replaces XMLHttpRequest."},
        {"question": "What parses JSON text?", "answer": "JSON.parse()", "alternatives": ["JSON parsing"], "explanation": "JSON.parse() converts JSON string to object. Opposite: JSON.stringify(). Text from server: parsed to use. Syntax: const obj = JSON.parse(jsonString). Error: invalid JSON throws. Common: API responses. Format: human-readable data exchange."},
        {"question": "What isolates variable scope?", "answer": "Closure", "alternatives": ["Function closure"], "explanation": "Closure accesses outer function variables. Inner function: remembers outer scope. Syntax: function outer() { let x; function inner() { use x; } }. Data privacy: encapsulation. Callbacks: closures capture context. Advanced: powerful for complex patterns."},
        {"question": "What combines multiple functions?", "answer": "Higher-order function", "alternatives": ["Function composition"], "explanation": "Higher-order function takes or returns function. Examples: map(), filter(), setTimeout(). Functional programming: building blocks. Composition: combine simpler functions. Abstraction: complex logic from simple parts. Powers modern libraries."},
        {"question": "What manages application state?", "answer": "State management", "alternatives": ["Redux", "Vuex"], "explanation": "State management centralizes application data. Libraries: Redux, Vuex, Context API. Single source of truth: prevent inconsistency. Actions: describe changes. Reducers: apply changes. Debugging: track state changes. Scalability: complex applications."}
    ]
}

ALL_ADDITIONAL_QUESTIONS['javascript_basics'] = JAVASCRIPT_BASICS_QUESTIONS

# 34. Responsive Design
RESPONSIVE_DESIGN_QUESTIONS = {
    "easy": [
        {"question": "What design adapts to different screen sizes?", "answer": "Responsive design", "alternatives": ["Responsive web design"], "explanation": "Responsive design adapts layout to screen size. Single codebase: works desktop, tablet, mobile. Techniques: flexible layouts, media queries, flexible images. Benefits: better UX, SEO (mobile-first), cost (one site). Mobile-first: design mobile first, enhance for desktop."},
        {"question": "What base assumes mobile users?", "answer": "Mobile-first", "alternatives": ["Mobile-first approach"], "explanation": "Mobile-first: design for mobile first, add complexity for larger screens. Rationale: mobile increasingly common, forces prioritization. Media queries: min-width (add features). Performance: simpler initially. Better results: essential features prominent on all devices."},
        {"question": "What container holds flexible content?", "answer": "Viewport", "alternatives": ["Device viewport"], "explanation": "Viewport is visible area on device. Meta tag: <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">. Width: device width. Initial-scale: initial zoom. Essential: without, pages appear tiny on mobile. Device-specific: Chrome DevTools simulates."},
        {"question": "What image scales with container?", "answer": "Responsive image", "alternatives": ["Fluid image"], "explanation": "Responsive image scales with container. CSS: img { max-width: 100%; height: auto; }. Prevents: exceeding container, distortion. Flexible: always fits. Performance: consider size. HTML: srcset attribute (multiple versions)."},
        {"question": "What adjusts layout based on size?", "answer": "Breakpoint", "alternatives": ["Media query breakpoint"], "explanation": "Breakpoint is screen width triggering layout change. Common: 480px (mobile), 768px (tablet), 1024px (desktop), 1200px (large desktop). Mobile-first: min-width (add). Desktop-first: max-width (remove). Strategy: test on real devices, use common breakpoints."},
        {"question": "What CSS unit is relative to viewport?", "answer": "vw/vh", "alternatives": ["Viewport units"], "explanation": "vw (viewport width) and vh (viewport height) are percentages of viewport. 100vw = full width, 50vw = half width. Responsive: scale with window. Uses: full-screen sections, hero images. Caution: vw includes scrollbar (overflow)."},
        {"question": "What property prevents image distortion?", "answer": "aspect-ratio", "alternatives": ["Aspect ratio property"], "explanation": "aspect-ratio property maintains width-to-height ratio. CSS: aspect-ratio: 16 / 9; Example: YouTube video (16:9). Prevents: distortion on resize. Modern: browser calculates height automatically. Simplifies responsive images."},
        {"question": "What technique provides multiple image sizes?", "answer": "Srcset", "alternatives": ["Source set attribute"], "explanation": "srcset provides multiple image versions for different sizes. Syntax: <img srcset=\"small.jpg 480w, large.jpg 1024w\">. Browser chooses: based on device. Performance: mobile downloads smaller file. Modern: responsive images without JavaScript."},
        {"question": "What text measurement scales with viewport?", "answer": "em/rem units", "alternatives": ["Relative font sizes"], "explanation": "em/rem scale text responsively. em: relative to parent font size. rem: relative to root (html) font size. Responsive: change root, all scale. Flexible: em/rem better than px for responsiveness. Common: base 16px, scale from there."},
        {"question": "What layout adapts to content size?", "answer": "Flexible layout", "alternatives": ["Fluid layout"], "explanation": "Flexible layout adapts to content. CSS: width: 100% (within container). Containers: max-width limits growth. Margins: auto centers. Responsive: no fixed widths. Combines with breakpoints for control."}
    ],
    "average": [
        {"question": "What technique hides on small screens?", "answer": "Display none", "alternatives": ["Display property"], "explanation": "display: none hides element on small screens. Media query: @media (max-width: 600px) { .desktop { display: none; } }. Alternative: visibility: hidden (takes space). Common: hide complex features on mobile, simplify experience. Progressive enhancement: enhance for larger screens."},
        {"question": "What container has flexible width?", "answer": "Fluid container", "alternatives": ["Flexible width"], "explanation": "Fluid container width changes with viewport. CSS: width: 100%; max-width: 1200px; Prevents: too wide on large screens, shrinks on small. Common: wrapper div. Combines with padding: responsive spacing."},
        {"question": "What technique uses percentage widths?", "answer": "Percentage layout", "alternatives": ["Percentage-based"], "explanation": "Percentage layout: elements sized as % of parent. Example: 50% = half width. Responsive: scales automatically. Gutters: margins proportional. CSS Grid/Flexbox: more flexible. Calculation: careful with borders/padding (box-sizing)."},
        {"question": "What CSS layout fills available space?", "answer": "Flexbox", "alternatives": ["Flexible box"], "explanation": "Flexbox creates flexible layouts. Container: display: flex. Children: grow/shrink. Responsive: no media queries needed (sometimes). Wrap: flex-wrap adapts to container. Modern: standard for layouts. Simplifies: complex structures easily."},
        {"question": "What prevents horizontal scrolling?", "answer": "Overflow hidden", "alternatives": ["Prevent overflow"], "explanation": "overflow: hidden prevents horizontal scrolling. Container: width 100%, overflow: hidden. Prevents: content exceeding viewport. Design: ensure all content fits. Mobile-first: critical to prevent awkward scrolling."},
        {"question": "What menu adapts to screen size?", "answer": "Hamburger menu", "alternatives": ["Mobile menu"], "explanation": "Hamburger menu (three lines) toggles navigation on mobile. Desktop: full navigation visible. Mobile: menu hidden, toggle shows/hides. Icon: three horizontal lines. JavaScript: toggle visibility. UX: cleaner mobile interface."},
        {"question": "What testing evaluates responsiveness?", "answer": "Responsive testing", "alternatives": ["Device testing"], "explanation": "Responsive testing checks multiple screen sizes. Tools: Chrome DevTools, BrowserStack. Real devices: essential (emulators not perfect). Test: layout, images, readability. Common sizes: iPhone, iPad, desktop. Continuous: every design change."},
        {"question": "What prevents image pixelation?", "answer": "High-DPI images", "alternatives": ["Retina images"], "explanation": "High-DPI (retina) images prevent pixelation on high-resolution screens. Density: 2x image (double pixels). Srcset: browser loads appropriate. Performance: larger file, better appearance. Modern displays: mostly high-DPI now."},
        {"question": "What container collapses on small screens?", "answer": "Collapsible content", "alternatives": ["Accordion"], "explanation": "Collapsible content hides/shows on interaction. Mobile: saves space. Common: FAQs, menus, filters. JavaScript: toggle display. Accessibility: keyboard navigation. UX: progressive disclosure reveals details."},
        {"question": "What spacing adjusts responsively?", "answer": "Responsive spacing", "alternatives": ["Dynamic padding/margin"], "explanation": "Responsive spacing adapts to screen size. CSS: padding: 5vw (5% viewport width). Media queries: different values per breakpoint. Proportional: scales with device. Consistent: maintains design intent across sizes."}
    ],
    "difficult": [
        {"question": "What design paradigm prioritizes mobile?", "answer": "Mobile-first design", "alternatives": ["Mobile priority"], "explanation": "Mobile-first design starts mobile, enhances desktop. Rationale: constraints force better UX. Media queries: min-width (progressively enhance). Performance: simpler initially, faster on mobile. Mindset: essential features work on all screens. Modern standard."},
        {"question": "What technique adapts image resolution?", "answer": "Adaptive images", "alternatives": ["Image optimization"], "explanation": "Adaptive images load appropriate resolution. Techniques: srcset, picture element, responsive image library. Sizes: mobile-small, tablet-medium, desktop-large. Performance: mobile downloads smaller file. Progressive enhancement: fallback for unsupported browsers."},
        {"question": "What prevents content reflow?", "answer": "Aspect-ratio reservation", "alternatives": ["Layout shift prevention"], "explanation": "Aspect-ratio reservation prevents layout shift. CSS: aspect-ratio property or padding-bottom technique. Reserve space: placeholder before content loads. CLS: Core Web Vital (minimize layout shifts). User experience: stable, predictable layout. Important: SEO ranking factor."},
        {"question": "What framework enables responsive layouts?", "answer": "CSS Grid", "alternatives": ["Grid layout"], "explanation": "CSS Grid creates 2D responsive layouts. auto-fit, auto-fill: auto-create columns. minmax(): flexible sizing. Responsive: no media queries needed (often). Complex: powerful for modern layouts. Combines with media queries for fine-tuning."},
        {"question": "What technique provides optimal image sizes?", "answer": "Picture element", "alternatives": ["Responsive pictures"], "explanation": "Picture element provides different images per condition. Syntax: <picture><source media=\"...\"><img></picture>. Scenarios: different aspect ratios, formats, sources. Browser chooses best. Use: art direction (different composition per device)."},
        {"question": "What performance metric affects responsiveness?", "answer": "Cumulative Layout Shift", "alternatives": ["CLS"], "explanation": "Cumulative Layout Shift (CLS) measures layout stability. Unexpected shifts: low score. Prevent: reserve space (aspect-ratio), avoid late-loading. Core Web Vitals: impacts SEO ranking. Responsive design: contributes to good CLS. Monitor: Chrome DevTools."},
        {"question": "What container queries enable?", "answer": "Container queries", "alternatives": ["Conditional styling"], "explanation": "Container queries style based on container size (not viewport). Modern: CSS feature. Benefits: independent component styling, reusability. Syntax: @container (max-width: 400px) { ... }. Future: replaces complex media queries. Browser support: growing."},
        {"question": "What units handle extreme screens?", "answer": "Min/max sizing", "alternatives": ["Clamp function"], "explanation": "Min() and max() functions constrain sizing. clamp(min, preferred, max): scales within range. Example: font-size: clamp(1rem, 5vw, 2rem). Responsive: scales smoothly, no breakpoints. Fluid: no jumps at breakpoints. Modern CSS."},
        {"question": "What prevents mobile-specific issues?", "answer": "Viewport meta tag", "alternatives": ["Mobile configuration"], "explanation": "Viewport meta tag: <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">. Prevents: page zoomed out on mobile. Responsive: essential. Disables: user zoom (avoid). Safe: allow-user-zoom (good practice)."},
        {"question": "What testing ensures mobile usability?", "answer": "Mobile usability testing", "alternatives": ["Mobile testing"], "explanation": "Mobile usability testing: real users on devices. Evaluates: touchability, readability, form inputs. Tools: user testing services, real device testing. Findings: improve mobile experience. Responsive design: starts with user testing."}
    ]
}

ALL_ADDITIONAL_QUESTIONS['responsive_design'] = RESPONSIVE_DESIGN_QUESTIONS

# 35. Web Frameworks
WEB_FRAMEWORKS_QUESTIONS = {
    "easy": [
        {"question": "What abstracts common web development tasks?", "answer": "Web framework", "alternatives": ["Framework"], "explanation": "Web framework provides pre-built components, patterns for common tasks. Examples: Django, Flask, Express, Rails. Benefits: faster development, consistency, security. Handles: routing, database, templating, authentication. Reduces: boilerplate code, repetition. Essential for professional development."},
        {"question": "What maps URLs to functions?", "answer": "Routing", "alternatives": ["URL routing"], "explanation": "Routing maps URLs to handler functions. Example: /users  get_users(). Defines: API endpoints, page navigation. Syntax varies: decorators (@app.route), configuration. Dynamic: /users/:id extracts parameters. Foundation of web apps."},
        {"question": "What handles HTTP requests?", "answer": "Controller", "alternatives": ["Request handler"], "explanation": "Controller processes HTTP requests. Receives: URL, parameters, data. Returns: response (HTML, JSON). MVC pattern: Model (data), View (UI), Controller (logic). Handles: business logic, validation. Connects frontend to backend."},
        {"question": "What stores application data?", "answer": "Model", "alternatives": ["Data model"], "explanation": "Model represents data structure. Examples: User, Product. Defines: properties, relationships, validations. ORM: Object-Relational Mapping translates objects to database. MVC: M in Model-View-Controller. Database queries: often through models."},
        {"question": "What renders response?", "answer": "Template", "alternatives": ["View template"], "explanation": "Template generates response (HTML, JSON). Jinja2 (Python), EJS (JavaScript), ERB (Ruby). Variables: {{ variable }} substitution. Logic: loops, conditionals. MVC: V in Model-View-Controller. Separation: structure from logic (maintainability)."},
        {"question": "What communicates with database?", "answer": "ORM", "alternatives": ["Object-Relational Mapping"], "explanation": "ORM maps objects to database tables. SQLAlchemy (Python), Django ORM, TypeORM (JavaScript). Benefits: write Python, generates SQL. Prevents: SQL injection, repetitive SQL. Abstraction: database-agnostic (easier switching). Productivity boost."},
        {"question": "What validates user input?", "answer": "Validation", "alternatives": ["Input validation"], "explanation": "Validation checks user input conforms to requirements. Types: length, format (email), range, custom rules. Client-side: UX. Server-side: security. Never trust client. Prevents: invalid data, security issues. Returns: errors if invalid."},
        {"question": "What abstracts repeated patterns?", "answer": "Middleware", "alternatives": ["Middleware function"], "explanation": "Middleware processes request before reaching handler. Examples: authentication, logging, CORS. Pipeline: request passes through middleware chain. Each modifies request/response. Common: error handling, compression. Reusable code."},
        {"question": "What returns data in standard format?", "answer": "API endpoint", "alternatives": ["REST endpoint"], "explanation": "API endpoint URL returns data. Methods: GET (read), POST (create), PUT (update), DELETE (remove). Format: JSON commonly. Paths: /api/users, /api/users/:id. Status codes: 200 (success), 404 (not found), 500 (error). Used by: frontend, external apps."},
        {"question": "What prevents unauthorized access?", "answer": "Authentication middleware", "alternatives": ["Auth middleware"], "explanation": "Authentication middleware verifies user identity. Checks: session, token, credentials. Routes: protected by authentication. Typically: login required before access. Patterns: sessions, JWT (JSON Web Tokens). Essential: security control."}
    ],
    "average": [
        {"question": "What provides HTTP abstraction?", "answer": "Request object", "alternatives": ["HTTP request"], "explanation": "Request object abstracts HTTP. Properties: method (GET, POST), params (URL), body (POST data), headers. Simplifies: accessing request data. Methods: get(), post() to respond. Framework: Flask request, Express req."},
        {"question": "What returns HTTP response?", "answer": "Response object", "alternatives": ["HTTP response"], "explanation": "Response object sends HTTP response. Methods: json(), text(), render(), redirect(). Status: response code (200, 404, 500). Headers: Content-Type, cache control. Framework: Flask response, Express res."},
        {"question": "What defines API structure?", "answer": "Schema", "alternatives": ["Data schema"], "explanation": "Schema defines data structure, validation. Example: User schema (name string, email required). JSON Schema: standard format. Validation: enforces requirements. Database: determines table structure. API: client knows expected format."},
        {"question": "What generates SQL automatically?", "answer": "Query builder", "alternatives": ["Database query builder"], "explanation": "Query builder generates SQL from code. Syntax: User.filter(name='John').all(). Prevents: manual SQL, injection. Type-safe: IDE autocomplete. Framework: most provide. Debugging: inspect generated SQL."},
        {"question": "What performs database migrations?", "answer": "Migration tool", "alternatives": ["Database migration"], "explanation": "Migration tool manages database schema changes. Version control: track schema evolution. Forward/backward: upgrade/downgrade. Tools: Alembic (Python), Rails migrations. Records: what changed, when. Production: careful execution needed."},
        {"question": "What caches computation results?", "answer": "Caching layer", "alternatives": ["Cache"], "explanation": "Caching stores expensive computation results. Types: in-memory (Redis), HTTP (browser), database (query cache). Invalidation: clear old cache. Benefits: performance, reduced load. Trade-off: consistency (stale data). Common: caching queries, API responses."},
        {"question": "What handles file uploads?", "answer": "File upload handler", "alternatives": ["File upload"], "explanation": "File upload handler processes uploaded files. Validation: file type, size. Storage: local disk or cloud (S3). Security: validate, scan for malware. Typical: form with file input, POST request. Multipart: form-data encoding."},
        {"question": "What enables cross-origin requests?", "answer": "CORS", "alternatives": ["Cross-Origin Resource Sharing"], "explanation": "CORS allows requests from different origins. Browser blocks by default (same-origin policy). Server: specifies allowed origins. Headers: Access-Control-Allow-Origin. Development: localhost, production: specific domains. Security: prevents unauthorized requests."},
        {"question": "What logs application events?", "answer": "Logging", "alternatives": ["Application logging"], "explanation": "Logging records application events. Levels: DEBUG (detail), INFO (status), WARNING (caution), ERROR (problem). Helps: debugging, monitoring, compliance. Destinations: files, external services (Sentry). Production: critical for troubleshooting."},
        {"question": "What defines job queues?", "answer": "Task queue", "alternatives": ["Background job"], "explanation": "Task queue manages long-running jobs. Examples: send email, process image, analytics. Asynchronous: don't block request. Workers: process jobs independently. Tools: Celery (Python), Bull (Node.js). Benefits: responsiveness, scalability."}
    ],
    "difficult": [
        {"question": "What enables async request handling?", "answer": "Async/await", "alternatives": ["Async middleware"], "explanation": "Async/await handles asynchronous operations. Prevents: callback hell, simplified error handling. Benefits: readable code. Use: database queries, API calls. Framework support: most modern frameworks. Pattern: async def in Python, async/await in JavaScript."},
        {"question": "What enables real-time features?", "answer": "WebSocket", "alternatives": ["WebSocket protocol"], "explanation": "WebSocket enables two-way communication. Persistent: maintains connection. Use: live chat, notifications, collaborative editing. Frameworks: Flask-SocketIO, Socket.io. Superior: HTTP polling for real-time."},
        {"question": "What automatically generates API?", "answer": "API generator", "alternatives": ["GraphQL", "Code generation"], "explanation": "API generator creates endpoints from models. Example: define User model, CRUD endpoints auto-generated. Tools: Django REST Framework, Strapi. Benefits: rapid development, consistency. Disadvantages: less control, may over-generate."},
        {"question": "What manages application configuration?", "answer": "Configuration management", "alternatives": ["Config"], "explanation": "Configuration management handles settings. Environment-specific: development, staging, production. Secrets: API keys (environment variables). Tools: environment files (.env), config libraries. Benefits: security, flexibility. Pattern: 12-factor app."},
        {"question": "What prevents SQL injection?", "answer": "Parameterized queries", "alternatives": ["Prepared statements"], "explanation": "Parameterized queries prevent SQL injection. Syntax: query with placeholders. ORM: uses automatically. Benefits: security, performance (caching). Never: concatenate user input to SQL. Critical: security control."},
        {"question": "What enables database transactions?", "answer": "Transaction support", "alternatives": ["ACID transactions"], "explanation": "Transaction support ensures database consistency. All-or-nothing: all succeed or all fail. Rollback: undo on error. ACID: Atomicity, Consistency, Isolation, Durability. Important: financial transactions, multi-step operations."},
        {"question": "What optimizes database queries?", "answer": "Query optimization", "alternatives": ["Query tuning"], "explanation": "Query optimization improves performance. Techniques: indexes, eager loading (relations), query analysis. Tools: profilers, EXPLAIN plans. Problems: N+1 queries (load data inefficiently). Monitoring: identify slow queries."},
        {"question": "What enables dependency injection?", "answer": "Dependency injection", "alternatives": ["DI", "Inversion of control"], "explanation": "Dependency injection provides dependencies to components. Benefits: testability, loose coupling. Patterns: constructor injection, service locator. Frameworks: many provide built-in DI. Testing: mock dependencies easily."},
        {"question": "What manages API versions?", "answer": "API versioning", "alternatives": ["Version control"], "explanation": "API versioning allows multiple versions. Strategies: URL (/v1/, /v2/), header (Accept version), parameter. Backward compatibility: support old versions. Migration: gradual deprecation. Important: large APIs, long-lived integrations."},
        {"question": "What enables testing?", "answer": "Testing framework", "alternatives": ["Unit testing"], "explanation": "Testing framework enables automated tests. Types: unit (individual functions), integration (components), end-to-end (full flow). Tools: pytest (Python), Jest (JavaScript). Benefits: confidence, regression prevention. Practice: TDD (test-driven development)."}
    ]
}

ALL_ADDITIONAL_QUESTIONS['web_frameworks'] = WEB_FRAMEWORKS_QUESTIONS

# 36. Payment Systems
PAYMENT_SYSTEMS_QUESTIONS = {
    "easy": [
        {"question": "What processes electronic payments?", "answer": "Payment gateway", "alternatives": ["Payment processor"], "explanation": "Payment gateway processes digital payments. Role: securely transmit payment data. Examples: Stripe, PayPal, Square. Benefits: PCI compliance, security. Handles: credit cards, digital wallets. Essential: e-commerce."},
        {"question": "What encrypts sensitive data?", "answer": "Encryption", "alternatives": ["Data encryption"], "explanation": "Encryption converts data to unreadable form. Key: only authorized party can decrypt. Standard: AES-256 (financial). Prevents: eavesdropping. TLS: encrypts HTTP. PCI: requires strong encryption."},
        {"question": "What secures card information?", "answer": "Tokenization", "alternatives": ["Payment tokenization"], "explanation": "Tokenization replaces sensitive data with token. Card: never stored directly. Token: can be reused, lower risk. Provider: generates token. PCI: reduces compliance burden. Security: card data isolated."},
        {"question": "What standard requires payment security?", "answer": "PCI DSS", "alternatives": ["Payment Card Industry Data Security Standard"], "explanation": "PCI DSS: Payment Card Industry Data Security Standard. Requirements: encrypt data, access controls, audits. Compliance: mandatory if processing cards. Non-compliance: fines, termination. Scope: extends to all who touch card data."},
        {"question": "What verifies purchase validity?", "answer": "Authorization", "alternatives": ["Payment authorization"], "explanation": "Authorization verifies payment is valid. Checks: funds available, card valid, not fraud. Response: approved/declined. Amount: held temporarily. Settlement: later transfers funds. Gateway: performs authorization."},
        {"question": "What transfers funds to merchant?", "answer": "Settlement", "alternatives": ["Payment settlement"], "explanation": "Settlement transfers authorized funds. Timing: typically next business day. Batch: multiple transactions grouped. Fees: applied at settlement. Process: authorization then settlement. Net: funds minus processing fees."},
        {"question": "What verifies card holder identity?", "answer": "CVV", "alternatives": ["Card Verification Value"], "explanation": "CVV: Card Verification Value. 3-digit code: back of card (Visa/MC), front of AmEx. Purpose: verify physical possession. Required: payment processors. Never stored: increases security. Single-use: good security practice."},
        {"question": "What confirms payment completed?", "answer": "Confirmation", "alternatives": ["Payment confirmation"], "explanation": "Confirmation acknowledges payment completed. Methods: email, SMS, in-app. Includes: order ID, amount, time. Customer: has receipt. Merchant: documented transaction. Important: reduces disputes."},
        {"question": "What allows recurring charges?", "answer": "Recurring billing", "alternatives": ["Subscription charging"], "explanation": "Recurring billing charges customer periodically. Examples: subscriptions, membership fees. Frequency: daily, weekly, monthly, yearly. Consent: required upfront. Cancellation: customer must allow. Storage: secure token use."},
        {"question": "What identifies payment failure?", "answer": "Decline code", "alternatives": ["Rejection code"], "explanation": "Decline code indicates failure reason. Types: insufficient funds, expired card, fraud flag. Helpful: customer knows why failed. Communication: provide to user. Retry: may work if temporary issue."}
    ],
    "average": [
        {"question": "What reduces payment failure?", "answer": "3D Secure", "alternatives": ["3DS authentication"], "explanation": "3D Secure adds authentication layer. Cardholder: enters password or OTP. Additional security: reduces fraud liability. Implementation: redirects to bank. User experience: additional step. Adoption: increasing for high-value transactions."},
        {"question": "What processes digital wallets?", "answer": "Digital wallet integration", "alternatives": ["Mobile wallet"], "explanation": "Digital wallet stores payment methods. Examples: Apple Pay, Google Pay, PayPal. Benefits: quick checkout, security. Token: card securely stored. NFC: contactless payment. E-commerce: reduces friction."},
        {"question": "What handles payment webhooks?", "answer": "Webhook listener", "alternatives": ["Event listener"], "explanation": "Webhook listener receives payment events. Events: payment completed, failed, refunded. Updates: database, notifications. Important: verify webhook authenticity. Retry: webhooks may retry on failure. Implementation: required for async operations."},
        {"question": "What prevents duplicate charges?", "answer": "Idempotency key", "alternatives": ["Idempotency"], "explanation": "Idempotency key prevents duplicate processing. Submission: same key with retry = same result. Implementation: payment gateway requirement. Benefits: safety, customer experience. Essential: network failures common."},
        {"question": "What handles payment disputes?", "answer": "Chargeback", "alternatives": ["Payment dispute"], "explanation": "Chargeback: customer disputes charge. Process: initiated by bank, merchant can appeal. Evidence: shipping confirmation, delivery proof. Costs: high fees for merchant. Prevention: clear transactions, good customer service. Tracking: critical."},
        {"question": "What applies transaction fees?", "answer": "Fee calculation", "alternatives": ["Transaction fee"], "explanation": "Fee calculation determines costs. Components: gateway fee (%), interchange fee, assessment fee. Varies: by card type, amount. Merchant: pays fees. Gross vs net: include/exclude fees. Rate negotiation: possible at volume."},
        {"question": "What validates payment data?", "answer": "Validation rules", "alternatives": ["Input validation"], "explanation": "Validation rules check payment data format. Card number: 13-19 digits, checksum (Luhn). Expiry: future date, format MM/YY. CVV: 3-4 digits. Prevents: invalid submissions. Client-side: better UX, server-side: security."},
        {"question": "What manages payment methods?", "answer": "Vault", "alternatives": ["Payment vault"], "explanation": "Vault securely stores payment methods. Tokens: generated, not original data. Reuse: quick checkout. PCI: compliance simplified. Deletion: customer request honored. Encryption: multiple layers."},
        {"question": "What refunds payments?", "answer": "Refund", "alternatives": ["Payment refund"], "explanation": "Refund reverses transaction. Full: entire amount returned. Partial: percentage returned. Timeline: varies by processor (1-5 business days). Reason: customer returns, cancellation. Tracking: important for accounting."},
        {"question": "What detects fraudulent transactions?", "answer": "Fraud detection", "alternatives": ["Fraud prevention"], "explanation": "Fraud detection identifies suspicious transactions. Rules: amount threshold, geographic mismatch, velocity. Machine learning: patterns learned. 3D Secure: additional verification. False positives: valid transactions blocked."}
    ],
    "difficult": [
        {"question": "What architecture scales payments?", "answer": "Distributed payment system", "alternatives": ["Scalable architecture"], "explanation": "Distributed payment system handles high volume. Load balancing: spread across servers. Queuing: handle spikes. Redundancy: failover protection. Database: sharding, replication. Monitoring: detect issues early. Example: Stripe infrastructure."},
        {"question": "What calculates exact settlement?", "answer": "Settlement algorithm", "alternatives": ["Settlement reconciliation"], "explanation": "Settlement algorithm reconciles transactions. Matching: authorizations to settled amounts. Fees: calculated, deducted. Disputes: adjustments applied. Reporting: detailed breakdown. Accuracy: critical for accounting. Automation: reduces manual work."},
        {"question": "What prevents payment fraud?", "answer": "Advanced fraud prevention", "alternatives": ["Machine learning fraud detection"], "explanation": "Advanced fraud prevention uses ML, rule engines. Features: transaction history, geography, device, behavior. Scoring: risk assessment. Real-time: decisions instant. Training: continuously improved. False positives: minimize friction."},
        {"question": "What handles payment compliance?", "answer": "Compliance framework", "alternatives": ["Regulatory compliance"], "explanation": "Compliance framework ensures regulatory adherence. PCI DSS: card security. AML: anti-money laundering checks. KYC: know your customer. Regional: GDPR, CCPA requirements. Audits: regular verification. Documentation: essential."},
        {"question": "What ensures payment reliability?", "answer": "Fault tolerance", "alternatives": ["Payment reliability"], "explanation": "Fault tolerance maintains operation despite failures. Redundancy: multiple payment processors. Circuit breaker: failover on timeout. Retry logic: automatic recovery. Monitoring: detect issues. RPO/RTO: minimize data loss, downtime."},
        {"question": "What secures API keys?", "answer": "Key management", "alternatives": ["Secret management"], "explanation": "Key management handles API credentials. Rotation: periodic updates. Storage: never hardcoded, use environment. Access control: least privilege. Encryption: at rest, in transit. Monitoring: usage tracked. Vault: centralized storage."},
        {"question": "What optimizes payment data?", "answer": "Payment tokenization strategy", "alternatives": ["Data optimization"], "explanation": "Tokenization strategy reduces PCI scope. First-party tokens: issued by processor. Network tokenization: card network replaces. Benefits: lower compliance, better UX. Implementation: processor-specific. Fallback: legacy support."},
        {"question": "What balances payment security and UX?", "answer": "Risk-based authentication", "alternatives": ["Dynamic authentication"], "explanation": "Risk-based auth adapts to risk level. Low risk: no friction. High risk: additional verification (3DS). Evaluation: multiple factors. Machine learning: score transaction. Balance: security vs convenience. Outcome: better conversion."},
        {"question": "What handles payment reconciliation?", "answer": "Reconciliation engine", "alternatives": ["Transaction reconciliation"], "explanation": "Reconciliation engine matches transactions. Sources: payment gateway, bank, merchant system. Discrepancies: identified, investigated. Automation: most reconciliation handled. Reporting: discrepancies escalated. Manual: edge cases reviewed."},
        {"question": "What provides payment transparency?", "answer": "Payment analytics", "alternatives": ["Transaction analytics"], "explanation": "Payment analytics provides visibility. Metrics: volume, value, success rate, chargebacks. Trends: seasonality, growth. Funnel: identify drop-off. Drilling: detailed investigation. Dashboards: real-time data. Actions: optimization based on insights."}
    ]
}

ALL_ADDITIONAL_QUESTIONS['payment_systems'] = PAYMENT_SYSTEMS_QUESTIONS

# 37. SEO (Search Engine Optimization)
SEO_QUESTIONS = {
    "easy": [
        {"question": "What improves search ranking?", "answer": "SEO", "alternatives": ["Search Engine Optimization"], "explanation": "SEO improves visibility on search engines. Goal: higher ranking on search results. Methods: keywords, content, links. Benefits: organic traffic, credibility. Free: no paid ads. Long-term: sustained visibility."},
        {"question": "What words do users search?", "answer": "Keywords", "alternatives": ["Search keywords"], "explanation": "Keywords are words users search. Research: identify relevant, popular keywords. Content: incorporate naturally. Density: balance needed. Long-tail: specific, less competition. Examples: 'Python tutorial', 'web design tips'."},
        {"question": "What appears in search results?", "answer": "Meta title", "alternatives": ["Page title"], "explanation": "Meta title appears in search results. Character limit: 50-60 for optimal display. Content: brand + keyword. Importance: affects click-through rate. HTML: <title> tag. First impressions: critical for traffic."},
        {"question": "What describes page content?", "answer": "Meta description", "alternatives": ["Page description"], "explanation": "Meta description summarizes page. Length: 150-160 characters. Display: search results below title. Writing: compelling, calls action. CTR: good description increases clicks. Not ranking factor: but affects traffic."},
        {"question": "What indicates page importance?", "answer": "Heading hierarchy", "alternatives": ["H1, H2, H3 tags"], "explanation": "Heading hierarchy organizes content. H1: main topic (one per page). H2/H3: subtopics. Benefits: readability, SEO. Search engines: understand content structure. Users: quick scanning. Semantic: improves accessibility."},
        {"question": "What connects pages together?", "answer": "Internal links", "alternatives": ["Links within site"], "explanation": "Internal links connect pages. Benefits: navigation, authority distribution. Anchor text: descriptive text improves SEO. Crawlability: helps search engines discover pages. Strategy: link relevant pages. Network: creates content structure."},
        {"question": "What do other sites point to?", "answer": "Backlinks", "alternatives": ["External links"], "explanation": "Backlinks are links from other sites. Authority: high-quality backlinks boost ranking. Quality: matters more than quantity. Sources: relevant sites better. Acquisition: content marketing, outreach. Monitoring: track with tools."},
        {"question": "What's the most important tag?", "answer": "H1", "alternatives": ["Main heading"], "explanation": "H1 is main page heading. Importance: should match or relate to meta title. One per page: convention. Content: include primary keyword. Users: bold heading signals importance. Accessibility: screen readers use structure."},
        {"question": "What measures search visibility?", "answer": "Search rankings", "alternatives": ["SERP position"], "explanation": "Search rankings show position in results. Importance: top 3 = high traffic. Tracking: monitor keyword positions. Variations: by location, device, user. Reports: weekly/monthly reviews. Tools: Google Search Console, SEO software."},
        {"question": "What's the URL structure impact?", "answer": "URL slugs", "alternatives": ["URL path"], "explanation": "URL slugs affect SEO. Best practice: descriptive, keyword-rich. Example: /python-tutorial not /post?id=123. Hyphens: separate words. Length: shorter better. Permanence: avoid changes. Readability: for users and engines."}
    ],
    "average": [
        {"question": "What technical foundation helps SEO?", "answer": "Technical SEO", "alternatives": ["Site structure"], "explanation": "Technical SEO ensures crawlability. Elements: site speed, mobile-friendly, XML sitemap, robots.txt. Core Web Vitals: loading, interactivity, stability. Errors: broken links, redirects. Tools: Google Search Console. Foundation: prerequisite for success."},
        {"question": "What XML file helps search engines?", "answer": "Sitemap", "alternatives": ["XML sitemap"], "explanation": "Sitemap lists all URLs. Format: XML, submitted to search engines. Helps: discovery, crawling priority. Large sites: especially important. Updates: when content changes. Submission: Search Console. Alternative: RSS feeds."},
        {"question": "What controls crawler access?", "answer": "Robots.txt", "alternatives": ["Robots file"], "explanation": "Robots.txt controls search crawler access. Format: text file, root directory. Instructions: allow/disallow paths. Private content: block from indexing. Performance: prevent crawling non-important pages. Accessibility: optional, not foolproof."},
        {"question": "What prevents duplicate content?", "answer": "Canonical tag", "alternatives": ["rel=canonical"], "explanation": "Canonical tag indicates preferred URL. Purpose: prevent duplicate content penalties. Use cases: www vs non-www, parameters, versions. HTML: <link rel='canonical' href='...'> in head. Search engines: follow canonical link. Consolidation: passes authority."},
        {"question": "What improves page speed?", "answer": "Performance optimization", "alternatives": ["Page speed"], "explanation": "Performance optimization increases loading speed. Techniques: image compression, caching, minification, CDN. Core Web Vitals: ranking factor. Tools: Google PageSpeed Insights, Lighthouse. Users: abandon slow sites. Conversion: speed impacts sales."},
        {"question": "What adapts to mobile?", "answer": "Mobile-first indexing", "alternatives": ["Mobile optimization"], "explanation": "Mobile-first indexing: Google crawls mobile version first. Requirements: responsive design, fast loading, readable fonts. Mobile: majority of users. Responsive: adapts to screen size. Testing: Google Mobile-Friendly Test. Importance: ranking factor."},
        {"question": "What expands content reach?", "answer": "Long-form content", "alternatives": ["Comprehensive content"], "explanation": "Long-form content ranks better. Length: 2000+ words covers topic thoroughly. Depth: valuable information, authority. User intent: satisfies searcher needs. Engagement: time on page increases. Updates: stays relevant longer. Strategy: quality over quantity."},
        {"question": "What helps featured snippets?", "answer": "Structured data", "alternatives": ["Schema markup"], "explanation": "Structured data marks up content. Format: JSON-LD, microdata. Schema types: Person, Product, Article, Recipe. Benefits: rich snippets, featured snippets, voice search. Implementation: tags provide context. Validation: use schema.org validation."},
        {"question": "What shares social proof?", "answer": "Social signals", "alternatives": ["Social sharing"], "explanation": "Social signals indicate content quality. Metrics: shares, likes, comments. Impact: unclear direct ranking factor, but indicates authority. Reach: expands audience. Engagement: users share good content. Strategy: shareable content. Correlation: good content ranks."},
        {"question": "What tracks performance?", "answer": "SEO analytics", "alternatives": ["Search Console"], "explanation": "SEO analytics track results. Metrics: rankings, traffic, CTR, impressions. Tools: Google Search Console, Google Analytics. Reports: identify trends, issues. Optimization: data-driven decisions. Monitoring: regular review. Goals: increase organic traffic."}
    ],
    "difficult": [
        {"question": "What algorithm rewards content quality?", "answer": "E-A-T", "alternatives": ["Expertise, Authoritativeness, Trustworthiness"], "explanation": "E-A-T: Expertise, Authoritativeness, Trustworthiness. Core concept: Google prioritizes quality sources. Author credentials: important, especially YMYL. Links: from authority sources. Reputation: build trust. YMYL: critical for health, finance, legal. Evaluation: manual reviewers assess."},
        {"question": "What is page optimization depth?", "answer": "On-page SEO optimization", "alternatives": ["Page optimization"], "explanation": "On-page optimization includes all controllable factors. Elements: keywords, meta tags, structure, content quality, internal links, UX. Density: avoid keyword stuffing. Natural: read for humans first. Comprehensive: covers all aspects. Implementation: systematic approach. Improvements: measurable impact."},
        {"question": "What is link quality assessment?", "answer": "Link profile analysis", "alternatives": ["Backlink evaluation"], "explanation": "Link profile analysis evaluates backlinks. Quality metrics: domain authority, relevance, anchor text. Toxic links: can harm. Audit: identify bad links, disavow if needed. Diversity: from varied sources better. Natural: pattern assessment. Tools: Ahrefs, SEMrush, Moz. Strategy: focus on quality."},
        {"question": "What predicts ranking potential?", "answer": "Competitive analysis", "alternatives": ["SERP analysis"], "explanation": "Competitive analysis studies ranking pages. Factors: content length, backlinks, structure. Opportunities: identify gaps. Benchmarking: compare against leaders. Analysis: understand what ranks. Strategy: inform content creation. Tools: SEMrush, Ahrefs. Insight: achieve top rankings."},
        {"question": "What improves user experience signals?", "answer": "UX optimization", "alternatives": ["User experience"], "explanation": "UX optimization improves engagement. Metrics: bounce rate, time on page, CTR. Design: intuitive navigation, readable. Speed: fast loading, responsiveness. Accessibility: inclusive design. Heat maps: user behavior visualization. Improvements: increase rankings indirectly. Core Web Vitals: ranking factor."},
        {"question": "What ensures content freshness?", "answer": "Content update strategy", "alternatives": ["Content refresh"], "explanation": "Content update strategy keeps content current. Updates: add new info, fix errors, improve quality. Freshness: ranking factor, especially news. Archive: dates important. Outdated: may drop rankings. Maintenance: ongoing commitment. Evergreen: still relevant, periodic updates. Signals: Google notices updates."},
        {"question": "What develops topical authority?", "answer": "Topic clustering", "alternatives": ["Pillar content"], "explanation": "Topic clustering builds topical authority. Pillar: comprehensive main article (2000+ words). Clusters: related subtopic articles. Internal linking: connects pillar to clusters. Authority: search engines recognize expertise. Ranking: pillar articles rank well. Strategy: topic silos. Coverage: comprehensive topic handling."},
        {"question": "What accelerates crawl efficiency?", "answer": "Crawl budget optimization", "alternatives": ["Crawl efficiency"], "explanation": "Crawl budget optimization maximizes indexing. Concept: limited resources for crawling. Priority: important pages. Efficiency: robots.txt, sitemap. Reduce: errors, duplicates, parameters. Monitor: Search Console. Large sites: especially important. Goal: all content indexed."},
        {"question": "What leverages voice search optimization?", "answer": "Voice search SEO", "alternatives": ["Voice optimization"], "explanation": "Voice search SEO targets voice queries. Characteristics: conversational, long-tail, questions. Optimization: FAQ schema, natural language. Featured snippets: crucial for voice. Local: 'near me' queries. Intent: answer questions directly. Growth: voice searches increasing. Preparation: emerging channel."},
        {"question": "What builds sustainable rankings?", "answer": "Holistic SEO strategy", "alternatives": ["Complete SEO approach"], "explanation": "Holistic SEO strategy combines all factors. Components: technical, content, off-page. Balance: no single magic bullet. Long-term: sustainable growth. White-hat: ethical practices. Monitoring: track metrics. Adaptation: algorithm changes. Expertise: complex, requires knowledge. ROI: proven long-term value."}
    ]
}

ALL_ADDITIONAL_QUESTIONS['seo'] = SEO_QUESTIONS

# 38. Digital Marketing
DIGITAL_MARKETING_QUESTIONS = {
    "easy": [
        {"question": "What reaches customers online?", "answer": "Digital marketing", "alternatives": ["Online marketing"], "explanation": "Digital marketing reaches customers via online channels. Channels: social media, email, search, websites. Benefits: measurable, targeted, cost-effective. Scale: global reach. Personalization: data-driven targeting. Integration: multiple channels combined."},
        {"question": "What posts on social platforms?", "answer": "Social media marketing", "alternatives": ["Social marketing"], "explanation": "Social media marketing builds brand presence. Platforms: Facebook, Instagram, Twitter, LinkedIn, TikTok. Content: posts, videos, stories. Engagement: likes, comments, shares. Community: builds relationships. Organic: free, paid: sponsored posts."},
        {"question": "What sends messages to audiences?", "answer": "Email marketing", "alternatives": ["Email campaigns"], "explanation": "Email marketing sends direct messages. Lists: customer email addresses. Content: promotions, newsletters, updates. Automation: triggered messages. Segmentation: targeted groups. Metrics: open rate, click rate. Cost: low per recipient."},
        {"question": "What appears in search ads?", "answer": "Search advertising", "alternatives": ["PPC", "Pay-per-click"], "explanation": "Search advertising shows ads on Google/Bing. Model: PPC (pay per click). Bidding: compete for keywords. Targeting: relevant keywords drive traffic. Reach: high intent users. ROI: measurable. Budget: complete control."},
        {"question": "What targets users online?", "answer": "Retargeting", "alternatives": ["Remarketing"], "explanation": "Retargeting shows ads to past visitors. Cookies: track user behavior. Goal: bring back interested users. Effectiveness: higher conversion than new users. Platforms: Google, Facebook, programmatic. Frequency: limit to avoid annoyance."},
        {"question": "What measures campaign performance?", "answer": "Analytics", "alternatives": ["Web analytics"], "explanation": "Analytics track campaign data. Metrics: views, clicks, conversions, revenue. Tools: Google Analytics, UTM parameters. Reports: analyze traffic, behavior. Insights: data-driven decisions. Optimization: identify winners, reduce losers. ROI: calculate return."},
        {"question": "What tracks specific goals?", "answer": "Conversions", "alternatives": ["Goal tracking"], "explanation": "Conversions track desired actions. Examples: purchase, signup, download, form. Tracking: pixels, codes. Value: assign to each conversion. Funnels: analyze path to conversion. Attribution: credit touchpoints. Optimization: increase conversion rate."},
        {"question": "What represents target market?", "answer": "Buyer persona", "alternatives": ["Customer persona"], "explanation": "Buyer persona describes ideal customer. Elements: demographics, goals, pain points, behavior. Creation: research, interviews, data. Usage: guide content, targeting. Benefits: focused marketing, higher relevance. Multiple: different products may have different personas."},
        {"question": "What's the ultimate goal?", "answer": "ROI", "alternatives": ["Return on investment"], "explanation": "ROI measures investment return. Formula: (revenue - cost) / cost. Importance: proves marketing value. Tracking: match attribution to revenue. Optimization: increase ROI over time. Benchmarks: compare against industry. Business justification: required metrics."},
        {"question": "What improves message relevance?", "answer": "Personalization", "alternatives": ["Targeted messaging"], "explanation": "Personalization tailors messages to individuals. Methods: name usage, past behavior, preferences. Benefits: higher engagement, conversion. Data: customer behavior, demographics. Automation: dynamic content. Privacy: respect data regulations."}
    ],
    "average": [
        {"question": "What measures success?", "answer": "KPI", "alternatives": ["Key Performance Indicator"], "explanation": "KPI measures goal achievement. Examples: CTR, conversion rate, CAC, LTV. Setting: align with business goals. Tracking: regular measurement. Targets: specific, achievable numbers. Reporting: monitor trends. Optimization: adjust strategy based on KPIs."},
        {"question": "What combines multiple channels?", "answer": "Omnichannel marketing", "alternatives": ["Multi-channel strategy"], "explanation": "Omnichannel coordinates all channels. Integration: seamless customer experience. Consistency: messaging across channels. Data: unified view of customer. Tools: marketing automation. Reach: meet customers where they are. Effectiveness: better results than single channel."},
        {"question": "What creates content value?", "answer": "Content marketing", "alternatives": ["Content strategy"], "explanation": "Content marketing provides valuable information. Types: blogs, videos, ebooks, webinars, infographics. Benefits: builds authority, trust, attracts organic traffic. SEO: improves rankings. Leads: nurtures prospects. Distribution: across channels. Measurement: tracks engagement, shares."},
        {"question": "What delivers timely messages?", "answer": "Marketing automation", "alternatives": ["Workflow automation"], "explanation": "Marketing automation triggers targeted messages. Triggers: user actions, dates, behaviors. Benefits: timely, relevant, scalable. Examples: welcome series, abandoned cart, birthday offers. Tools: Marketo, HubSpot, Mailchimp. Leads: nurtures automatically. Efficiency: saves time, increases ROI."},
        {"question": "What identifies new opportunities?", "answer": "Market research", "alternatives": ["Customer research"], "explanation": "Market research identifies trends, opportunities. Methods: surveys, interviews, focus groups, data analysis. Competitors: understand positioning. Audience: know needs, preferences. Trends: stay ahead. Insights: inform strategy. Investment: critical for success."},
        {"question": "What determines success metrics?", "answer": "Attribution model", "alternatives": ["Multi-touch attribution"], "explanation": "Attribution model credits touchpoints. Models: first-click, last-click, linear, time-decay. Importance: understand channel contribution. Tracking: pixels, cookies, UTM parameters. Challenges: cross-device, offline. Tools: Google Analytics. Optimization: allocate budget wisely."},
        {"question": "What compares alternatives?", "answer": "A/B testing", "alternatives": ["Split testing"], "explanation": "A/B testing compares two versions. Elements: headlines, CTAs, images, layouts. Statistical: significant differences identified. Results: data-driven decisions. Benefits: incremental improvements, better ROI. Continuous: ongoing optimization. Implementation: one change at a time."},
        {"question": "What predicts future behavior?", "answer": "Predictive analytics", "alternatives": ["Forecasting"], "explanation": "Predictive analytics forecasts outcomes. Models: machine learning, algorithms. Uses: churn prediction, CLV estimation, next purchase. Benefits: proactive decisions, efficiency. Data: historical patterns. Accuracy: improves with data. Implementation: requires expertise."},
        {"question": "What segment audience?", "answer": "Customer segmentation", "alternatives": ["Market segmentation"], "explanation": "Segmentation divides audience into groups. Bases: demographics, behavior, psychographics, geography. Benefits: targeted messaging, better ROI. Personalization: enables tailoring. Precision: address specific needs. Tools: CRM systems, analytics."},
        {"question": "What value do customers provide?", "answer": "Customer lifetime value", "alternatives": ["LTV", "CLV"], "explanation": "CLV projects total profit from customer. Formula: average transaction  frequency - acquisition cost. Importance: guides acquisition budget. Retention: focus on high-value customers. Optimization: increase frequency, transaction value. Prediction: forecasts future revenue."}
    ],
    "difficult": [
        {"question": "What drives sustainable growth?", "answer": "Growth hacking", "alternatives": ["Viral growth"], "explanation": "Growth hacking combines creativity, analytics, tech. Focus: rapid experimentation across channels. Techniques: referrals, network effects, viral loops, landing pages. Mindset: resourceful, data-driven, agile. Success: requires understanding metrics. Scalability: proven tactics scale. Examples: Dropbox, Airbnb early growth."},
        {"question": "What optimizes customer journey?", "answer": "Customer journey mapping", "alternatives": ["Journey optimization"], "explanation": "Customer journey mapping visualizes touchpoints. Stages: awareness, consideration, decision, retention, advocacy. Touchpoints: email, ads, content, sales calls. Pain points: identify issues, solutions. Optimization: improve experience at each stage. Tools: visualization software. Goal: increase conversion, retention."},
        {"question": "What predicts customer behavior?", "answer": "Behavioral targeting", "alternatives": ["Behavior-based marketing"], "explanation": "Behavioral targeting uses past behavior. Data: browsing, purchases, clicks, time on page. Personalization: show relevant products. Platforms: Google, Facebook, programmatic. Privacy: regulations (GDPR, CCPA) limit tracking. Alternatives: contextual targeting, first-party data. Effectiveness: higher conversion."},
        {"question": "What allocates marketing budget?", "answer": "Marketing mix modeling", "alternatives": ["Attribution budgeting"], "explanation": "Marketing mix modeling optimizes budget allocation. Model: statistical analysis of channel contribution. Variables: spend levels, seasonality, competitive activity. Optimization: maximize ROI across channels. Tools: analytics software, econometric models. Complexity: requires data science. Results: data-driven allocation."},
        {"question": "What builds customer loyalty?", "answer": "Loyalty program", "alternatives": ["Rewards program"], "explanation": "Loyalty program rewards repeat customers. Mechanics: points, tiers, exclusive benefits. Retention: increases customer lifetime value. Engagement: encourages purchases, advocacy. Data: collects customer information. Examples: Starbucks Rewards, Amazon Prime. Design: create value proposition. Challenges: cost, design complexity."},
        {"question": "What monetizes audiences?", "answer": "Monetization strategy", "alternatives": ["Revenue model"], "explanation": "Monetization strategy converts audience to revenue. Models: ads, subscriptions, freemium, affiliate, licensing. Timing: when audience ready. Balance: user experience vs revenue. Testing: experiment with models. Optimization: maximize revenue per user. Challenges: cannibalization, user experience."},
        {"question": "What shapes market perception?", "answer": "Brand positioning", "alternatives": ["Brand strategy"], "explanation": "Brand positioning defines market place. Differentiation: vs competitors. Value proposition: why choose us. Messaging: consistent across channels. Experience: every touchpoint. Perception: influenced by marketing. Strategy: inform all marketing. Challenges: crowded markets, changing preferences."},
        {"question": "What wins new customers?", "answer": "Acquisition strategy", "alternatives": ["Customer acquisition"], "explanation": "Acquisition strategy attracts new customers. Channels: ads, organic, referrals, partnerships. CAC: cost per acquisition target. ROI: payback period analysis. Efficiency: optimize conversion funnel. Scaling: increase profitable channels. Challenges: increasing costs, decreasing effectiveness. Lifetime value: ensures profitability."},
        {"question": "What maximizes conversion rates?", "answer": "Conversion rate optimization", "alternatives": ["CRO"], "explanation": "CRO improves percentage converting. Techniques: UX testing, personalization, social proof, urgency. Analytics: identify friction points. Testing: A/B tests, multivariate. Continuous: ongoing optimization. Tools: heat maps, session recordings. Incremental: compound improvements. ROI: highest per marketing pound."},
        {"question": "What drives long-term success?", "answer": "Customer retention strategy", "alternatives": ["Retention marketing"], "explanation": "Retention strategy keeps customers. Cost: cheaper than acquisition. Lifetime value: significantly higher. Techniques: email, loyalty programs, personalization, support. Metrics: churn rate, repeat purchase rate. Satisfaction: reduces churn. Advocacy: retained customers refer. Focus: strategic advantage."}
    ]
}

ALL_ADDITIONAL_QUESTIONS['digital_marketing'] = DIGITAL_MARKETING_QUESTIONS

# 39. E-commerce Platforms
ECOMMERCE_PLATFORMS_QUESTIONS = {
    "easy": [
        {"question": "What powers online stores?", "answer": "E-commerce platform", "alternatives": ["Online store"], "explanation": "E-commerce platform enables online sales. Features: product catalog, cart, checkout, payments. Examples: Shopify, WooCommerce, Magento. Benefits: easy setup, scalable, maintenance. No code: many platforms user-friendly. Business: complete online presence."},
        {"question": "What displays products?", "answer": "Product catalog", "alternatives": ["Inventory"], "explanation": "Product catalog lists available items. Elements: images, descriptions, prices, stock. Organization: categories, tags, search. Management: add, edit, delete products. Visibility: affects browsing, sales. Updates: keep current inventory. Quantity: affects user experience."},
        {"question": "What collects user orders?", "answer": "Shopping cart", "alternatives": ["Basket"], "explanation": "Shopping cart stores items before purchase. Features: add/remove items, quantity adjustment, totals. Persistence: save across sessions. Abandonment: may lose sales. Optimization: reduce friction. Conversion: critical touchpoint. Mobile: cart optimization important."},
        {"question": "What processes payments?", "answer": "Checkout process", "alternatives": ["Payment page"], "explanation": "Checkout process completes purchase. Steps: review cart, shipping, payment. Security: HTTPS, encryption. Optimization: minimize steps, form fields. Mobile: responsive design. Guests: allow without account. Upsell: suggest related items. Abandonment: reduce friction."},
        {"question": "What tracks inventory?", "answer": "Inventory management", "alternatives": ["Stock control"], "explanation": "Inventory management tracks stock levels. Features: quantity, locations, reorder points. Alerts: low stock warnings. Integration: updates automatically. Suppliers: reorder when needed. Accurate: prevents overselling. Real-time: shows availability to customers."},
        {"question": "What fulfills orders?", "answer": "Order fulfillment", "alternatives": ["Shipping"], "explanation": "Order fulfillment picks, packs, ships orders. Process: receive order, pick items, pack, label, ship. Tracking: provide customer updates. Automation: warehouse systems. Mistakes: minimize errors. Time: fulfill quickly. Cost: optimize shipping expenses. Integration: third-party logistics."},
        {"question": "What protects transactions?", "answer": "SSL certificate", "alternatives": ["HTTPS encryption"], "explanation": "SSL certificate encrypts data. Protocol: HTTPS secures information. URL: shows padlock icon, builds trust. Required: PCI compliance. Cost: free options available. Installation: platform handles. Renewal: automatic or manual. Standard: essential for any store."},
        {"question": "What extends functionality?", "answer": "Apps", "alternatives": ["Extensions", "Plugins"], "explanation": "Apps extend platform functionality. Types: marketing, analytics, shipping, payments. Examples: email, reviews, social media. Installation: simple clicks. Cost: free to premium. Customization: adapt to needs. Ecosystem: large app stores. Compatibility: check before installing."},
        {"question": "What customizes appearance?", "answer": "Themes", "alternatives": ["Templates"], "explanation": "Themes control store appearance. Design: professional, responsive. Customization: colors, layouts, fonts. Mobile: responsive themes essential. Gallery: browse available themes. Branding: reflect company identity. Performance: quality themes optimized. Selection: find best fit."},
        {"question": "What analyzes sales?", "answer": "Analytics", "alternatives": ["Reporting"], "explanation": "Analytics track sales, traffic, behavior. Metrics: revenue, orders, conversion rate, average order value. Reports: daily, monthly trends. Insights: identify top products. Decisions: data-driven actions. Integration: Google Analytics, platform analytics. Goals: measure success."}
    ],
    "average": [
        {"question": "What automatically updates prices?", "answer": "Pricing rules", "alternatives": ["Dynamic pricing"], "explanation": "Pricing rules set automated pricing. Rules: bulk discounts, seasonal, customer-based. Automation: apply without manual update. A/B test: compare prices. Psychology: use anchoring, scarcity. Optimization: maximize revenue. Testing: find optimal price point."},
        {"question": "What attracts customers?", "answer": "SEO optimization", "alternatives": ["Search optimization"], "explanation": "SEO optimization improves visibility. Elements: keywords, meta tags, site speed, mobile. Content: descriptions, blogs. Links: internal, external. Google: better ranking. Traffic: organic visitors. Sales: conversions from search. Foundation: critical for success."},
        {"question": "What stores customer data?", "answer": "Customer management", "alternatives": ["CRM"], "explanation": "Customer management tracks customer information. Data: name, email, purchase history, preferences. Segmentation: group similar customers. Personalization: targeted marketing. Retention: increase lifetime value. Privacy: secure data. GDPR: comply with regulations."},
        {"question": "What suggests related items?", "answer": "Product recommendations", "alternatives": ["Cross-sell"], "explanation": "Product recommendations suggest items. Techniques: recently viewed, best sellers, similar products. AI: machine learning algorithms. Benefits: increase average order value, discovery. Placement: checkout, product page. Personalization: based on behavior. Revenue: significant impact."},
        {"question": "What gives customer feedback?", "answer": "Reviews and ratings", "alternatives": ["Testimonials"], "explanation": "Reviews provide social proof. Impact: influence purchase decisions. Features: star ratings, written reviews. Verification: purchased customers only. Response: engage with feedback. Management: flag inappropriate content. Trust: builds credibility. Display: product pages, email."},
        {"question": "What speeds up checkout?", "answer": "Express checkout", "alternatives": ["One-click"], "explanation": "Express checkout reduces steps. Methods: PayPal One Click, Apple Pay, Google Pay. Benefits: faster, better mobile experience. Conversion: reduces cart abandonment. Saved info: speeds up process. Security: tokenization. Implementation: most platforms support."},
        {"question": "What communicates with customers?", "answer": "Email marketing", "alternatives": ["Transactional email"], "explanation": "Email marketing engages customers. Types: promotional, transactional (orders), newsletters. Automation: triggered emails. Segmentation: targeted lists. Personalization: use data. Compliance: unsubscribe option. Metrics: open rate, click rate. Revenue: significant ROI."},
        {"question": "What handles promotions?", "answer": "Discount codes", "alternatives": ["Coupon codes"], "explanation": "Discount codes incentivize purchases. Types: percentage, fixed amount, buy-one-get-one. Customization: apply to specific products, customer groups. Tracking: measure code effectiveness. Limits: quantity, expiration. Strategy: drive traffic, clear inventory. Revenue: balance with profitability."},
        {"question": "What integrates payment methods?", "answer": "Payment gateway integration", "alternatives": ["Payment processing"], "explanation": "Payment gateway processes transactions. Methods: credit cards, digital wallets, bank transfers. Examples: Stripe, PayPal, Square. Security: PCI compliance. Fees: per transaction. Settlement: funds transferred. Multiple: support various methods. Redundancy: backup provider helps."},
        {"question": "What competes online?", "answer": "Competitive analysis", "alternatives": ["Market research"], "explanation": "Competitive analysis studies competitors. Areas: pricing, products, marketing, reviews. Tools: spy tools, analytics. Opportunities: identify gaps. Positioning: differentiate. Benchmarks: compare metrics. Strategy: inform decisions. Continuous: ongoing monitoring."}
    ],
    "difficult": [
        {"question": "What scales to high volume?", "answer": "Scalability infrastructure", "alternatives": ["Cloud hosting"], "explanation": "Scalability infrastructure handles growth. Challenges: increased traffic, transactions, data. Solutions: load balancing, CDN, database optimization. Cloud: scales automatically. Monitoring: detect issues. Performance: maintain speed. Redundancy: prevent downtime. Cost: balance with budget."},
        {"question": "What ensures data protection?", "answer": "Security protocols", "alternatives": ["Data security"], "explanation": "Security protocols protect customer data. Measures: encryption, firewalls, access control, audits. Compliance: PCI DSS, GDPR, CCPA. Backups: regular, tested. Incident response: plan for breaches. Updates: patch vulnerabilities. Training: employee security. Trust: builds credibility. Legal: avoids penalties."},
        {"question": "What optimizes user experience?", "answer": "UX optimization", "alternatives": ["Conversion optimization"], "explanation": "UX optimization improves experience. Elements: navigation, load time, mobile responsiveness, accessibility. Testing: heat maps, session recordings. A/B tests: compare versions. Pain points: identify, resolve. Analytics: track behavior. Continuous: ongoing improvements. ROI: highest impact changes first."},
        {"question": "What integrates with business systems?", "answer": "API integration", "alternatives": ["Third-party integration"], "explanation": "API integration connects external systems. Examples: accounting, CRM, inventory, shipping. Automation: reduce manual work. Data sync: real-time updates. Custom: build unique workflows. Scalability: handle volume. Reliability: error handling. Cost: evaluate integration options."},
        {"question": "What tracks customer journey?", "answer": "Attribution tracking", "alternatives": ["Multi-touch attribution"], "explanation": "Attribution tracking credits touchpoints. Channels: email, ads, organic, referrals, direct. Models: first-click, last-click, linear, time-decay. Importance: understand channel value. Budget allocation: optimize spending. Tools: analytics, UTM parameters. Accuracy: attribution challenges."},
        {"question": "What predicts business metrics?", "answer": "Forecasting models", "alternatives": ["Sales forecasting"], "explanation": "Forecasting models predict future trends. Data: historical sales, seasonality, trends. Methods: time series, regression, machine learning. Uses: inventory planning, staffing, budget. Accuracy: improves with data. Challenges: external factors, outliers. Continuous: update models regularly."},
        {"question": "What handles peak traffic?", "answer": "Load balancing", "alternatives": ["Traffic management"], "explanation": "Load balancing distributes traffic. Purpose: prevent server overload. Methods: round-robin, least connections, dynamic. Benefits: reliability, performance. CDN: geographic distribution. Monitoring: track performance. Failover: backup servers ready. Cost: distributed infrastructure."},
        {"question": "What streamlines operations?", "answer": "Workflow automation", "alternatives": ["Process automation"], "explanation": "Workflow automation reduces manual tasks. Examples: order confirmation emails, inventory alerts, refund processing. Triggers: events, conditions. Benefits: efficiency, consistency, error reduction. Implementation: workflows configured, no coding. Scalability: handle volume. Monitoring: track execution."},
        {"question": "What drives customer success?", "answer": "Customer support systems", "alternatives": ["Help desk"], "explanation": "Customer support handles inquiries. Channels: email, chat, phone, social media. Ticketing: track issues. Knowledge base: self-service. Response time: matters for satisfaction. Tools: Zendesk, Intercom. Integration: connects to platform. Training: quality support team essential."},
        {"question": "What achieves strategic goals?", "answer": "Business intelligence", "alternatives": ["Strategic analytics"], "explanation": "Business intelligence provides insights. Data sources: sales, customers, operations, market. Analysis: identify trends, patterns, opportunities. Dashboards: visualize key metrics. Decisions: data-driven strategy. Competitive advantage: stay ahead. Implementation: requires expertise. ROI: major impact on success."}
    ]
}

ALL_ADDITIONAL_QUESTIONS['ecommerce_platforms'] = ECOMMERCE_PLATFORMS_QUESTIONS

# 40. Web Security
WEB_SECURITY_QUESTIONS = {
    "easy": [
        {"question": "What protects web connections?", "answer": "HTTPS", "alternatives": ["TLS", "SSL"], "explanation": "HTTPS encrypts web traffic. Protocol: HTTP + SSL/TLS encryption. Benefits: secure transmission, privacy, trust. URL: shows padlock icon. Required: PCI compliance, GDPR, websites with login. Standard: all modern sites use HTTPS. Certificate: needed for HTTPS."},
        {"question": "What creates trust?", "answer": "SSL certificate", "alternatives": ["Digital certificate"], "explanation": "SSL certificate authenticates website. Purpose: proves domain ownership. Encryption: enables HTTPS. Types: domain-validated, organization-validated, extended validation. Cost: free to premium. Renewal: periodic needed. Trust: builds credibility."},
        {"question": "What prevents cookie theft?", "answer": "HTTPOnly flag", "alternatives": ["Secure flag"], "explanation": "HTTPOnly flag prevents JavaScript access to cookies. Purpose: session hijacking prevention. Implementation: set in Set-Cookie header. Benefit: reduces XSS attack impact. Secure flag: HTTPS-only. SameSite: CSRF prevention."},
        {"question": "What blocks unauthorized access?", "answer": "Authentication", "alternatives": ["Login"], "explanation": "Authentication verifies user identity. Methods: password, multi-factor (2FA), OAuth, biometric. Credentials: username + password minimum. MFA: adds security layer. Sessions: maintain authenticated state. Importance: protects private data. Implementation: essential for any user system."},
        {"question": "What limits access?", "answer": "Authorization", "alternatives": ["Permission"], "explanation": "Authorization controls what authenticated users can access. Roles: admin, user, guest. Permissions: specific actions. Levels: different users different access. Implementation: check permissions before action. Importance: prevents privilege escalation. Auditing: log changes."},
        {"question": "What prevents injection attacks?", "answer": "Input validation", "alternatives": ["Sanitization"], "explanation": "Input validation checks user input. Purpose: prevent injection attacks (SQL, command). Techniques: whitelisting, length limits, type checking. Client-side: better UX, server-side: security. Sanitize: remove dangerous characters. Never trust: always validate user input."},
        {"question": "What intercepts requests?", "answer": "Web Application Firewall", "alternatives": ["WAF"], "explanation": "WAF monitors HTTP requests. Purpose: block malicious traffic. Rules: signature-based, anomaly detection. Benefits: protects against common attacks. Implementation: cloud-based or on-premise. Compliance: required by some regulations. Protection: first line of defense."},
        {"question": "What prevents data exposure?", "answer": "Encryption", "alternatives": ["Data encryption"], "explanation": "Encryption transforms data to unreadable form. Key: only holder can decrypt. At-rest: stored data encrypted. In-transit: HTTPS encryption. Standards: AES-256 (encryption). Benefits: privacy, compliance. Performance: minor overhead. Essential: handles sensitive data."},
        {"question": "What verifies user actions?", "answer": "Multi-factor authentication", "alternatives": ["2FA", "MFA"], "explanation": "MFA adds verification layers. Factors: something you know (password), have (phone), are (biometric). Benefits: stronger security, prevents unauthorized access. Implementation: SMS, authenticator apps, hardware keys. User experience: additional step. Importance: critical for high-value accounts."},
        {"question": "What logs security events?", "answer": "Security auditing", "alternatives": ["Audit logging"], "explanation": "Security auditing records events. Events: logins, data access, permission changes. Purposes: compliance, incident investigation, threat detection. Retention: keep logs sufficient time. Analysis: review for issues. Importance: forensic evidence. Implementation: automated, centralized logging."}
    ],
    "average": [
        {"question": "What prevents request forgery?", "answer": "CSRF protection", "alternatives": ["Anti-CSRF tokens"], "explanation": "CSRF protection prevents cross-site requests. Attack: attacker makes unauthorized requests. Prevention: tokens validate request origin. Techniques: SameSite cookies, Origin checking. Implementation: hidden tokens in forms. Importance: protects users. Transparent: doesn't affect UX."},
        {"question": "What prevents script injection?", "answer": "XSS prevention", "alternatives": ["Cross-site scripting"], "explanation": "XSS prevention prevents malicious scripts. Attack: inject script in page, steal cookies/data. Prevention: output encoding, CSP headers, sanitization. Input: filter user-supplied data. Output: encode before displaying. Levels: reflected, stored, DOM-based. Testing: security scanners detect."},
        {"question": "What prevents data leakage?", "answer": "SQL injection prevention", "alternatives": ["Parameterized queries"], "explanation": "SQL injection prevention protects database. Attack: malicious SQL in input. Prevention: parameterized queries, ORM, stored procedures. Techniques: prepare statement, escape characters. Testing: penetration testing finds vulnerabilities. Impact: critical vulnerability. Importance: common, dangerous."},
        {"question": "What secures sessions?", "answer": "Session management", "alternatives": ["Session security"], "explanation": "Session management maintains secure sessions. Techniques: secure tokens, expiration, HTTPOnly cookies. Timeout: logout after inactivity. Regenerate: new session on login. Revocation: logout invalidates session. Tracking: user activity logged. Importance: prevents hijacking. Implementation: frameworks provide."},
        {"question": "What controls policy?", "answer": "Content Security Policy", "alternatives": ["CSP"], "explanation": "CSP controls which content loads. Purpose: prevent XSS attacks, data exfiltration. Directives: script-src, style-src, img-src, etc. Implementation: HTTP header, meta tag. Violation: reports blocked resources. Strict: stronger protection, may break. Flexibility: balance security and functionality."},
        {"question": "What secures headers?", "answer": "Security headers", "alternatives": ["HTTP security headers"], "explanation": "Security headers provide protection. Examples: X-Frame-Options (clickjacking), X-Content-Type-Options (MIME sniffing), Strict-Transport-Security (HTTPS). Implementation: server-side configuration. Benefit: prevents certain attacks. Multiple: layered defense. Monitoring: verify headers present."},
        {"question": "What detects intrusions?", "answer": "Intrusion detection", "alternatives": ["IDS", "Threat detection"], "explanation": "Intrusion detection identifies attacks. Methods: signature-based (known patterns), anomaly-based (unusual behavior). Alerts: suspicious activity flagged. Response: investigate, block attackers. Tools: SIEM systems, WAF rules. Automation: real-time alerts. Importance: early threat detection."},
        {"question": "What authenticates API requests?", "answer": "API security", "alternatives": ["API authentication"], "explanation": "API security protects endpoints. Techniques: API keys, OAuth, JWT tokens. Validation: verify requester identity, authorization. Rate limiting: prevent abuse. HTTPS: encrypt traffic. Logging: audit access. Versioning: manage changes. Testing: security scanners, penetration tests."},
        {"question": "What manages vulnerabilities?", "answer": "Vulnerability management", "alternatives": ["Patch management"], "explanation": "Vulnerability management identifies, fixes vulnerabilities. Process: scan, assess, prioritize, patch. Tools: vulnerability scanners, penetration testing. Timelines: critical patches urgent. Testing: verify fixes work. Disclosure: responsible process. Continuous: ongoing vigilance. Priority: reduce attack surface."},
        {"question": "What handles incidents?", "answer": "Incident response", "alternatives": ["Security incident"], "explanation": "Incident response handles security breaches. Process: detect, respond, investigate, recover. Planning: incident response team, procedures. Communication: notify affected parties. Forensics: understand what happened. Mitigation: prevent future incidents. Learning: improve from incidents. Timing: respond quickly."}
    ],
    "difficult": [
        {"question": "What enforces strong passwords?", "answer": "Password security policy", "alternatives": ["Password policy"], "explanation": "Password policy enforces security standards. Requirements: length (12+ chars), complexity (upper, lower, number, special). Expiration: may require change (now discouraged). Hashing: bcrypt, Argon2 (never plain text). Multi-factor: reduces password importance. Education: users important. Implementation: application-enforced."},
        {"question": "What prevents brute force?", "answer": "Rate limiting", "alternatives": ["Account lockout"], "explanation": "Rate limiting prevents brute force attacks. Methods: limit attempts, progressive delay, account lockout. Implementation: track failed attempts, IP-based, account-based. Balance: block attackers, allow users. Recovery: unlock after time. Alternative: CAPTCHA after attempts. Monitoring: unusual patterns detected."},
        {"question": "What manages secrets?", "answer": "Secret management", "alternatives": ["Credentials management"], "explanation": "Secret management secures sensitive data. Items: API keys, database passwords, private keys. Practices: never hardcode, use environment variables. Tools: Vault, AWS Secrets Manager. Rotation: periodic updates. Access control: least privilege. Encryption: at rest. Auditing: track access. Compliance: often required."},
        {"question": "What detects threats?", "answer": "Security monitoring", "alternatives": ["Threat detection"], "explanation": "Security monitoring tracks system activity. Sources: logs, network traffic, system metrics. Analysis: identify suspicious behavior. Alerting: real-time notifications. Response: investigate, contain threats. Tools: SIEM, EDR, SOC. Automation: rules-based, ML-based. Continuous: 24/7 monitoring. Effectiveness: depends on expertise."},
        {"question": "What handles compliance?", "answer": "Compliance framework", "alternatives": ["Regulatory compliance"], "explanation": "Compliance framework ensures regulatory adherence. Standards: PCI DSS, HIPAA, GDPR, SOC 2. Requirements: vary by industry, data type. Audits: verify compliance. Documentation: evidence of controls. Penalties: non-compliance fines, business impact. Continuous: ongoing maintenance. Investment: significant but necessary."},
        {"question": "What tests for weaknesses?", "answer": "Penetration testing", "alternatives": ["Security testing"], "explanation": "Penetration testing simulates attacks. Scope: systems to test, timeframe. Techniques: network attacks, phishing, social engineering. Reporting: vulnerabilities, recommendations. Frequency: annual minimum, after changes. Expert: requires skilled professionals. Value: identifies real vulnerabilities. Business: justifies security investment."},
        {"question": "What enables secure architecture?", "answer": "Zero-trust security", "alternatives": ["Zero trust model"], "explanation": "Zero-trust assumes all access is risky. Principle: never trust, always verify. Implementation: authentication, authorization for every access. Network: microsegmentation, least privilege. Monitoring: continuous verification. Benefits: reduced breach impact. Challenges: complexity, user friction. Modern: increasingly adopted standard."},
        {"question": "What secures supply chain?", "answer": "Supply chain security", "alternatives": ["Dependency security"], "explanation": "Supply chain security manages third-party risks. Concerns: compromised libraries, malware, vulnerabilities. Controls: code review, dependency scanning, vendor assessment. Tools: SBOM (Software Bill of Materials), dependency scanning. Importance: indirect attack vector. Incident: SolarWinds, Log4j. Proactive: assess before adopting."},
        {"question": "What implements secure operations?", "answer": "Security operations", "alternatives": ["SecOps"], "explanation": "Security operations maintains secure systems. Activities: patching, updates, monitoring, incident response. Teams: security, ops collaboration. Culture: security-first mindset. Automation: reduce manual work. Efficiency: balance security and speed. DevSecOps: integrate security in development. Continuous: ongoing responsibility."},
        {"question": "What builds security culture?", "answer": "Security awareness", "alternatives": ["Employee training"], "explanation": "Security awareness educates users. Content: phishing, passwords, data protection. Training: regular, updated. Consequences: understand risks. Reporting: encourage threat reporting. Leadership: demonstrate commitment. Culture: security everyone's responsibility. Effectiveness: reduces human-caused breaches. Investment: prevention focus."}
    ]
}

ALL_ADDITIONAL_QUESTIONS['web_security'] = WEB_SECURITY_QUESTIONS

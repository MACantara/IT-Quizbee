{
  "subtopic_id": "sdlc",
  "subtopic_name": "Software Development Life Cycle",
  "mode": "finals",
  "difficulty": "difficult",
  "questions": [
    {
      "question": "The SDLC model combining iterative development with waterfall structure for large projects.",
      "answer": "Rational Unified Process",
      "alternatives": [
        "RUP"
      ],
      "explanation": "RUP is an iterative framework that organizes development into four phases while incorporating best practices from various methodologies.",
      "id": "sdlc_sdlc_d_finals_000"
    },
    {
      "question": "The process of ensuring software continues to work correctly after changes are made.",
      "answer": "Regression Testing",
      "alternatives": [
        "Regression Analysis"
      ],
      "explanation": "Regression testing verifies that recent code changes haven't adversely affected existing functionality.",
      "id": "sdlc_sdlc_d_finals_001"
    },
    {
      "question": "The principle stating each SDLC phase should produce specific deliverables.",
      "answer": "Phase Gate Approach",
      "alternatives": [
        "Stage Gate",
        "Milestone Review"
      ],
      "explanation": "Phase gates require specific criteria and deliverables to be met before proceeding to the next phase.",
      "id": "sdlc_sdlc_d_finals_002"
    },
    {
      "question": "The type of prototyping where the prototype is discarded after requirements are finalized.",
      "answer": "Throwaway Prototyping",
      "alternatives": [
        "Rapid Prototyping",
        "Disposable Prototype"
      ],
      "explanation": "Throwaway prototyping builds a quick model to clarify requirements, which is then discarded before building the actual system.",
      "id": "sdlc_sdlc_d_finals_003"
    },
    {
      "question": "The type of prototyping where the prototype evolves into the final system.",
      "answer": "Evolutionary Prototyping",
      "alternatives": [
        "Incremental Prototyping"
      ],
      "explanation": "Evolutionary prototyping continuously refines the prototype, eventually transforming it into the production system.",
      "id": "sdlc_sdlc_d_finals_004"
    },
    {
      "question": "The maintenance type that improves code structure without changing functionality.",
      "answer": "Preventive Maintenance",
      "alternatives": [
        "Refactoring",
        "Proactive Maintenance"
      ],
      "explanation": "Preventive maintenance restructures code to prevent future problems and improve maintainability without altering behavior.",
      "id": "sdlc_sdlc_d_finals_005"
    },
    {
      "question": "The metric measuring the effort required to understand and modify code.",
      "answer": "Maintainability Index",
      "alternatives": [
        "Maintenance Complexity"
      ],
      "explanation": "Maintainability Index quantifies how easily software can be maintained based on factors like complexity and documentation.",
      "id": "sdlc_sdlc_d_finals_006"
    },
    {
      "question": "The formal review process where code is examined before integration.",
      "answer": "Code Inspection",
      "alternatives": [
        "Fagan Inspection",
        "Formal Review"
      ],
      "explanation": "Code inspection is a systematic peer review technique to detect defects early through structured examination.",
      "id": "sdlc_sdlc_d_finals_007"
    },
    {
      "question": "The document describing how the system will be built from a technical perspective.",
      "answer": "System Design Document",
      "alternatives": [
        "SDD",
        "Technical Design Specification"
      ],
      "explanation": "SDD details the technical architecture, components, interfaces, and data design for implementing the system.",
      "id": "sdlc_sdlc_d_finals_008"
    },
    {
      "question": "The approach where critical system features are identified and developed first.",
      "answer": "Risk-Driven Development",
      "alternatives": [
        "Risk-Based Prioritization"
      ],
      "explanation": "Risk-driven development prioritizes addressing high-risk elements early to reduce project uncertainty and potential failures.",
      "id": "sdlc_sdlc_d_finals_009"
    }
  ]
}
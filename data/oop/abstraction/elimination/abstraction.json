{
  "subtopic_id": "abstraction",
  "subtopic_name": "Abstraction",
  "mode": "elimination",
  "questions": [
    {
      "question": "What does abstraction hide from users?",
      "options": [
        "Functionality",
        "Complexity",
        "Security",
        "Performance"
      ],
      "correct": 1,
      "explanation": "Abstraction hides complex implementation details.",
      "id": "oop_abst_elim_000"
    },
    {
      "question": "What type of class cannot be instantiated?",
      "options": [
        "Concrete class",
        "Final class",
        "Abstract class",
        "Static class"
      ],
      "correct": 2,
      "explanation": "Abstract classes serve as blueprints for other classes.",
      "id": "oop_abst_elim_001"
    },
    {
      "question": "What method in abstract class has no implementation?",
      "options": [
        "Concrete method",
        "Abstract method",
        "Virtual method",
        "Static method"
      ],
      "correct": 1,
      "explanation": "Abstract methods define signatures without implementation.",
      "id": "oop_abst_elim_002"
    },
    {
      "question": "What Java keyword declares an abstract class?",
      "options": [
        "virtual",
        "interface",
        "abstract",
        "implements"
      ],
      "correct": 2,
      "explanation": "Abstract keyword creates abstract classes and methods.",
      "id": "oop_abst_elim_003"
    },
    {
      "question": "What can contain only abstract methods?",
      "options": [
        "Abstract class",
        "Interface",
        "Concrete class",
        "Final class"
      ],
      "correct": 1,
      "explanation": "Interfaces traditionally define pure contracts.",
      "id": "oop_abst_elim_004"
    },
    {
      "question": "What keyword implements an interface in Java?",
      "options": [
        "extends",
        "implements",
        "uses",
        "applies"
      ],
      "correct": 1,
      "explanation": "Implements keyword applies interfaces to classes.",
      "id": "oop_abst_elim_005"
    },
    {
      "question": "How many abstract classes can a Java class extend?",
      "options": [
        "One",
        "Two",
        "Multiple",
        "None"
      ],
      "correct": 0,
      "explanation": "Java allows single inheritance for classes.",
      "id": "oop_abst_elim_006"
    },
    {
      "question": "How many interfaces can a Java class implement?",
      "options": [
        "None",
        "One",
        "Two",
        "Multiple"
      ],
      "correct": 3,
      "explanation": "Classes can implement multiple interfaces.",
      "id": "oop_abst_elim_007"
    },
    {
      "question": "What must child classes do with abstract methods?",
      "options": [
        "Ignore them",
        "Delete them",
        "Implement them",
        "Override them optionally"
      ],
      "correct": 2,
      "explanation": "Child classes must provide implementations.",
      "id": "oop_abst_elim_008"
    },
    {
      "question": "What level hides low-level details like hardware?",
      "options": [
        "Physical abstraction",
        "Logical abstraction",
        "View abstraction",
        "Data abstraction"
      ],
      "correct": 0,
      "explanation": "Physical abstraction hides hardware complexities.",
      "id": "oop_abst_elim_009"
    }
  ]
}
{
  "subtopic_id": "normalization",
  "subtopic_name": "Normalization",
  "mode": "finals",
  "difficulty": "average",
  "questions": [
    {
      "question": "What is database normalization?",
      "answer": "The process of organizing data to reduce redundancy and improve data integrity",
      "alternatives": [],
      "explanation": "Database normalization is the process of organizing data in a database to reduce redundancy, eliminate undesirable characteristics like insertion, update, and deletion anomalies, and improve data integrity. It involves dividing large tables into smaller, related tables according to normal form rules."
    },
    {
      "question": "What is the First Normal Form (1NF)?",
      "answer": "All attributes must be atomic (indivisible) and each record must be unique",
      "alternatives": [],
      "explanation": "First Normal Form (1NF) requires that all attributes contain only atomic (indivisible) values, and each record must be unique (typically enforced by a primary key). No repeating groups or arrays are allowed. For example, a column cannot contain comma-separated values like 'Math, Science, English'."
    },
    {
      "question": "What is the Second Normal Form (2NF)?",
      "answer": "Must be in 1NF and all non-key attributes must be fully functionally dependent on the entire primary key",
      "alternatives": [],
      "explanation": "Second Normal Form (2NF) requires that the table is in 1NF and all non-key attributes are fully functionally dependent on the entire primary key (no partial dependencies). This mainly applies to tables with composite primary keys. For example, if the key is (StudentID, CourseID), attributes like StudentName should depend on the entire key, not just StudentID."
    },
    {
      "question": "What is the Third Normal Form (3NF)?",
      "answer": "Must be in 2NF and have no transitive dependencies (non-key attributes depend only on the primary key)",
      "alternatives": [],
      "explanation": "Third Normal Form (3NF) requires that the table is in 2NF and has no transitive dependencies - meaning non-key attributes must depend only on the primary key, not on other non-key attributes. For example, if you have StudentID → DepartmentID → DepartmentName, DepartmentName transitively depends on StudentID through DepartmentID, violating 3NF."
    },
    {
      "question": "What is a functional dependency?",
      "answer": "When the value of one attribute uniquely determines the value of another attribute",
      "alternatives": [],
      "explanation": "A functional dependency exists when the value of one attribute (or set of attributes) uniquely determines the value of another attribute. Notation: A → B means 'A functionally determines B'. For example, StudentID → StudentName means knowing the StudentID uniquely determines the StudentName. Functional dependencies are key to understanding normalization."
    },
    {
      "question": "What are insertion anomalies?",
      "answer": "Errors when inserting new records due to poor database design",
      "alternatives": [],
      "explanation": "Insertion anomalies occur in poorly designed (unnormalized) databases when you cannot insert certain data without the presence of other data. For example, if course information is stored with student enrollment data, you cannot add a new course until a student enrolls in it. Normalization eliminates these anomalies."
    },
    {
      "question": "What are update anomalies?",
      "answer": "Inconsistencies that arise when the same data stored in multiple places is not updated uniformly",
      "alternatives": [],
      "explanation": "Update anomalies occur when the same information is stored redundantly in multiple places, and updating one instance doesn't update all instances, causing inconsistency. For example, if a teacher's email is stored with every student in their class, changing the email requires updating multiple rows. Normalization eliminates redundancy and these anomalies."
    },
    {
      "question": "What are deletion anomalies?",
      "answer": "Unintended loss of information when deleting records due to poor database design",
      "alternatives": [],
      "explanation": "Deletion anomalies occur when deleting certain data unintentionally causes the loss of other important data. For example, if course information is stored only with student enrollments, deleting the last student from a course would delete all course information. Normalization prevents this by separating entities into proper tables."
    },
    {
      "question": "What is Boyce-Codd Normal Form (BCNF)?",
      "answer": "A stricter version of 3NF where every determinant must be a candidate key",
      "alternatives": [],
      "explanation": "Boyce-Codd Normal Form (BCNF) is a stricter version of 3NF. A table is in BCNF if it's in 3NF and for every functional dependency X → Y, X must be a superkey (candidate key). BCNF eliminates all anomalies based on functional dependencies. Most tables in 3NF are also in BCNF, but exceptions exist."
    },
    {
      "question": "When might denormalization be appropriate?",
      "answer": "To improve query performance by reducing joins, when read performance is more critical than write performance",
      "alternatives": [],
      "explanation": "Denormalization (intentionally introducing redundancy) may be appropriate to improve query performance by reducing complex joins, especially when read operations far outnumber writes. It's common in data warehousing, reporting systems, and read-heavy applications. However, it increases storage requirements and complexity of maintaining data consistency, so it's a deliberate trade-off."
    }
  ]
}
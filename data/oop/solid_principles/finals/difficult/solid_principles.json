{
  "subtopic_id": "solid_principles",
  "subtopic_name": "SOLID Principles",
  "mode": "finals",
  "difficulty": "difficult",
  "questions": [
    {
      "question": "Who introduced SOLID principles?",
      "answer": "Robert C. Martin",
      "alternatives": [
        "Uncle Bob",
        "Bob Martin"
      ],
      "explanation": "Robert Martin formalized SOLID principles.",
      "id": "sol_pri_sol_pri_d_finals_000"
    },
    {
      "question": "What anti-pattern violates Single Responsibility?",
      "answer": "god object",
      "alternatives": [
        "god class"
      ],
      "explanation": "God objects handle too many responsibilities.",
      "id": "sol_pri_sol_pri_d_finals_001"
    },
    {
      "question": "What mechanism enforces Open/Closed at compile time?",
      "answer": "templates",
      "alternatives": [
        "generics"
      ],
      "explanation": "Templates enable extension without modification.",
      "id": "sol_pri_sol_pri_d_finals_002"
    },
    {
      "question": "What problem does Liskov Substitution prevent?",
      "answer": "behavioral incompatibility",
      "alternatives": [
        "contract violation"
      ],
      "explanation": "LSP ensures substitution correctness.",
      "id": "sol_pri_sol_pri_d_finals_003"
    },
    {
      "question": "What anti-pattern violates Interface Segregation?",
      "answer": "fat interface",
      "alternatives": [
        "polluted interface"
      ],
      "explanation": "Fat interfaces force unused dependencies.",
      "id": "sol_pri_sol_pri_d_finals_004"
    },
    {
      "question": "What framework feature implements Dependency Inversion?",
      "answer": "IoC container",
      "alternatives": [
        "inversion of control",
        "DI container"
      ],
      "explanation": "IoC containers manage dependencies.",
      "id": "sol_pri_sol_pri_d_finals_005"
    },
    {
      "question": "What metric detects Single Responsibility violations?",
      "answer": "LCOM",
      "alternatives": [
        "Lack of Cohesion of Methods"
      ],
      "explanation": "LCOM measures class cohesion.",
      "id": "sol_pri_sol_pri_d_finals_006"
    },
    {
      "question": "What refactoring supports Interface Segregation?",
      "answer": "extract interface",
      "alternatives": [
        "interface extraction"
      ],
      "explanation": "Extract interface creates focused contracts.",
      "id": "sol_pri_sol_pri_d_finals_007"
    },
    {
      "question": "What principle do SOLID principles collectively support?",
      "answer": "separation of concerns",
      "alternatives": [
        "SoC"
      ],
      "explanation": "SOLID promotes modular design.",
      "id": "sol_pri_sol_pri_d_finals_008"
    },
    {
      "question": "What design approach follows all SOLID principles?",
      "answer": "clean architecture",
      "alternatives": [
        "hexagonal architecture"
      ],
      "explanation": "Clean architecture embodies SOLID principles.",
      "id": "sol_pri_sol_pri_d_finals_009"
    }
  ]
}
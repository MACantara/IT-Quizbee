{
  "subtopic_id": "constructors",
  "subtopic_name": "Constructors & Destructors",
  "mode": "finals",
  "difficulty": "difficult",
  "questions": [
    {
      "question": "What creates objects before main() execution?",
      "answer": "static constructor",
      "alternatives": [
        "static initialization"
      ],
      "explanation": "Static constructors initialize static members.",
      "id": "cons_cons_d_finals_000"
    },
    {
      "question": "What ensures proper copy semantics?",
      "answer": "rule of three",
      "alternatives": [
        "rule of 3"
      ],
      "explanation": "Rule of three covers destructor, copy constructor, assignment operator.",
      "id": "cons_cons_d_finals_001"
    },
    {
      "question": "What C++11 rule adds move operations?",
      "answer": "rule of five",
      "alternatives": [
        "rule of 5"
      ],
      "explanation": "Rule of five includes move constructor and move assignment.",
      "id": "cons_cons_d_finals_002"
    },
    {
      "question": "What technique defers object initialization?",
      "answer": "lazy initialization",
      "alternatives": [
        "lazy loading"
      ],
      "explanation": "Lazy initialization creates objects only when needed.",
      "id": "cons_cons_d_finals_003"
    },
    {
      "question": "What C++ feature guarantees exception safety?",
      "answer": "RAII",
      "alternatives": [
        "Resource Acquisition Is Initialization"
      ],
      "explanation": "RAII ties resource lifetime to object lifetime.",
      "id": "cons_cons_d_finals_004"
    },
    {
      "question": "What pattern creates objects with many parameters?",
      "answer": "builder pattern",
      "alternatives": [
        "builder"
      ],
      "explanation": "Builder pattern constructs complex objects step-by-step.",
      "id": "cons_cons_d_finals_005"
    },
    {
      "question": "What technique allocates objects in memory pools?",
      "answer": "placement new",
      "alternatives": [
        "placement new operator"
      ],
      "explanation": "Placement new constructs objects at specific addresses.",
      "id": "cons_cons_d_finals_006"
    },
    {
      "question": "What prevents default constructor generation?",
      "answer": "user-defined constructor",
      "alternatives": [
        "custom constructor"
      ],
      "explanation": "Defining any constructor suppresses default generation.",
      "id": "cons_cons_d_finals_007"
    },
    {
      "question": "What C++11 keyword delegates constructor work?",
      "answer": "delegating constructor",
      "alternatives": [
        "constructor delegation"
      ],
      "explanation": "Delegating constructors call other constructors.",
      "id": "cons_cons_d_finals_008"
    },
    {
      "question": "What manages object pools efficiently?",
      "answer": "object pooling",
      "alternatives": [
        "object pool pattern"
      ],
      "explanation": "Object pooling reuses objects instead of creating new ones.",
      "id": "cons_cons_d_finals_009"
    }
  ]
}
{
  "subtopic_id": "memory_management",
  "subtopic_name": "Memory Management",
  "mode": "elimination",
  "questions": [
    {
      "question": "What technique allows processes to use more memory than physically available?",
      "options": [
        "Swapping",
        "Virtual memory",
        "Caching",
        "Buffering"
      ],
      "correct": 1,
      "explanation": "Virtual memory uses disk space as an extension of RAM, allowing processes to use more memory than physically available. It provides memory abstraction and protection.",
      "id": "ope_sys_mem_man_elim_000"
    },
    {
      "question": "What is a fixed-size memory block used in paging?",
      "options": [
        "Segment",
        "Frame",
        "Sector",
        "Block"
      ],
      "correct": 1,
      "explanation": "A frame is a fixed-size block of physical memory. Pages of virtual memory are mapped to frames in RAM through page tables.",
      "id": "ope_sys_mem_man_elim_001"
    },
    {
      "question": "What occurs when a process accesses a page not in physical memory?",
      "options": [
        "Page hit",
        "Cache miss",
        "Page fault",
        "Segmentation fault"
      ],
      "correct": 2,
      "explanation": "A page fault occurs when referencing a page not in RAM. The OS loads the page from disk into memory before continuing execution.",
      "id": "ope_sys_mem_man_elim_002"
    },
    {
      "question": "What data structure maps virtual addresses to physical addresses?",
      "options": [
        "File table",
        "Page table",
        "Process table",
        "Interrupt vector"
      ],
      "correct": 1,
      "explanation": "Page tables translate virtual page numbers to physical frame numbers. Each process has its own page table for memory isolation.",
      "id": "ope_sys_mem_man_elim_003"
    },
    {
      "question": "What algorithm replaces the page not used for the longest time?",
      "options": [
        "FIFO",
        "LRU",
        "Optimal",
        "Clock"
      ],
      "correct": 1,
      "explanation": "Least Recently Used replaces the page with the longest time since last use. It performs well but can be expensive to implement perfectly.",
      "id": "ope_sys_mem_man_elim_004"
    },
    {
      "question": "What problem occurs when the system spends more time paging than executing?",
      "options": [
        "Deadlock",
        "Starvation",
        "Thrashing",
        "Fragmentation"
      ],
      "correct": 2,
      "explanation": "Thrashing happens when excessive paging leaves little CPU time for execution. It occurs when too many processes compete for limited memory.",
      "id": "ope_sys_mem_man_elim_005"
    },
    {
      "question": "What memory scheme divides processes into variable-sized logical units?",
      "options": [
        "Paging",
        "Segmentation",
        "Partitioning",
        "Swapping"
      ],
      "correct": 1,
      "explanation": "Segmentation divides memory into logical units like code, data, and stack segments. Each segment can grow or shrink independently.",
      "id": "ope_sys_mem_man_elim_006"
    },
    {
      "question": "What bit in a page table entry indicates if a page is in memory?",
      "options": [
        "Dirty bit",
        "Reference bit",
        "Valid bit",
        "Protection bit"
      ],
      "correct": 2,
      "explanation": "The valid bit indicates whether a page is currently in physical memory. If invalid when accessed, a page fault occurs.",
      "id": "ope_sys_mem_man_elim_007"
    },
    {
      "question": "What technique loads pages only when needed?",
      "options": [
        "Pre-paging",
        "Demand paging",
        "Page prefetching",
        "Anticipatory loading"
      ],
      "correct": 1,
      "explanation": "Demand paging loads pages only when accessed, generating page faults. This minimizes initial loading time and memory waste.",
      "id": "ope_sys_mem_man_elim_008"
    },
    {
      "question": "What unused memory space exists between allocated regions?",
      "options": [
        "Internal fragmentation",
        "External fragmentation",
        "Memory leak",
        "Slack space"
      ],
      "correct": 1,
      "explanation": "External fragmentation is free memory scattered in small blocks. It prevents allocation of large contiguous blocks despite sufficient total free memory.",
      "id": "ope_sys_mem_man_elim_009"
    }
  ]
}
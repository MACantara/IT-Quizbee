{
  "subtopic_id": "testing",
  "subtopic_name": "Software Testing",
  "mode": "finals",
  "difficulty": "easy",
  "questions": [
    {
      "question": "What testing level tests individual components or functions in isolation?",
      "answer": "Unit Testing",
      "alternatives": [],
      "explanation": "Unit Testing focuses on testing the smallest testable parts of software, such as functions or methods, in isolation from the rest of the system.",
      "id": "test_test_e_finals_000"
    },
    {
      "question": "What testing verifies that integrated components work correctly together?",
      "answer": "Integration Testing",
      "alternatives": [],
      "explanation": "Integration Testing checks the interfaces and interactions between different modules or components when they are combined.",
      "id": "test_test_e_finals_001"
    },
    {
      "question": "What testing level verifies the entire system meets requirements?",
      "answer": "System Testing",
      "alternatives": [],
      "explanation": "System Testing tests the complete integrated system to verify it meets specified requirements and works as a whole.",
      "id": "test_test_e_finals_002"
    },
    {
      "question": "What testing type is performed by end users to validate business requirements?",
      "answer": "User Acceptance Testing",
      "alternatives": [
        "UAT",
        "Acceptance Testing"
      ],
      "explanation": "UAT is the final testing phase where actual users verify the system meets business needs and is ready for production.",
      "id": "test_test_e_finals_003"
    },
    {
      "question": "What testing approach examines functionality without knowing internal code?",
      "answer": "Black-box Testing",
      "alternatives": [
        "Black Box Testing"
      ],
      "explanation": "Black-box Testing focuses on inputs and outputs without considering internal code structure or implementation details.",
      "id": "test_test_e_finals_004"
    },
    {
      "question": "What testing approach examines internal code structure and logic?",
      "answer": "White-box Testing",
      "alternatives": [
        "White Box Testing",
        "Glass Box Testing"
      ],
      "explanation": "White-box Testing examines the internal workings of the software, including code paths, branches, and logic flow.",
      "id": "test_test_e_finals_005"
    },
    {
      "question": "What testing re-runs previous tests to ensure new changes didn't break existing functionality?",
      "answer": "Regression Testing",
      "alternatives": [],
      "explanation": "Regression Testing verifies that recent code changes haven't adversely affected existing features that previously worked correctly.",
      "id": "test_test_e_finals_006"
    },
    {
      "question": "What quick test verifies basic critical functionality before detailed testing?",
      "answer": "Smoke Testing",
      "alternatives": [
        "Build Verification Testing"
      ],
      "explanation": "Smoke Testing performs a quick check of critical functions to determine if the build is stable enough for thorough testing.",
      "id": "test_test_e_finals_007"
    },
    {
      "question": "What document outlines the steps to verify a specific feature works?",
      "answer": "Test Case",
      "alternatives": [],
      "explanation": "A Test Case is a set of conditions, steps, and expected results used to verify a particular aspect of the software.",
      "id": "test_test_e_finals_008"
    },
    {
      "question": "What is a collection of related test cases grouped together?",
      "answer": "Test Suite",
      "alternatives": [],
      "explanation": "A Test Suite is a collection of test cases designed to test a software program to show it has a specified set of behaviors.",
      "id": "test_test_e_finals_009"
    }
  ]
}
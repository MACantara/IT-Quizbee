{
  "subtopic_id": "responsive_design",
  "subtopic_name": "Responsive Design",
  "mode": "finals",
  "difficulty": "easy",
  "questions": [
    {
      "question": "What design adapts to different screen sizes?",
      "answer": "Responsive design",
      "alternatives": [
        "Responsive web design"
      ],
      "explanation": "Responsive design adapts layout to screen size. Single codebase: works desktop, tablet, mobile. Techniques: flexible layouts, media queries, flexible images. Benefits: better UX, SEO (mobile-first), cost (one site). Mobile-first: design mobile first, enhance for desktop."
    },
    {
      "question": "What base assumes mobile users?",
      "answer": "Mobile-first",
      "alternatives": [
        "Mobile-first approach"
      ],
      "explanation": "Mobile-first: design for mobile first, add complexity for larger screens. Rationale: mobile increasingly common, forces prioritization. Media queries: min-width (add features). Performance: simpler initially. Better results: essential features prominent on all devices."
    },
    {
      "question": "What container holds flexible content?",
      "answer": "Viewport",
      "alternatives": [
        "Device viewport"
      ],
      "explanation": "Viewport is visible area on device. Meta tag: <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">. Width: device width. Initial-scale: initial zoom. Essential: without, pages appear tiny on mobile. Device-specific: Chrome DevTools simulates."
    },
    {
      "question": "What image scales with container?",
      "answer": "Responsive image",
      "alternatives": [
        "Fluid image"
      ],
      "explanation": "Responsive image scales with container. CSS: img { max-width: 100%; height: auto; }. Prevents: exceeding container, distortion. Flexible: always fits. Performance: consider size. HTML: srcset attribute (multiple versions)."
    },
    {
      "question": "What adjusts layout based on size?",
      "answer": "Breakpoint",
      "alternatives": [
        "Media query breakpoint"
      ],
      "explanation": "Breakpoint is screen width triggering layout change. Common: 480px (mobile), 768px (tablet), 1024px (desktop), 1200px (large desktop). Mobile-first: min-width (add). Desktop-first: max-width (remove). Strategy: test on real devices, use common breakpoints."
    },
    {
      "question": "What CSS unit is relative to viewport?",
      "answer": "vw/vh",
      "alternatives": [
        "Viewport units"
      ],
      "explanation": "vw (viewport width) and vh (viewport height) are percentages of viewport. 100vw = full width, 50vw = half width. Responsive: scale with window. Uses: full-screen sections, hero images. Caution: vw includes scrollbar (overflow)."
    },
    {
      "question": "What property prevents image distortion?",
      "answer": "aspect-ratio",
      "alternatives": [
        "Aspect ratio property"
      ],
      "explanation": "aspect-ratio property maintains width-to-height ratio. CSS: aspect-ratio: 16 / 9; Example: YouTube video (16:9). Prevents: distortion on resize. Modern: browser calculates height automatically. Simplifies responsive images."
    },
    {
      "question": "What technique provides multiple image sizes?",
      "answer": "Srcset",
      "alternatives": [
        "Source set attribute"
      ],
      "explanation": "srcset provides multiple image versions for different sizes. Syntax: <img srcset=\"small.jpg 480w, large.jpg 1024w\">. Browser chooses: based on device. Performance: mobile downloads smaller file. Modern: responsive images without JavaScript."
    },
    {
      "question": "What text measurement scales with viewport?",
      "answer": "em/rem units",
      "alternatives": [
        "Relative font sizes"
      ],
      "explanation": "em/rem scale text responsively. em: relative to parent font size. rem: relative to root (html) font size. Responsive: change root, all scale. Flexible: em/rem better than px for responsiveness. Common: base 16px, scale from there."
    },
    {
      "question": "What layout adapts to content size?",
      "answer": "Flexible layout",
      "alternatives": [
        "Fluid layout"
      ],
      "explanation": "Flexible layout adapts to content. CSS: width: 100% (within container). Containers: max-width limits growth. Margins: auto centers. Responsive: no fixed widths. Combines with breakpoints for control."
    }
  ]
}
{
  "subtopic_id": "synchronization",
  "subtopic_name": "Synchronization",
  "mode": "finals",
  "difficulty": "average",
  "questions": [
    {
      "question": "What classical problem involves producers creating items and consumers using them?",
      "answer": "Producer-Consumer problem",
      "alternatives": ["Bounded buffer problem"],
      "explanation": "The Producer-Consumer problem coordinates data production and consumption. It requires synchronizing buffer access."
    },
    {
      "question": "What problem involves multiple readers and writers accessing shared data?",
      "answer": "Readers-Writers problem",
      "alternatives": [],
      "explanation": "The Readers-Writers problem coordinates concurrent read and write access. Multiple readers can proceed simultaneously."
    },
    {
      "question": "What classical problem demonstrates deadlock potential?",
      "answer": "Dining Philosophers problem",
      "alternatives": [],
      "explanation": "Dining Philosophers illustrates deadlock and starvation. Philosophers need two forks to eat."
    },
    {
      "question": "What monitor construct suspends processes until conditions are met?",
      "answer": "Condition variable",
      "alternatives": [],
      "explanation": "Condition variables enable processes to wait for specific conditions. They work with wait and signal operations."
    },
    {
      "question": "What requirement limits waiting time for critical section entry?",
      "answer": "Bounded waiting",
      "alternatives": [],
      "explanation": "Bounded waiting guarantees processes enter critical sections within finite time. It prevents starvation."
    },
    {
      "question": "What condition ensures critical section selection proceeds?",
      "answer": "Progress",
      "alternatives": [],
      "explanation": "Progress guarantees critical section entry decisions occur. Processes outside can't block indefinitely."
    },
    {
      "question": "What hardware instruction atomically tests and sets values?",
      "answer": "Test-and-Set",
      "alternatives": ["TAS"],
      "explanation": "Test-and-Set atomically reads and writes memory. It's used to implement locks."
    },
    {
      "question": "What hardware operation atomically swaps values?",
      "answer": "Compare-and-Swap",
      "alternatives": ["CAS"],
      "explanation": "Compare-and-Swap atomically compares and updates values. It's fundamental for lock-free programming."
    },
    {
      "question": "What technique disables interrupts to achieve atomicity?",
      "answer": "Interrupt disabling",
      "alternatives": [],
      "explanation": "Disabling interrupts prevents context switches during critical sections. It's simple but affects system responsiveness."
    },
    {
      "question": "What semaphore variant provides reader-writer synchronization?",
      "answer": "Read-write lock",
      "alternatives": ["RW lock"],
      "explanation": "Read-write locks allow multiple readers or one writer. They optimize for read-heavy workloads."
    }
  ]
}
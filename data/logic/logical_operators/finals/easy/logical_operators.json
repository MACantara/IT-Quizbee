{
  "subtopic_id": "logical_operators",
  "subtopic_name": "Logical Operators",
  "mode": "finals",
  "difficulty": "easy",
  "questions": [
    {
      "question": "What are the basic logical operators?",
      "answer": "AND, OR, NOT",
      "alternatives": [
        "Fundamental operators"
      ],
      "explanation": "Basic three: AND (), OR (), NOT (). Foundation: build all logic. Purpose: combine propositions. Gates: implemented in circuits. Symbols: different notations used. Standard: mathematical notation preferred. Boolean algebra: uses these."
    },
    {
      "question": "What does NAND do?",
      "answer": "NOT AND",
      "alternatives": [
        "Negation of conjunction"
      ],
      "explanation": "NAND: NOT applied to AND result. Truth: false only when both true. Definition: (pq). Universal: sufficient alone (functional complete). Gates: NAND gate basic computer component. Notation: pq or |. Importance: hardware basis."
    },
    {
      "question": "What does NOR do?",
      "answer": "NOT OR",
      "alternatives": [
        "Negation of disjunction"
      ],
      "explanation": "NOR: NOT applied to OR result. Truth: true only when both false. Definition: (pq). Universal: sufficient alone (functionally complete). Gates: NOR gate alternative basis. Notation: pq or . Applications: early computer design."
    },
    {
      "question": "What does XOR do?",
      "answer": "Exactly one true",
      "alternatives": [
        "Exclusive OR"
      ],
      "explanation": "XOR: true when inputs differ. Truth: T XOR F = T, F XOR F = F. Definition: (pq)(pq). Uses: binary addition (carry detection), parity checks. Gates: XOR gate common. Notation: pq or . Applications: cryptography, circuits."
    },
    {
      "question": "What does XNOR do?",
      "answer": "Biconditional (same value)",
      "alternatives": [
        "Equivalence"
      ],
      "explanation": "XNOR: true when inputs same. Truth: T XNOR T = T, T XNOR F = F. Definition: (pq) or (pq). Uses: equality testing. Gates: XNOR gate less common. Notation: pq. Applications: comparison circuits."
    },
    {
      "question": "What is operator associativity?",
      "answer": "Grouping order for same operators",
      "alternatives": [
        "Grouping law"
      ],
      "explanation": "Associativity: (pq)r = p(qr). Left vs right: matters in parsing. AND, OR: associative. IMPLICATION: right-associative. Notation: pqr means p(qr). Importance: reduces ambiguity."
    },
    {
      "question": "What is operator commutativity?",
      "answer": "Order doesn't matter",
      "alternatives": [
        "Order independence"
      ],
      "explanation": "Commutative: pq = qp. AND, OR, XOR: commutative. Implication: NOT commutative. Importance: simplifies reasoning. Notation: pq  qp. Applications: optimization, reordering."
    },
    {
      "question": "What is operator precedence?",
      "answer": "Order of evaluation",
      "alternatives": [
        "Precedence rules"
      ],
      "explanation": "Standard:  >  >  >  > . Evaluation: highest first. Parentheses: override. Importance: prevents ambiguity. Example: pqr means (pq)r. Consistency: critical in logic systems."
    },
    {
      "question": "What is the distributive law?",
      "answer": "Operator distributes over another",
      "alternatives": [
        "Distribution"
      ],
      "explanation": "Distribution: p(qr) = (pq)(pr). Both ways: AND distributes over OR, OR over AND (different algebra). Uses: simplification, circuit design. Proof: truth table. Importance: fundamental algebraic law."
    },
    {
      "question": "What is the absorption law?",
      "answer": "p(pq) = p",
      "alternatives": [
        "Absorption rule"
      ],
      "explanation": "Absorption: redundant term eliminated. Dual: p(pq) = p. Proof: truth table. Application: simplify formulas. Circuits: reduce gates. Purpose: optimization. Consequence: p always dominates."
    }
  ]
}
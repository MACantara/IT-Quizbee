{
  "subtopic_id": "encapsulation",
  "subtopic_name": "Encapsulation",
  "mode": "finals",
  "difficulty": "difficult",
  "questions": [
    {
      "question": "What is encapsulation in OOP?",
      "answer": "Bundling data and methods that operate on that data within a single unit",
      "alternatives": [],
      "explanation": "Encapsulation is the bundling of data (attributes) and methods (functions) that operate on the data into a single unit (class), and restricting direct access to some components to protect data integrity."
    },
    {
      "question": "What is data hiding?",
      "answer": "Restricting direct access to data members from outside the class",
      "alternatives": [],
      "explanation": "Data hiding is a key aspect of encapsulation where data members are made private or protected, preventing direct access from outside the class. Access is provided through public methods (getters/setters)."
    },
    {
      "question": "Which access modifier provides the highest level of data hiding in Java?",
      "answer": "private",
      "alternatives": [],
      "explanation": "The 'private' access modifier provides the highest level of encapsulation by making members accessible only within the same class, completely hiding them from outside access."
    },
    {
      "question": "What are getter methods?",
      "answer": "Methods that return the value of private variables",
      "alternatives": [],
      "explanation": "Getter methods (accessors) are public methods that return the value of private instance variables, providing controlled read access to encapsulated data."
    },
    {
      "question": "What are setter methods?",
      "answer": "Methods that allow controlled modification of private variables",
      "alternatives": [],
      "explanation": "Setter methods (mutators) are public methods that allow controlled modification of private instance variables, often including validation logic to maintain data integrity."
    },
    {
      "question": "What is the main benefit of encapsulation?",
      "answer": "Data protection and controlled access",
      "alternatives": [],
      "explanation": "The main benefit of encapsulation is data protection and controlled access. It prevents unauthorized access, maintains data integrity, and allows internal implementation changes without affecting external code."
    },
    {
      "question": "Which principle is closely related to encapsulation?",
      "answer": "Information hiding",
      "alternatives": [],
      "explanation": "Information hiding is a fundamental principle closely related to encapsulation. It involves hiding the internal representation and implementation details of a class from the outside world."
    },
    {
      "question": "What does it mean for a class to be 'tightly encapsulated'?",
      "answer": "All data members are private",
      "alternatives": [],
      "explanation": "A class is considered tightly encapsulated when all of its data members (instance variables) are declared as private, ensuring maximum data hiding and controlled access through public methods."
    },
    {
      "question": "Can encapsulation exist without inheritance?",
      "answer": "Yes, encapsulation is independent of inheritance",
      "alternatives": [],
      "explanation": "Yes, encapsulation is an independent OOP principle that doesn't require inheritance. A class can be well-encapsulated without inheriting from or being inherited by any other class."
    },
    {
      "question": "Why might you use validation in a setter method?",
      "answer": "To ensure data integrity by checking values before assignment",
      "alternatives": [],
      "explanation": "Validation in setter methods ensures data integrity by checking that values meet certain criteria before assignment. For example, ensuring age is positive or email format is valid, preventing invalid states."
    }
  ]
}
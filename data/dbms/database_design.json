{
  "subtopic_id": "database_design",
  "subtopic_name": "Database Design",
  "questions": [
    {
      "question": "What is an Entity-Relationship (ER) diagram used for?",
      "options": [
        "To visually represent the structure and relationships of entities in a database",
        "To show the physical storage of data on disk",
        "To optimize query performance",
        "To create backup schedules"
      ],
      "correct": 0,
      "explanation": "An ER diagram is a visual tool used to model the entities (objects/concepts) in a database, their attributes (properties), and the relationships between entities. It's a crucial part of database design, helping to plan the database structure before implementation and communicate the design to stakeholders."
    },
    {
      "question": "In an ER diagram, what shape represents an entity?",
      "options": [
        "Diamond",
        "Oval",
        "Rectangle",
        "Circle"
      ],
      "correct": 2,
      "explanation": "In ER diagrams, entities are represented by rectangles. Relationships are represented by diamonds, and attributes are represented by ovals. This standard notation helps clearly distinguish between different components of the database design."
    },
    {
      "question": "What is cardinality in database relationships?",
      "options": [
        "The number of tables in a database",
        "The number of instances of one entity that can be associated with instances of another entity",
        "The size of data in a column",
        "The speed of query execution"
      ],
      "correct": 1,
      "explanation": "Cardinality defines the numerical relationship between two entities. Common cardinalities include: One-to-One (1:1), One-to-Many (1:N), and Many-to-Many (M:N). For example, a Customer can have many Orders (1:N), but each Order belongs to one Customer."
    },
    {
      "question": "In a university database, what type of relationship exists between Student and Course entities?",
      "options": [
        "One-to-One",
        "One-to-Many",
        "Many-to-Many",
        "No relationship"
      ],
      "correct": 2,
      "explanation": "Student and Course typically have a Many-to-Many (M:N) relationship because a student can enroll in many courses, and a course can have many students. In relational databases, M:N relationships are typically implemented using a junction (bridge) table, such as Enrollment(student_id, course_id, grade)."
    },
    {
      "question": "What is a weak entity in database design?",
      "options": [
        "An entity that has low data integrity",
        "An entity that cannot exist without another entity and doesn't have a primary key of its own",
        "An entity with few attributes",
        "An entity that is rarely accessed"
      ],
      "correct": 1,
      "explanation": "A weak entity depends on a strong (parent) entity for its existence and identification. It doesn't have a sufficient set of attributes to form a primary key independently. For example, a RoomBooking entity might depend on a Hotel entityâ€”a booking cannot exist without a hotel and needs the hotel's ID as part of its identification."
    },
    {
      "question": "What are the main phases of database design?",
      "options": [
        "Installation, Configuration, Testing",
        "Conceptual, Logical, Physical",
        "Planning, Development, Maintenance",
        "Analysis, Design, Implementation"
      ],
      "correct": 1,
      "explanation": "Database design typically involves three phases: Conceptual design (creating ER diagrams, identifying entities and relationships), Logical design (converting ER diagram to relational schema, normalization), and Physical design (choosing storage structures, indexes, partitioning strategies for specific DBMS)."
    },
    {
      "question": "What is the purpose of normalization in database design?",
      "options": [
        "To increase data redundancy for faster access",
        "To organize data to minimize redundancy and dependency anomalies",
        "To create more tables regardless of data relationships",
        "To encrypt sensitive data"
      ],
      "correct": 1,
      "explanation": "Normalization is the process of organizing data to reduce redundancy and avoid insertion, update, and deletion anomalies. It involves decomposing tables into smaller, well-structured tables connected by relationships, typically following normal forms (1NF, 2NF, 3NF, BCNF) to achieve better data integrity."
    },
    {
      "question": "What does participation constraint specify in an ER diagram?",
      "options": [
        "Whether an entity's participation in a relationship is mandatory (total) or optional (partial)",
        "The number of attributes an entity has",
        "The order in which entities should be created",
        "The storage location of entity data"
      ],
      "correct": 0,
      "explanation": "Participation constraints indicate whether every instance of an entity must participate in a relationship. Total participation (indicated by double lines) means every entity instance must participate; partial participation (single line) means participation is optional. For example, every Employee must be assigned to a Department (total), but not every Employee has a Dependent (partial)."
    },
    {
      "question": "What is a surrogate key in database design?",
      "options": [
        "A natural key from the business domain",
        "An artificial primary key with no business meaning, typically auto-incremented",
        "A foreign key that references another table",
        "A composite key made of multiple columns"
      ],
      "correct": 1,
      "explanation": "A surrogate key is an artificially created identifier (often an auto-incremented integer) that has no business meaning. It's used as the primary key instead of natural keys. Benefits include simplicity, stability (doesn't change if business data changes), and better performance. Example: using customer_id (1, 2, 3...) instead of email or SSN."
    },
    {
      "question": "What is denormalization and when should it be used?",
      "options": [
        "Removing all normal forms from a database",
        "Deliberately introducing redundancy to improve query performance",
        "Converting a database to first normal form",
        "Deleting unnecessary tables"
      ],
      "correct": 1,
      "explanation": "Denormalization is the intentional process of adding redundancy to a normalized database to improve read performance by reducing the need for complex joins. It's used when read performance is critical and the database is read-heavy. The trade-off is increased storage, potential data inconsistency, and more complex update operations. Common in data warehouses and reporting systems."
    }
  ]
}
{
  "subtopic_id": "instruction_set",
  "subtopic_name": "Instruction Set Architecture",
  "mode": "finals",
  "difficulty": "difficult",
  "questions": [
    {
      "question": "What does VLIW stand for?",
      "answer": "Very Long Instruction Word",
      "alternatives": [
        "VLIW"
      ],
      "explanation": "VLIW packs multiple operations into a single long instruction word for parallel execution.",
      "id": "ins_set_ins_set_d_finals_000"
    },
    {
      "question": "What is a predicated instruction?",
      "answer": "Instruction executed based on condition",
      "alternatives": [
        "Conditional execution instruction"
      ],
      "explanation": "Predicated instructions execute only if a specified condition is true, reducing branches.",
      "id": "ins_set_ins_set_d_finals_001"
    },
    {
      "question": "What is register windowing in SPARC?",
      "answer": "Overlapping register sets for procedures",
      "alternatives": [
        "Register windows",
        "Sliding register sets"
      ],
      "explanation": "Register windowing provides each procedure with its own set of registers that partially overlap with callers.",
      "id": "ins_set_ins_set_d_finals_002"
    },
    {
      "question": "What does EPIC stand for?",
      "answer": "Explicitly Parallel Instruction Computing",
      "alternatives": [
        "EPIC architecture"
      ],
      "explanation": "EPIC is Intel's architecture philosophy where the compiler explicitly specifies parallelism.",
      "id": "ins_set_ins_set_d_finals_003"
    },
    {
      "question": "What is the instruction immediately after a branch that always executes?",
      "answer": "delay slot",
      "alternatives": [
        "branch delay slot",
        "delayed branch"
      ],
      "explanation": "The delay slot is the instruction immediately following a branch that executes regardless of branch outcome.",
      "id": "ins_set_ins_set_d_finals_004"
    },
    {
      "question": "What technique combines multiple instructions into one operation?",
      "answer": "instruction fusion",
      "alternatives": [
        "macro-op fusion",
        "instruction merging"
      ],
      "explanation": "Instruction fusion combines simple instructions into complex operations for more efficient execution.",
      "id": "ins_set_ins_set_d_finals_005"
    },
    {
      "question": "What hardware shifts data by any amount in one cycle?",
      "answer": "barrel shifter",
      "alternatives": [
        "shifter unit"
      ],
      "explanation": "A barrel shifter can shift or rotate data by any number of bits in a single clock cycle.",
      "id": "ins_set_ins_set_d_finals_006"
    },
    {
      "question": "What does SIMT stand for?",
      "answer": "Single Instruction Multiple Thread",
      "alternatives": [
        "SIMT architecture"
      ],
      "explanation": "SIMT executes the same instruction across multiple threads simultaneously, used in GPUs.",
      "id": "ins_set_ins_set_d_finals_007"
    },
    {
      "question": "What is a compressed instruction set?",
      "answer": "Smaller instruction encoding for code density",
      "alternatives": [
        "Compact instruction set",
        "Thumb mode"
      ],
      "explanation": "Compressed instructions use fewer bits than standard instructions to reduce code size.",
      "id": "ins_set_ins_set_d_finals_008"
    },
    {
      "question": "What addressing mode calculates addresses from the program counter?",
      "answer": "PC-relative addressing",
      "alternatives": [
        "program counter relative",
        "position-independent addressing"
      ],
      "explanation": "PC-relative addressing computes addresses based on the current program counter, enabling position-independent code.",
      "id": "ins_set_ins_set_d_finals_009"
    }
  ]
}
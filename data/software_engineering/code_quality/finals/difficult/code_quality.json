{
  "subtopic_id": "code_quality",
  "subtopic_name": "Code Quality",
  "mode": "finals",
  "difficulty": "difficult",
  "questions": [
    {
      "question": "What smell describes classes that use internal data of other classes?",
      "answer": "Feature Envy",
      "alternatives": [],
      "explanation": "Feature Envy occurs when a method accesses data of another object more than its own data, suggesting it should be moved."
    },
    {
      "question": "What refactoring replaces conditional logic with polymorphism?",
      "answer": "Replace Conditional with Polymorphism",
      "alternatives": [],
      "explanation": "This refactoring moves conditional branches into subclasses using polymorphism for cleaner object-oriented code."
    },
    {
      "question": "What smell describes objects that delegate most work to another object?",
      "answer": "Middle Man",
      "alternatives": [],
      "explanation": "Middle Man smell occurs when a class exists primarily to delegate calls to another class, adding unnecessary layers."
    },
    {
      "question": "What code quality principle states you aren't gonna need it?",
      "answer": "YAGNI",
      "alternatives": ["You Aren't Gonna Need It"],
      "explanation": "YAGNI principle advises against adding functionality until it's actually needed, avoiding speculative development."
    },
    {
      "question": "What metric measures the number of other classes a class depends on?",
      "answer": "Afferent Coupling",
      "alternatives": ["Fan-in", "Ca"],
      "explanation": "Afferent Coupling measures how many other classes depend on a particular class, indicating its responsibility level."
    },
    {
      "question": "What smell describes data and behavior separated into different classes?",
      "answer": "Data Class",
      "alternatives": [],
      "explanation": "Data Class smell occurs when classes contain only data with getters/setters but no behavior, violating encapsulation."
    },
    {
      "question": "What refactoring replaces magic numbers with named constants?",
      "answer": "Replace Magic Number with Symbolic Constant",
      "alternatives": ["Extract Constant"],
      "explanation": "This refactoring replaces literal numeric values with named constants, improving code readability and maintainability."
    },
    {
      "question": "What measures instability of a class based on dependencies?",
      "answer": "Instability Metric",
      "alternatives": [],
      "explanation": "Instability Metric indicates how resistant a class is to change based on its afferent and efferent coupling."
    },
    {
      "question": "What smell describes classes that inappropriately refuse inherited methods?",
      "answer": "Refused Bequest",
      "alternatives": [],
      "explanation": "Refused Bequest occurs when a subclass doesn't use methods or data inherited from parent classes."
    },
    {
      "question": "What technique measures cognitive complexity of understanding code?",
      "answer": "Cognitive Complexity",
      "alternatives": [],
      "explanation": "Cognitive Complexity measures how difficult it is for humans to understand code, considering nesting and flow breaks."
    }
  ]
}
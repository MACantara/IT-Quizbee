{
  "subtopic_id": "instruction_set",
  "subtopic_name": "Instruction Set Architecture",
  "mode": "finals",
  "difficulty": "average",
  "questions": [
    {
      "question": "What addressing mode adds an offset to a base register?",
      "answer": "Indexed addressing",
      "alternatives": [
        "Index addressing",
        "Base-displacement addressing"
      ],
      "explanation": "Indexed addressing calculates the effective address by adding an offset to a base register value.",
      "id": "ins_set_ins_set_a_finals_000"
    },
    {
      "question": "What is the addressing mode where the address is in memory?",
      "answer": "Indirect addressing",
      "alternatives": [
        "Memory indirect addressing"
      ],
      "explanation": "Indirect addressing uses a memory location that contains the address of the actual data.",
      "id": "ins_set_ins_set_a_finals_001"
    },
    {
      "question": "What does LOAD instruction do?",
      "answer": "Copy data from memory to register",
      "alternatives": [
        "Transfer memory to register",
        "Read from memory"
      ],
      "explanation": "LOAD moves data from a memory location into a CPU register for processing.",
      "id": "ins_set_ins_set_a_finals_002"
    },
    {
      "question": "What does STORE instruction do?",
      "answer": "Copy data from register to memory",
      "alternatives": [
        "Transfer register to memory",
        "Write to memory"
      ],
      "explanation": "STORE writes data from a CPU register back to a memory location.",
      "id": "ins_set_ins_set_a_finals_003"
    },
    {
      "question": "What type of instruction modifies the program counter?",
      "answer": "Branch instruction",
      "alternatives": [
        "Jump instruction",
        "Control flow instruction"
      ],
      "explanation": "Branch instructions alter the program counter to change the execution sequence.",
      "id": "ins_set_ins_set_a_finals_004"
    },
    {
      "question": "What is a stack pointer?",
      "answer": "Register pointing to top of stack",
      "alternatives": [
        "Stack register",
        "SP"
      ],
      "explanation": "The stack pointer is a special register that tracks the current top position of the call stack.",
      "id": "ins_set_ins_set_a_finals_005"
    },
    {
      "question": "What architecture uses load-store for memory access?",
      "answer": "RISC",
      "alternatives": [
        "Load-store architecture"
      ],
      "explanation": "RISC uses load-store architecture where only LOAD and STORE instructions access memory.",
      "id": "ins_set_ins_set_a_finals_006"
    },
    {
      "question": "What is auto-increment addressing?",
      "answer": "Register incremented after use",
      "alternatives": [
        "Post-increment addressing",
        "Automatic increment"
      ],
      "explanation": "Auto-increment automatically increases the register value after using it as an address.",
      "id": "ins_set_ins_set_a_finals_007"
    },
    {
      "question": "What format has opcode and three operands?",
      "answer": "Three-address instruction",
      "alternatives": [
        "3-address format"
      ],
      "explanation": "Three-address format specifies two source operands and one destination operand explicitly.",
      "id": "ins_set_ins_set_a_finals_008"
    },
    {
      "question": "What is the most common instruction length for RISC?",
      "answer": "32 bits",
      "alternatives": [
        "32-bit",
        "4 bytes"
      ],
      "explanation": "Most RISC architectures use fixed 32-bit instructions, though some use 64-bit.",
      "id": "ins_set_ins_set_a_finals_009"
    }
  ]
}
{
  "subtopic_id": "encapsulation",
  "subtopic_name": "Encapsulation",
  "mode": "elimination",
  "questions": [
    {
      "question": "What access modifier makes members accessible only within the same class?",
      "options": [
        "public",
        "private",
        "protected",
        "internal"
      ],
      "correct": 1,
      "explanation": "Private members are restricted to the class where they are defined."
    },
    {
      "question": "What access modifier makes members accessible from anywhere?",
      "options": [
        "private",
        "protected",
        "public",
        "internal"
      ],
      "correct": 2,
      "explanation": "Public members can be accessed from any part of the program."
    },
    {
      "question": "What access modifier allows access within the class and its subclasses?",
      "options": [
        "public",
        "private",
        "internal",
        "protected"
      ],
      "correct": 3,
      "explanation": "Protected members are accessible in the class and its derived classes."
    },
    {
      "question": "What methods provide controlled access to private data?",
      "options": [
        "Getters and setters",
        "Constructors",
        "Destructors",
        "Static methods"
      ],
      "correct": 0,
      "explanation": "Getters and setters allow controlled reading and writing of private attributes."
    },
    {
      "question": "What principle bundles data and methods together?",
      "options": [
        "Inheritance",
        "Polymorphism",
        "Encapsulation",
        "Abstraction"
      ],
      "correct": 2,
      "explanation": "Encapsulation wraps data and methods into a single unit."
    },
    {
      "question": "What is the practice of hiding internal implementation details called?",
      "options": [
        "Abstraction",
        "Information hiding",
        "Inheritance",
        "Polymorphism"
      ],
      "correct": 1,
      "explanation": "Information hiding restricts direct access to object internals."
    },
    {
      "question": "What type of method only retrieves but doesn't modify data?",
      "options": [
        "Setter",
        "Mutator",
        "Getter",
        "Constructor"
      ],
      "correct": 2,
      "explanation": "Getters return the value of private attributes without changing them."
    },
    {
      "question": "What type of method modifies private data?",
      "options": [
        "Getter",
        "Accessor",
        "Setter",
        "Observer"
      ],
      "correct": 2,
      "explanation": "Setters assign new values to private attributes with validation."
    },
    {
      "question": "What naming convention indicates a private member in Python?",
      "options": [
        "Single underscore prefix",
        "Double underscore prefix",
        "No prefix",
        "Hash prefix"
      ],
      "correct": 1,
      "explanation": "Double underscore prefix triggers name mangling for privacy in Python."
    },
    {
      "question": "What benefit does encapsulation provide?",
      "options": [
        "Faster execution",
        "Data protection",
        "More memory",
        "Simpler syntax"
      ],
      "correct": 1,
      "explanation": "Encapsulation protects data from unauthorized access and modification."
    }
  ]
}
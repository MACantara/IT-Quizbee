{
  "subtopic_id": "inheritance",
  "subtopic_name": "Inheritance",
  "mode": "finals",
  "difficulty": "difficult",
  "questions": [
    {
      "question": "What C++ feature resolves the diamond problem?",
      "answer": "virtual inheritance",
      "alternatives": [
        "virtual base class"
      ],
      "explanation": "Virtual inheritance ensures only one copy of base class exists.",
      "id": "inhe_inhe_d_finals_000"
    },
    {
      "question": "What principle states subclasses must be substitutable for base classes?",
      "answer": "Liskov Substitution Principle",
      "alternatives": [
        "LSP",
        "Liskov principle"
      ],
      "explanation": "LSP ensures derived classes maintain base class contracts.",
      "id": "inhe_inhe_d_finals_001"
    },
    {
      "question": "What technique creates inheritance relationships at runtime?",
      "answer": "delegation",
      "alternatives": [
        "object delegation"
      ],
      "explanation": "Delegation simulates inheritance by forwarding method calls.",
      "id": "inhe_inhe_d_finals_002"
    },
    {
      "question": "What inheritance approach uses has-a instead of is-a?",
      "answer": "composition",
      "alternatives": [
        "object composition"
      ],
      "explanation": "Composition builds complex objects from simpler ones.",
      "id": "inhe_inhe_d_finals_003"
    },
    {
      "question": "What allows Python to support multiple inheritance safely?",
      "answer": "MRO",
      "alternatives": [
        "Method Resolution Order",
        "method resolution order"
      ],
      "explanation": "MRO defines the order for searching inherited methods.",
      "id": "inhe_inhe_d_finals_004"
    },
    {
      "question": "What mechanism prevents method hiding in child classes?",
      "answer": "virtual functions",
      "alternatives": [
        "virtual methods",
        "virtualization"
      ],
      "explanation": "Virtual functions enable dynamic method resolution.",
      "id": "inhe_inhe_d_finals_005"
    },
    {
      "question": "What keyword makes methods inherit implementation in interfaces?",
      "answer": "default",
      "alternatives": [
        "default methods"
      ],
      "explanation": "Default methods in interfaces provide concrete implementations.",
      "id": "inhe_inhe_d_finals_006"
    },
    {
      "question": "What design pattern uses inheritance to define algorithm skeleton?",
      "answer": "template method",
      "alternatives": [
        "template method pattern"
      ],
      "explanation": "Template method defines steps while subclasses provide details.",
      "id": "inhe_inhe_d_finals_007"
    },
    {
      "question": "What term describes tight coupling in deep hierarchies?",
      "answer": "fragile base class",
      "alternatives": [
        "fragile base class problem"
      ],
      "explanation": "Changes to base classes can break derived classes.",
      "id": "inhe_inhe_d_finals_008"
    },
    {
      "question": "What technique allows interfaces to evolve without breaking implementations?",
      "answer": "default methods",
      "alternatives": [
        "defender methods"
      ],
      "explanation": "Default methods add functionality to interfaces without breaking code.",
      "id": "inhe_inhe_d_finals_009"
    }
  ]
}
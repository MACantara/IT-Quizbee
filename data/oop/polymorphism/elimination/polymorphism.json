{
  "subtopic_id": "polymorphism",
  "subtopic_name": "Polymorphism",
  "questions": [
    {
      "question": "What is polymorphism in OOP?",
      "options": [
        "The ability of objects to take many forms",
        "A way to hide data",
        "A method of creating objects",
        "A type of loop"
      ],
      "correct": 0,
      "explanation": "Polymorphism (from Greek meaning 'many forms') is the ability of objects of different classes to respond to the same method call in different ways. It allows one interface to be used for a general class of actions."
    },
    {
      "question": "What are the two main types of polymorphism?",
      "options": [
        "Static and Dynamic",
        "Compile-time and Runtime",
        "Method overloading and Method overriding",
        "All of the above"
      ],
      "correct": 3,
      "explanation": "All are correct ways to categorize polymorphism. Compile-time (static) polymorphism includes method overloading, while runtime (dynamic) polymorphism includes method overriding. These terms are often used interchangeably."
    },
    {
      "question": "What is method overloading?",
      "options": [
        "Having too many methods",
        "Multiple methods with the same name but different parameters",
        "Replacing a parent class method",
        "Calling a method multiple times"
      ],
      "correct": 1,
      "explanation": "Method overloading (compile-time polymorphism) allows multiple methods in the same class to have the same name but different parameter lists (different number, type, or order of parameters)."
    },
    {
      "question": "What is method overriding?",
      "options": [
        "Creating multiple methods with same name",
        "A child class providing a specific implementation of a method already defined in parent class",
        "Deleting a method",
        "Renaming a method"
      ],
      "correct": 1,
      "explanation": "Method overriding (runtime polymorphism) occurs when a child class provides its own implementation of a method that's already defined in its parent class, with the same signature."
    },
    {
      "question": "Which of the following is required for method overriding?",
      "options": [
        "Different method names",
        "Same method signature in parent and child class",
        "Different return types",
        "Private methods"
      ],
      "correct": 1,
      "explanation": "For method overriding, the child class method must have the same name, same parameters (signature), and compatible return type as the parent class method."
    },
    {
      "question": "What keyword is used in Java to indicate method overriding?",
      "options": [
        "@Override",
        "@Overload",
        "@Virtual",
        "@Polymorphic"
      ],
      "correct": 0,
      "explanation": "The @Override annotation in Java is used to indicate that a method is intended to override a method in the superclass. It's optional but recommended as it helps catch errors at compile time."
    },
    {
      "question": "What is runtime polymorphism also known as?",
      "options": [
        "Static binding",
        "Early binding",
        "Dynamic binding",
        "Fixed binding"
      ],
      "correct": 2,
      "explanation": "Runtime polymorphism is also called dynamic binding or late binding because the method to be executed is determined at runtime based on the actual object type, not the reference type."
    },
    {
      "question": "Can private methods be overridden?",
      "options": [
        "Yes, always",
        "No, private methods cannot be inherited or overridden",
        "Only in Java",
        "Only if made public"
      ],
      "correct": 1,
      "explanation": "Private methods cannot be overridden because they are not inherited by child classes. They are only accessible within the class where they're defined. Method overriding requires inheritance."
    },
    {
      "question": "What is covariant return type in method overriding?",
      "options": [
        "Return type must be exactly the same",
        "Return type can be a subclass of the parent method's return type",
        "Return type must be void",
        "Return type must be a primitive"
      ],
      "correct": 1,
      "explanation": "Covariant return types allow an overriding method to return a subtype (child class) of the type returned by the overridden method. This was introduced in Java 5 and provides more flexibility."
    },
    {
      "question": "What enables runtime polymorphism in Java?",
      "options": [
        "Abstract classes only",
        "Interfaces only",
        "Method overloading",
        "Inheritance and method overriding"
      ],
      "correct": 3,
      "explanation": "Runtime polymorphism in Java is achieved through inheritance (IS-A relationship) combined with method overriding. A parent class reference can point to a child class object and invoke overridden methods dynamically."
    }
  ],
  "mode": "elimination"
}
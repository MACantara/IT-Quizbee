{
  "subtopic_id": "oop_basics",
  "subtopic_name": "OOP Basics",
  "mode": "finals",
  "difficulty": "easy",
  "questions": [
    {
      "question": "What is object-oriented programming?",
      "answer": "Programming with objects and classes",
      "alternatives": [
        "OOP"
      ],
      "explanation": "OOP: organizing code around objects. Objects: instances of classes. Purpose: modularity, reusability. Paradigm: different from procedural. Benefits: organization, maintenance. Importance: modern standard."
    },
    {
      "question": "What is a class?",
      "answer": "Blueprint for objects",
      "alternatives": [
        "Class definition"
      ],
      "explanation": "Class: template for objects. Defines: attributes, methods. Instance: created from class. Memory: allocated at instantiation. Scope: class-level, instance-level. Importance: fundamental concept."
    },
    {
      "question": "What is an object?",
      "answer": "Instance of a class",
      "alternatives": [
        "Class instance"
      ],
      "explanation": "Object: concrete realization of class. Data: attributes/properties. Behavior: methods/functions. Lifetime: created and destroyed. Identity: each object unique. Importance: basic element."
    },
    {
      "question": "What is an attribute?",
      "answer": "Property of an object",
      "alternatives": [
        "Object property"
      ],
      "explanation": "Attribute: data variable in object. Types: primitive, reference. Access: dot notation. Scope: instance or class. Modification: changes object state. Importance: data storage."
    },
    {
      "question": "What is a method?",
      "answer": "Function within a class",
      "alternatives": [
        "Member function"
      ],
      "explanation": "Method: function inside class. Purpose: define behavior. Parameter: implicit self or this. Invocation: object.method(). Types: instance, class, static. Importance: behavior definition."
    },
    {
      "question": "What is encapsulation?",
      "answer": "Bundling data and methods together",
      "alternatives": [
        "Data hiding"
      ],
      "explanation": "Encapsulation: combine attributes, methods. Access: public, private, protected. Purpose: hide implementation details. Benefit: security, maintainability. Standard: best practice. Importance: fundamental principle."
    },
    {
      "question": "What is inheritance?",
      "answer": "Creating classes from other classes",
      "alternatives": [
        "Class extension"
      ],
      "explanation": "Inheritance: parent-child relationship. Extends: inherit properties, methods. Purpose: code reuse. Benefit: DRY principle. Types: single, multiple. Importance: key OOP feature."
    },
    {
      "question": "What is polymorphism?",
      "answer": "Same interface, different implementations",
      "alternatives": [
        "Many forms"
      ],
      "explanation": "Polymorphism: objects respond to same message differently. Types: compile-time, runtime. Benefit: flexibility. Example: method overloading, overriding. Importance: powerful feature."
    },
    {
      "question": "What is abstraction?",
      "answer": "Hiding complexity, showing essentials",
      "alternatives": [
        "Simplification"
      ],
      "explanation": "Abstraction: expose interface, hide implementation. Purpose: simplify, reduce complexity. Example: abstract classes, interfaces. Benefit: easier to use. Importance: design principle."
    },
    {
      "question": "What is a constructor?",
      "answer": "Method to initialize objects",
      "alternatives": [
        "Initialization method"
      ],
      "explanation": "Constructor: called when creating object. Purpose: set initial values. Name: same as class. Called: automatically. Parameters: optional. Importance: object setup."
    }
  ]
}
{
  "subtopic_id": "polymorphism",
  "subtopic_name": "Polymorphism",
  "mode": "finals",
  "difficulty": "difficult",
  "questions": [
    {
      "question": "What is the visitor pattern?",
      "answer": "Separate operations from object structure",
      "alternatives": [
        "Behavioral pattern"
      ],
      "explanation": "Visitor: encapsulates operations. Purpose: add operations without changing objects. Pattern: double dispatch. Example: compilers, rendering. Benefit: flexibility. Complexity: requires interface. Importance: design pattern."
    },
    {
      "question": "What is double dispatch?",
      "answer": "Method selection based on two types",
      "alternatives": [
        "Multiple dispatch"
      ],
      "explanation": "Dispatch: first call, runtime selects. Method: second call based on type. Purpose: visitor pattern. Example: accept(visitor) then visitor.visit(this). Benefit: type-safe operations. Importance: advanced technique."
    },
    {
      "question": "What is the strategy pattern?",
      "answer": "Encapsulate interchangeable algorithms",
      "alternatives": [
        "Behavioral pattern"
      ],
      "explanation": "Strategy: define algorithm family. Purpose: make algorithms interchangeable. Implementation: interface implementations. Example: sorting algorithms. Benefit: runtime selection. Importance: design pattern."
    },
    {
      "question": "What is template method pattern?",
      "answer": "Define algorithm skeleton in base",
      "alternatives": [
        "Behavioral pattern"
      ],
      "explanation": "Template: base class defines steps. Hooks: subclasses override specific steps. Purpose: reuse algorithm structure. Example: frameworks. Benefit: consistency. Importance: design pattern."
    },
    {
      "question": "What is the adapter pattern?",
      "answer": "Convert interface to another",
      "alternatives": [
        "Structural pattern"
      ],
      "explanation": "Adapter: wraps incompatible interface. Purpose: make classes compatible. Implementation: wrapper class. Example: legacy code integration. Benefit: reuse without modification. Importance: design pattern."
    },
    {
      "question": "What is the decorator pattern?",
      "answer": "Add behavior to object dynamically",
      "alternatives": [
        "Structural pattern"
      ],
      "explanation": "Decorator: wraps object. Purpose: extend functionality. Alternative: inheritance. Benefit: flexible combination. Example: streams, UI components. Importance: design pattern."
    },
    {
      "question": "What is the observer pattern?",
      "answer": "Notify multiple observers of change",
      "alternatives": [
        "Behavioral pattern"
      ],
      "explanation": "Observer: registered for events. Notified: when state changes. Pattern: publish-subscribe. Example: UI event handling. Benefit: loose coupling. Importance: design pattern."
    },
    {
      "question": "What is the command pattern?",
      "answer": "Encapsulate request as object",
      "alternatives": [
        "Behavioral pattern"
      ],
      "explanation": "Command: represents action. Purpose: queue, undo, redo. Implementation: command objects. Example: button click handling. Benefit: separation of concerns. Importance: design pattern."
    },
    {
      "question": "What is the state pattern?",
      "answer": "Object changes behavior based on state",
      "alternatives": [
        "Behavioral pattern"
      ],
      "explanation": "State: encapsulates state-specific behavior. Purpose: simplify conditional logic. Implementation: state objects. Example: traffic light. Benefit: clear structure. Importance: design pattern."
    },
    {
      "question": "What is the chain of responsibility?",
      "answer": "Pass request along chain of handlers",
      "alternatives": [
        "Behavioral pattern"
      ],
      "explanation": "Chain: linked handlers. Request: processed or passed. Purpose: decouple sender from receivers. Example: logging, event handling. Benefit: flexibility. Importance: design pattern."
    }
  ]
}
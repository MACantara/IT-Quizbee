{
  "subtopic_id": "abstraction",
  "subtopic_name": "Abstraction",
  "mode": "finals",
  "difficulty": "easy",
  "questions": [
    {
      "question": "What is abstraction?",
      "answer": "Hiding implementation, showing interface",
      "alternatives": [
        "Data hiding"
      ],
      "explanation": "Abstraction: simplified view. Complexity: hidden behind interface. Purpose: focus on essentials. Benefit: reduce complexity. Example: car operations. Importance: core principle."
    },
    {
      "question": "What is an abstract class?",
      "answer": "Cannot be instantiated directly",
      "alternatives": [
        "Incomplete class"
      ],
      "explanation": "Abstract: defines template. Instantiation: not allowed. Purpose: enforce subclass implementation. Methods: can be abstract or concrete. Importance: abstraction mechanism."
    },
    {
      "question": "What is an abstract method?",
      "answer": "Method with no implementation",
      "alternatives": [
        "Unimplemented method"
      ],
      "explanation": "Method: declares signature only. Body: empty, semicolon instead. Subclasses: must implement. Purpose: enforce contract. Language: Java. Importance: interface."
    },
    {
      "question": "What is an interface?",
      "answer": "Pure contract for methods",
      "alternatives": [
        "Method contract"
      ],
      "explanation": "Interface: methods only (no state). Purpose: define capability. Implementation: class implements. Multiple: class implements many. Benefit: loose coupling. Importance: abstraction mechanism."
    },
    {
      "question": "What does 'implements' keyword do?",
      "answer": "Class agrees to implement interface",
      "alternatives": [
        "Interface implementation"
      ],
      "explanation": "implements: declares interface usage. Requirement: implement all methods. Benefit: forces interface. Example: class Dog implements Animal. Importance: implementation."
    },
    {
      "question": "What does 'extends' keyword do?",
      "answer": "Class inherits from abstract class",
      "alternatives": [
        "Inheritance"
      ],
      "explanation": "extends: declares inheritance. Hierarchy: parent-child. Purpose: reuse, extend. Requirement: implement abstract methods. Example: class Dog extends Animal. Importance: inheritance."
    },
    {
      "question": "What is a concrete class?",
      "answer": "Can be instantiated directly",
      "alternatives": [
        "Implemented class"
      ],
      "explanation": "Concrete: fully implemented. Instantiation: allowed. Purpose: usable class. Methods: all have body. Inheritance: typically extends abstract. Importance: implementation."
    },
    {
      "question": "What is an access modifier?",
      "answer": "Controls visibility of class members",
      "alternatives": [
        "Visibility control"
      ],
      "explanation": "Modifiers: public, private, protected. Public: accessible everywhere. Private: class only. Protected: same package. Purpose: encapsulation. Importance: access control."
    },
    {
      "question": "What is encapsulation?",
      "answer": "Bundle data with methods, control access",
      "alternatives": [
        "Data hiding"
      ],
      "explanation": "Encapsulation: group related items. Purpose: hide internals. Methods: provide controlled access. Benefit: prevent misuse. Example: getters/setters. Importance: security."
    },
    {
      "question": "What is a facade?",
      "answer": "Simplified interface to complex system",
      "alternatives": [
        "Simple wrapper"
      ],
      "explanation": "Facade: hides complexity. Purpose: easier usage. Implementation: wrapper class. Benefit: simpler API. Example: frameworks. Importance: design pattern."
    }
  ]
}
{
  "subtopic_id": "inheritance",
  "subtopic_name": "Inheritance",
  "mode": "finals",
  "difficulty": "easy",
  "questions": [
    {
      "question": "What is inheritance?",
      "answer": "Creating classes from other classes",
      "alternatives": [
        "Class hierarchy"
      ],
      "explanation": "Inheritance: parent-child relationship. Extends: inherit properties, methods. Purpose: code reuse. Benefit: DRY principle. Types: single, multiple. Importance: key OOP feature."
    },
    {
      "question": "What is a parent class?",
      "answer": "Class being inherited from",
      "alternatives": [
        "Base class"
      ],
      "explanation": "Parent: provides attributes, methods. Child: extends parent. Inheritance: passes down. Purpose: reuse. Hierarchy: defines structure. Importance: inheritance source."
    },
    {
      "question": "What is a child class?",
      "answer": "Class inheriting from parent",
      "alternatives": [
        "Derived class"
      ],
      "explanation": "Child: extends parent class. Inherits: attributes, methods. Overrides: can change behavior. Adds: own functionality. Purpose: specialization. Importance: inheritance target."
    },
    {
      "question": "What is a superclass?",
      "answer": "Class from which others inherit",
      "alternatives": [
        "Parent class"
      ],
      "explanation": "Superclass: provides base functionality. Methods: can override. Variables: inherited by subclasses. Purpose: shared behavior. Importance: inheritance hierarchy."
    },
    {
      "question": "What is a subclass?",
      "answer": "Class inheriting from superclass",
      "alternatives": [
        "Child class"
      ],
      "explanation": "Subclass: inherits from superclass. Extends: adds functionality. Specializes: parent behavior. Purpose: specific implementation. Importance: inheritance hierarchy."
    },
    {
      "question": "What is the extends keyword?",
      "answer": "Creates inheritance relationship",
      "alternatives": [
        "Inheritance syntax"
      ],
      "explanation": "extends: creates subclass. Syntax: class Child extends Parent. Effect: inherits all public, protected members. Language: Java. Importance: inheritance mechanism."
    },
    {
      "question": "What is single inheritance?",
      "answer": "Child has one parent",
      "alternatives": [
        "Linear hierarchy"
      ],
      "explanation": "Inheritance: one parent class. Simplest: easiest to understand. Hierarchy: linear. Languages: most support. Benefits: clarity, no conflicts. Importance: common pattern."
    },
    {
      "question": "What is multiple inheritance?",
      "answer": "Child has multiple parents",
      "alternatives": [
        "Multiple parents"
      ],
      "explanation": "Inheritance: from multiple classes. Benefit: combine functionality. Problem: diamond problem. Languages: C++ supports, Java doesn't. Alternative: interfaces. Importance: complex pattern."
    },
    {
      "question": "What is the diamond problem?",
      "answer": "Ambiguity with multiple inheritance",
      "alternatives": [
        "Method conflict"
      ],
      "explanation": "Problem: two parents, same method. Which: to call? Caused by: multiple inheritance. Solution: virtual inheritance, interfaces. Language: C++ has virtual. Importance: inheritance challenge."
    },
    {
      "question": "What is a constructor in inheritance?",
      "answer": "Initializing parent and child",
      "alternatives": [
        "Constructor call chain"
      ],
      "explanation": "Constructor: called automatically. Order: parent first, then child. super(): call parent constructor. Purpose: initialize both classes. Importance: object setup."
    }
  ]
}
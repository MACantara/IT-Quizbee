{
  "subtopic_id": "sdlc",
  "subtopic_name": "Software Development Life Cycle",
  "mode": "finals",
  "difficulty": "average",
  "questions": [
    {
      "question": "The SDLC model that uses prototyping to refine requirements iteratively.",
      "answer": "Incremental Model",
      "alternatives": [
        "Incremental",
        "Iterative Model"
      ],
      "explanation": "The Incremental Model develops software in small increments, allowing requirements to be refined with each iteration.",
      "id": "sdlc_sdlc_a_finals_000"
    },
    {
      "question": "The document that formally defines what the software system will do.",
      "answer": "Software Requirements Specification",
      "alternatives": [
        "SRS",
        "Requirements Document"
      ],
      "explanation": "SRS is a comprehensive document detailing functional and non-functional requirements of the software system.",
      "id": "sdlc_sdlc_a_finals_001"
    },
    {
      "question": "The type of testing that verifies individual components work correctly in isolation.",
      "answer": "Unit Testing",
      "alternatives": [
        "Component Testing"
      ],
      "explanation": "Unit testing validates that individual code units function correctly before integration.",
      "id": "sdlc_sdlc_a_finals_002"
    },
    {
      "question": "The type of testing that checks if integrated components work together properly.",
      "answer": "Integration Testing",
      "alternatives": [
        "Interface Testing"
      ],
      "explanation": "Integration testing verifies that different modules or services interact correctly when combined.",
      "id": "sdlc_sdlc_a_finals_003"
    },
    {
      "question": "The type of testing where real users evaluate the software before final release.",
      "answer": "User Acceptance Testing",
      "alternatives": [
        "UAT",
        "Acceptance Testing"
      ],
      "explanation": "UAT confirms the software meets business requirements and is ready for production from the user's perspective.",
      "id": "sdlc_sdlc_a_finals_004"
    },
    {
      "question": "The process of moving software from development to production environments.",
      "answer": "Release Management",
      "alternatives": [
        "Deployment Process"
      ],
      "explanation": "Release management coordinates the planning, scheduling, and controlling of software releases through different environments.",
      "id": "sdlc_sdlc_a_finals_005"
    },
    {
      "question": "The SDLC phase where feasibility studies and project planning occur.",
      "answer": "Planning",
      "alternatives": [
        "Initiation",
        "Feasibility Study"
      ],
      "explanation": "Planning involves assessing project feasibility, defining scope, and creating project plans before development begins.",
      "id": "sdlc_sdlc_a_finals_006"
    },
    {
      "question": "The type of maintenance that fixes bugs discovered after deployment.",
      "answer": "Corrective Maintenance",
      "alternatives": [
        "Bug Fixing"
      ],
      "explanation": "Corrective maintenance addresses defects and errors found in production software.",
      "id": "sdlc_sdlc_a_finals_007"
    },
    {
      "question": "The type of maintenance that adds new features based on user requests.",
      "answer": "Perfective Maintenance",
      "alternatives": [
        "Enhancement"
      ],
      "explanation": "Perfective maintenance improves functionality by adding new features or enhancing existing ones.",
      "id": "sdlc_sdlc_a_finals_008"
    },
    {
      "question": "The type of maintenance that updates software to work in changed environments.",
      "answer": "Adaptive Maintenance",
      "alternatives": [
        "Environmental Maintenance"
      ],
      "explanation": "Adaptive maintenance modifies software to accommodate changes in operating systems, hardware, or external systems.",
      "id": "sdlc_sdlc_a_finals_009"
    }
  ]
}
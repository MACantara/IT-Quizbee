{
  "subtopic_id": "abstraction",
  "subtopic_name": "Abstraction",
  "mode": "finals",
  "difficulty": "average",
  "questions": [
    {
      "question": "What is abstraction in OOP?",
      "answer": "Hiding implementation details and showing only essential features",
      "alternatives": [],
      "explanation": "Abstraction is the process of hiding implementation details and exposing only the necessary functionality to the user. It focuses on what an object does rather than how it does it."
    },
    {
      "question": "Which of the following is used to achieve abstraction in Java?",
      "answer": "Abstract classes and interfaces",
      "alternatives": [],
      "explanation": "In Java, abstraction is achieved using abstract classes and interfaces. Both allow you to define method signatures without implementation, forcing subclasses to provide the details."
    },
    {
      "question": "Can you create an instance of an abstract class?",
      "answer": "No, abstract classes cannot be instantiated",
      "alternatives": [],
      "explanation": "Abstract classes cannot be instantiated directly. They are meant to be extended by subclasses that provide concrete implementations of the abstract methods."
    },
    {
      "question": "What keyword is used to declare an abstract class in Java?",
      "answer": "abstract",
      "alternatives": [],
      "explanation": "The 'abstract' keyword is used to declare an abstract class in Java. Abstract classes can contain both abstract and concrete methods."
    },
    {
      "question": "What is an abstract method?",
      "answer": "A method without a body, only declaration",
      "alternatives": [],
      "explanation": "An abstract method is a method declared without an implementation (no body). It only has a method signature and must be implemented by non-abstract child classes."
    },
    {
      "question": "Can an abstract class have concrete (non-abstract) methods?",
      "answer": "Yes, abstract classes can have both abstract and concrete methods",
      "alternatives": [],
      "explanation": "Yes, abstract classes can contain both abstract methods (without implementation) and concrete methods (with implementation), providing flexibility in design."
    },
    {
      "question": "What is the main difference between abstraction and encapsulation?",
      "answer": "Abstraction hides complexity, encapsulation hides data",
      "alternatives": [],
      "explanation": "Abstraction focuses on hiding implementation complexity and showing only essential features, while encapsulation focuses on hiding data (information hiding) by bundling it with methods and using access modifiers."
    },
    {
      "question": "In Java, can an abstract class have constructors?",
      "answer": "Yes, abstract classes can have constructors",
      "alternatives": [],
      "explanation": "Yes, abstract classes can have constructors. These constructors are called when a subclass is instantiated, useful for initializing common fields."
    },
    {
      "question": "What happens if a class extends an abstract class but doesn't implement all abstract methods?",
      "answer": "The class must also be declared abstract",
      "alternatives": [],
      "explanation": "If a class extends an abstract class but doesn't implement all abstract methods, it must also be declared abstract. Only concrete classes must implement all inherited abstract methods."
    },
    {
      "question": "Which provides a higher level of abstraction: abstract class or interface?",
      "answer": "Interface provides 100% abstraction (before Java 8)",
      "alternatives": [],
      "explanation": "Interfaces traditionally provide 100% abstraction (all methods were abstract before Java 8). Abstract classes provide 0-100% abstraction as they can have both abstract and concrete methods."
    }
  ]
}
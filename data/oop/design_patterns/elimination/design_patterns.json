{
  "subtopic_id": "design_patterns",
  "subtopic_name": "Design Patterns",
  "mode": "elimination",
  "questions": [
    {
      "question": "What pattern ensures only one instance exists?",
      "options": [
        "Factory",
        "Singleton",
        "Prototype",
        "Builder"
      ],
      "correct": 1,
      "explanation": "Singleton pattern restricts instantiation to one object.",
      "id": "oop_des_pat_elim_000"
    },
    {
      "question": "What pattern creates objects without specifying exact classes?",
      "options": [
        "Factory",
        "Singleton",
        "Adapter",
        "Observer"
      ],
      "correct": 0,
      "explanation": "Factory pattern delegates object creation.",
      "id": "oop_des_pat_elim_001"
    },
    {
      "question": "What pattern adds functionality without modifying classes?",
      "options": [
        "Facade",
        "Proxy",
        "Decorator",
        "Bridge"
      ],
      "correct": 2,
      "explanation": "Decorator pattern wraps objects to add behavior.",
      "id": "oop_des_pat_elim_002"
    },
    {
      "question": "What pattern provides simplified interface to complex systems?",
      "options": [
        "Facade",
        "Adapter",
        "Proxy",
        "Bridge"
      ],
      "correct": 0,
      "explanation": "Facade pattern hides complexity behind simple interface.",
      "id": "oop_des_pat_elim_003"
    },
    {
      "question": "What pattern makes incompatible interfaces work together?",
      "options": [
        "Bridge",
        "Adapter",
        "Decorator",
        "Composite"
      ],
      "correct": 1,
      "explanation": "Adapter pattern converts one interface to another.",
      "id": "oop_des_pat_elim_004"
    },
    {
      "question": "What pattern notifies multiple objects of state changes?",
      "options": [
        "Strategy",
        "Command",
        "Observer",
        "Mediator"
      ],
      "correct": 2,
      "explanation": "Observer pattern implements subscription mechanism.",
      "id": "oop_des_pat_elim_005"
    },
    {
      "question": "What pattern encapsulates algorithms as objects?",
      "options": [
        "Strategy",
        "Command",
        "State",
        "Template"
      ],
      "correct": 0,
      "explanation": "Strategy pattern defines family of algorithms.",
      "id": "oop_des_pat_elim_006"
    },
    {
      "question": "What pattern clones existing objects?",
      "options": [
        "Factory",
        "Builder",
        "Prototype",
        "Singleton"
      ],
      "correct": 2,
      "explanation": "Prototype pattern creates copies of objects.",
      "id": "oop_des_pat_elim_007"
    },
    {
      "question": "What pattern constructs complex objects step by step?",
      "options": [
        "Factory",
        "Builder",
        "Prototype",
        "Singleton"
      ],
      "correct": 1,
      "explanation": "Builder pattern separates construction from representation.",
      "id": "oop_des_pat_elim_008"
    },
    {
      "question": "What pattern encapsulates requests as objects?",
      "options": [
        "Command",
        "Strategy",
        "Observer",
        "State"
      ],
      "correct": 0,
      "explanation": "Command pattern turns requests into standalone objects.",
      "id": "oop_des_pat_elim_009"
    }
  ]
}
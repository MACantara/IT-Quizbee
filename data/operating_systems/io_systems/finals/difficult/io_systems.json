{
  "subtopic_id": "io_systems",
  "subtopic_name": "I/O Systems",
  "mode": "finals",
  "difficulty": "difficult",
  "questions": [
    {
      "question": "What technique anticipates needed I/O operations?",
      "answer": "I/O prefetching",
      "alternatives": ["Read-ahead"],
      "explanation": "I/O prefetching loads data before explicit requests. It improves sequential access performance."
    },
    {
      "question": "What schedules I/O for minimal seek time?",
      "answer": "I/O scheduler",
      "alternatives": ["Disk scheduler"],
      "explanation": "I/O schedulers reorder requests to minimize seek times. They balance fairness and performance."
    },
    {
      "question": "What combines small writes into larger operations?",
      "answer": "Write coalescing",
      "alternatives": ["Write combining"],
      "explanation": "Write coalescing merges adjacent writes. It reduces total I/O operations."
    },
    {
      "question": "What RAID level provides both striping and mirroring?",
      "answer": "RAID 10",
      "alternatives": ["RAID 1+0"],
      "explanation": "RAID 10 combines RAID 1 and RAID 0. It offers both redundancy and performance."
    },
    {
      "question": "What technique bypasses kernel buffering?",
      "answer": "Direct I/O",
      "alternatives": [],
      "explanation": "Direct I/O transfers data straight between devices and user space. It avoids kernel buffer copies."
    },
    {
      "question": "What multiplexes I/O on multiple descriptors?",
      "answer": "Select",
      "alternatives": ["Poll", "Epoll"],
      "explanation": "Select monitors multiple file descriptors for I/O readiness. It enables efficient multiplexing."
    },
    {
      "question": "What Linux mechanism provides asynchronous I/O?",
      "answer": "io_uring",
      "alternatives": ["AIO"],
      "explanation": "io_uring provides efficient asynchronous I/O. It uses shared ring buffers for communication."
    },
    {
      "question": "What optimizes disk writes by delaying and reordering?",
      "answer": "Write-back caching",
      "alternatives": [],
      "explanation": "Write-back caching acknowledges writes before disk completion. It improves performance but risks data loss."
    },
    {
      "question": "What ensures writes complete before acknowledging?",
      "answer": "Write-through caching",
      "alternatives": [],
      "explanation": "Write-through caching waits for disk confirmation. It sacrifices performance for durability."
    },
    {
      "question": "What technique removes duplicated disk blocks?",
      "answer": "Deduplication",
      "alternatives": [],
      "explanation": "Deduplication stores identical blocks once. It saves storage space."
    }
  ]
}
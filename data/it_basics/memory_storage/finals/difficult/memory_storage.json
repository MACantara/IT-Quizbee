{
  "subtopic_id": "memory_storage",
  "subtopic_name": "Memory & Storage",
  "mode": "finals",
  "difficulty": "difficult",
  "questions": [
    {
      "question": "What is a memory controller?",
      "answer": "Manages memory access",
      "alternatives": [
        "Memory interface controller"
      ],
      "explanation": "Memory controller: coordinates memory operations. Location: processor or chipset. Function: timing, refresh, arbitration. Importance: hidden from software. Bandwidth: critical performance factor."
    },
    {
      "question": "What is ECC memory?",
      "answer": "Error-correcting code memory",
      "alternatives": [
        "Fault-tolerant RAM"
      ],
      "explanation": "ECC: detects and corrects errors. Uses: servers, data centers. Overhead: ~10% capacity. Cost: higher than non-ECC. Reliability: enterprise requirement. Consumer: rarely used in desktops."
    },
    {
      "question": "What is memory refresh?",
      "answer": "Periodic recharging of DRAM",
      "alternatives": [
        "Refresh cycle"
      ],
      "explanation": "DRAM refresh: periodic charge maintenance. Purpose: prevent data loss. Frequency: thousands per second. Automatic: hardware handles. Bandwidth: uses portion of memory. Technology: physical limitation."
    },
    {
      "question": "What is the memory hierarchy?",
      "answer": "Levels of memory storage",
      "alternatives": [
        "Memory pyramid"
      ],
      "explanation": "Memory hierarchy: registers, L1-3 cache, RAM, storage. Purpose: balance speed/capacity. Trade-off: faster is smaller. Principle: temporal/spatial locality. Optimization: reduces fetch time."
    },
    {
      "question": "What is a page fault?",
      "answer": "Missing virtual memory access",
      "alternatives": [
        "Page missing event"
      ],
      "explanation": "Page fault: VM miss, disk fetch needed. Impact: serious performance hit. Handling: OS loads from storage. Prevention: minimize page faults. Optimization: prefetching helps."
    },
    {
      "question": "What is a memory barrier?",
      "answer": "Instruction synchronization point",
      "alternatives": [
        "Memory fence"
      ],
      "explanation": "Memory barrier: synchronizes memory operations. Purpose: multi-threaded programming. Types: acquire, release, full. Importance: correctness critical. Performance: can impact speed."
    },
    {
      "question": "What is persistence?",
      "answer": "Data survives power-off",
      "alternatives": [
        "Non-volatile storage"
      ],
      "explanation": "Persistence: data retained after shutdown. Storage: persistent, RAM: volatile. Database: ensures durability. Techniques: fsync, WAL, journaling. Importance: data integrity essential."
    },
    {
      "question": "What is a storage tier?",
      "answer": "Categorized storage levels",
      "alternatives": [
        "Storage hierarchy"
      ],
      "explanation": "Storage tiers: SSD/HDD/tape by speed. Principle: frequent data on SSD. Archive: cold data on tape. Automatic: tiering software moves data. Cost: balances performance/price."
    },
    {
      "question": "What is NAND flash?",
      "answer": "Flash memory type used in SSDs",
      "alternatives": [
        "SSD technology"
      ],
      "explanation": "NAND: transistor type for memory. Cells: single, MLC, TLC, QLC types. Capacity: more cells per transistor. Speed: reliable, fast. Dominance: primary SSD technology. Alternative: NOR less common."
    },
    {
      "question": "What is QLC NAND?",
      "answer": "Four-level NAND flash cells",
      "alternatives": [
        "Quad-level cell"
      ],
      "explanation": "QLC: stores 4 bits per cell. Capacity: highest per transistor. Cost: lowest per GB. Speed: slower than TLC. Endurance: lower write cycles. Trade-off: capacity for performance."
    }
  ]
}
{
  "subtopic_id": "software_design",
  "subtopic_name": "Software Design",
  "mode": "finals",
  "difficulty": "average",
  "questions": [
    {
      "question": "What is software design?",
      "answer": "The process of defining the architecture, components, and interfaces of a system",
      "alternatives": [],
      "explanation": "Software design is the process of defining the architecture, components, interfaces, and other characteristics of a system. It transforms requirements into a blueprint for constructing software."
    },
    {
      "question": "What is software architecture?",
      "answer": "The high-level structure of a software system defining major components and their relationships",
      "alternatives": [],
      "explanation": "Software architecture is the high-level structure of a software system, defining major components (modules, subsystems), their responsibilities, and their interactions. It provides the fundamental organization of the system."
    },
    {
      "question": "What is modular design?",
      "answer": "Dividing software into separate, independent modules with specific functions",
      "alternatives": [],
      "explanation": "Modular design divides software into separate, independent modules, each responsible for a specific function. This improves maintainability, reusability, and allows parallel development. Modules have well-defined interfaces."
    },
    {
      "question": "What is cohesion in software design?",
      "answer": "The degree to which elements within a module belong together",
      "alternatives": [],
      "explanation": "Cohesion measures how closely related and focused the responsibilities of a single module are. High cohesion (good) means a module does one thing well. Low cohesion (bad) means a module has unrelated responsibilities."
    },
    {
      "question": "What is coupling in software design?",
      "answer": "The degree of interdependence between modules",
      "alternatives": [],
      "explanation": "Coupling measures the degree of interdependence between modules. Loose coupling (good) means modules are independent. Tight coupling (bad) means modules are highly dependent, making changes difficult and reducing reusability."
    },
    {
      "question": "What is the Model-View-Controller (MVC) pattern?",
      "answer": "An architectural pattern separating data, presentation, and logic",
      "alternatives": [],
      "explanation": "MVC separates application into three interconnected components: Model (data and business logic), View (presentation/UI), and Controller (handles input and updates model/view). This separation improves organization and maintainability."
    },
    {
      "question": "What is layered architecture?",
      "answer": "Organizing system into horizontal layers, each providing services to the layer above",
      "alternatives": [],
      "explanation": "Layered architecture organizes a system into hierarchical layers (e.g., Presentation, Business Logic, Data Access, Database). Each layer depends only on layers below it. Common examples: 3-tier and n-tier architectures."
    },
    {
      "question": "What is the client-server architecture?",
      "answer": "A distributed architecture where clients request services from servers",
      "alternatives": [],
      "explanation": "Client-server architecture is a distributed system where client processes request services and server processes provide them. Clients initiate requests; servers respond. Examples: web applications, email systems, databases."
    },
    {
      "question": "What is a microservices architecture?",
      "answer": "An architectural style where applications are composed of small, independent services",
      "alternatives": [],
      "explanation": "Microservices architecture structures an application as a collection of loosely coupled, independently deployable services. Each service is small, focused on a specific business capability, and communicates via APIs. Contrasts with monolithic architecture."
    },
    {
      "question": "What is the difference between high-level and low-level design?",
      "answer": "High-level defines overall architecture; low-level defines detailed component implementation",
      "alternatives": [],
      "explanation": "High-level design (HLD) defines system architecture, major components, and their interactions. Low-level design (LLD) provides detailed specifications for each component, including algorithms, data structures, and interfaces for implementation."
    }
  ]
}
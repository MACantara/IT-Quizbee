{
  "subtopic_id": "inheritance",
  "subtopic_name": "Inheritance",
  "questions": [
    {
      "question": "What is inheritance in object-oriented programming?",
      "options": [
        "A mechanism where a class acquires properties and behaviors from another class",
        "A way to hide data",
        "A method to create objects",
        "A technique to delete objects"
      ],
      "correct": 0,
      "explanation": "Inheritance is a fundamental OOP concept that allows a class (child/derived class) to inherit attributes and methods from another class (parent/base class), promoting code reusability."
    },
    {
      "question": "Which class provides properties and methods to be inherited?",
      "options": [
        "Child class",
        "Derived class",
        "Parent class",
        "Sibling class"
      ],
      "correct": 2,
      "explanation": "The parent class (also called base class or superclass) is the class that provides properties and methods to be inherited by child classes."
    },
    {
      "question": "What keyword is typically used in Java to inherit from a class?",
      "options": [
        "inherits",
        "extends",
        "implements",
        "derives"
      ],
      "correct": 1,
      "explanation": "In Java, the 'extends' keyword is used to establish an inheritance relationship between a child class and a parent class."
    },
    {
      "question": "What type of inheritance involves one class inheriting from multiple classes directly?",
      "options": [
        "Single inheritance",
        "Multilevel inheritance",
        "Multiple inheritance",
        "Hierarchical inheritance"
      ],
      "correct": 2,
      "explanation": "Multiple inheritance occurs when a class inherits from more than one parent class. Note that some languages like Java don't support multiple inheritance with classes (only with interfaces)."
    },
    {
      "question": "Which of the following is NOT a benefit of inheritance?",
      "options": [
        "Code reusability",
        "Method overriding",
        "Data hiding",
        "Increased memory usage"
      ],
      "correct": 3,
      "explanation": "Increased memory usage is not a benefit; it's potentially a drawback. The benefits of inheritance include code reusability, method overriding, and establishing relationships between classes."
    },
    {
      "question": "What is multilevel inheritance?",
      "options": [
        "Multiple classes inheriting from one parent",
        "One class inheriting from multiple parents",
        "A class inheriting from another class which is already a derived class",
        "No inheritance at all"
      ],
      "correct": 2,
      "explanation": "Multilevel inheritance is when a class inherits from a derived class, creating a chain of inheritance (e.g., C inherits from B, B inherits from A)."
    },
    {
      "question": "In Python, which function is used to call a parent class's constructor?",
      "options": [
        "parent()",
        "super()",
        "base()",
        "inherit()"
      ],
      "correct": 1,
      "explanation": "In Python, the super() function is used to call methods from the parent class, commonly used to invoke the parent's constructor (__init__)."
    },
    {
      "question": "What is the 'IS-A' relationship in inheritance?",
      "options": [
        "A class has another class as a member",
        "Two classes are siblings",
        "A derived class is a type of base class",
        "Classes are independent"
      ],
      "correct": 2,
      "explanation": "The 'IS-A' relationship describes inheritance where the derived class is a specialized version of the base class (e.g., Dog IS-A Animal)."
    },
    {
      "question": "Which access modifier in Java allows inherited members to be accessed by child classes?",
      "options": [
        "private",
        "public",
        "protected",
        "default"
      ],
      "correct": 2,
      "explanation": "The 'protected' access modifier allows members to be accessed within the same package and by subclasses (child classes), even if they're in different packages."
    },
    {
      "question": "What happens when a child class defines a method with the same signature as in the parent class?",
      "options": [
        "Compilation error",
        "Method overriding",
        "Method overloading",
        "Method hiding"
      ],
      "correct": 1,
      "explanation": "Method overriding occurs when a child class provides a specific implementation for a method that is already defined in its parent class with the same signature."
    }
  ],
  "mode": "elimination"
}
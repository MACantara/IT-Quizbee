{
  "subtopic_id": "maintenance",
  "subtopic_name": "Software Maintenance",
  "mode": "finals",
  "difficulty": "difficult",
  "questions": [
    {
      "question": "What pattern intercepts calls to legacy systems without modification?",
      "answer": "Strangler Fig Pattern",
      "alternatives": [
        "Strangler Pattern"
      ],
      "explanation": "Strangler Fig Pattern gradually replaces legacy systems by intercepting calls and routing to new implementations.",
      "id": "main_main_d_finals_000"
    },
    {
      "question": "What analyzes code complexity to predict maintenance effort?",
      "answer": "Complexity Analysis",
      "alternatives": [
        "Cyclomatic Complexity Analysis"
      ],
      "explanation": "Complexity Analysis measures code intricacy using metrics like cyclomatic complexity to estimate maintenance costs.",
      "id": "main_main_d_finals_001"
    },
    {
      "question": "What law states software complexity increases unless work is done to reduce it?",
      "answer": "Lehman's Law",
      "alternatives": [
        "Laws of Software Evolution"
      ],
      "explanation": "Lehman's Laws of Software Evolution describe how software systems evolve over time, including increasing complexity.",
      "id": "main_main_d_finals_002"
    },
    {
      "question": "What technique extracts reusable components from monolithic systems?",
      "answer": "Component Extraction",
      "alternatives": [
        "Service Extraction"
      ],
      "explanation": "Component Extraction identifies and isolates reusable parts from legacy monoliths for modernization.",
      "id": "main_main_d_finals_003"
    },
    {
      "question": "What process converts procedural code to object-oriented design?",
      "answer": "Object-Oriented Re-engineering",
      "alternatives": [
        "OO Re-engineering"
      ],
      "explanation": "Object-Oriented Re-engineering transforms procedural legacy code into object-oriented architecture.",
      "id": "main_main_d_finals_004"
    },
    {
      "question": "What metric calculates lines of code per defect?",
      "answer": "Defect Density",
      "alternatives": [],
      "explanation": "Defect Density measures the number of defects per thousand lines of code, indicating code quality.",
      "id": "main_main_d_finals_005"
    },
    {
      "question": "What strategy maintains multiple versions of software simultaneously?",
      "answer": "Parallel Maintenance",
      "alternatives": [],
      "explanation": "Parallel Maintenance involves supporting and fixing bugs across multiple active software versions.",
      "id": "main_main_d_finals_006"
    },
    {
      "question": "What technique mines historical data to predict maintenance needs?",
      "answer": "Predictive Maintenance",
      "alternatives": [],
      "explanation": "Predictive Maintenance analyzes patterns in historical data to anticipate and prevent future failures.",
      "id": "main_main_d_finals_007"
    },
    {
      "question": "What describes software no longer updated but still in use?",
      "answer": "End-of-Life Software",
      "alternatives": [
        "EOL Software"
      ],
      "explanation": "End-of-Life Software has reached the end of its support lifecycle with no further updates or patches.",
      "id": "main_main_d_finals_008"
    },
    {
      "question": "What architecture pattern enables gradual migration from monolith to microservices?",
      "answer": "Anti-Corruption Layer",
      "alternatives": [
        "ACL"
      ],
      "explanation": "Anti-Corruption Layer isolates legacy systems from new ones during migration, translating between different models.",
      "id": "main_main_d_finals_009"
    }
  ]
}
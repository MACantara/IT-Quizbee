{
  "subtopic_id": "sdlc",
  "subtopic_name": "Software Development Life Cycle",
  "mode": "finals",
  "difficulty": "difficult",
  "questions": [
    {
      "question": "What is the Software Development Life Cycle (SDLC)?",
      "answer": "A structured process for planning, creating, testing, and deploying software",
      "alternatives": [],
      "explanation": "The SDLC is a structured framework that defines tasks performed at each step in the software development process. It provides a systematic approach to developing software, ensuring quality and correctness."
    },
    {
      "question": "What are the typical phases of SDLC?",
      "answer": "Planning, Analysis, Design, Implementation, Testing, Deployment, Maintenance",
      "alternatives": [],
      "explanation": "Common SDLC phases include: Planning (define scope), Analysis (gather requirements), Design (architecture), Implementation (coding), Testing (verification), Deployment (release), and Maintenance (support). Different models may vary slightly."
    },
    {
      "question": "What is the Waterfall model?",
      "answer": "A sequential SDLC model where each phase must be completed before the next begins",
      "alternatives": [],
      "explanation": "The Waterfall model is a linear sequential approach where progress flows downward through phases: Requirements → Design → Implementation → Testing → Deployment → Maintenance. Each phase must be completed before moving to the next."
    },
    {
      "question": "What is the Agile model?",
      "answer": "An iterative SDLC model emphasizing flexibility and customer collaboration",
      "alternatives": [],
      "explanation": "Agile is an iterative and incremental approach that divides work into short iterations (sprints). It emphasizes customer collaboration, responding to change, working software, and continuous improvement. Examples: Scrum, Kanban, XP."
    },
    {
      "question": "What is the Spiral model?",
      "answer": "A risk-driven SDLC model combining iterative development with waterfall elements",
      "alternatives": [],
      "explanation": "The Spiral model combines iterative development with systematic aspects of the waterfall model. Each iteration (spiral) goes through planning, risk analysis, engineering, and evaluation. It emphasizes risk management."
    },
    {
      "question": "What is the V-Model?",
      "answer": "An extension of waterfall where testing phases correspond to development phases",
      "alternatives": [],
      "explanation": "The V-Model (Verification and Validation) is an extension of the waterfall model where each development phase has a corresponding testing phase. The left side shows development phases, the right side shows testing phases, forming a V shape."
    },
    {
      "question": "What is the Incremental model?",
      "answer": "Software is developed and delivered in increments, each adding new functionality",
      "alternatives": [],
      "explanation": "The Incremental model divides the product into builds where the system is developed in increments. Each increment adds more functionality. The first increment is often a core product, with subsequent increments adding features."
    },
    {
      "question": "What is the main advantage of the Waterfall model?",
      "answer": "Simple, easy to understand and manage with clear milestones",
      "alternatives": [],
      "explanation": "Waterfall's main advantages are simplicity, clear structure, well-defined stages and milestones, and comprehensive documentation. It works well for projects with stable, well-understood requirements."
    },
    {
      "question": "What is a major limitation of the Waterfall model?",
      "answer": "Inflexible to changing requirements and late discovery of issues",
      "alternatives": [],
      "explanation": "Waterfall's major limitation is inflexibility - it's difficult to accommodate changes once a phase is complete. Working software is produced late, and problems may not be discovered until testing phase, making fixes expensive."
    },
    {
      "question": "What is prototyping in SDLC?",
      "answer": "Creating a working model to refine requirements and design before full development",
      "alternatives": [],
      "explanation": "Prototyping creates a preliminary version of the system to visualize and refine requirements and design. It helps stakeholders understand the system early, validates requirements, and reduces risk. Can be throwaway or evolutionary."
    }
  ]
}
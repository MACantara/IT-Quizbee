{
  "subtopic_id": "design_patterns",
  "subtopic_name": "Design Patterns",
  "mode": "finals",
  "difficulty": "difficult",
  "questions": [
    {
      "question": "What pattern separates operations from object structure?",
      "answer": "visitor",
      "alternatives": ["visitor pattern"],
      "explanation": "Visitor adds operations without modifying classes."
    },
    {
      "question": "What pattern handles requests through chain of handlers?",
      "answer": "chain of responsibility",
      "alternatives": ["chain of responsibility pattern"],
      "explanation": "Chain of responsibility passes requests along handler chain."
    },
    {
      "question": "What pattern interprets sentences in a language?",
      "answer": "interpreter",
      "alternatives": ["interpreter pattern"],
      "explanation": "Interpreter evaluates grammar and expressions."
    },
    {
      "question": "What pattern coordinates complex object interactions?",
      "answer": "mediator",
      "alternatives": ["mediator pattern"],
      "explanation": "Mediator encapsulates object interactions."
    },
    {
      "question": "What anti-pattern creates unnecessary abstraction?",
      "answer": "golden hammer",
      "alternatives": ["gold plating"],
      "explanation": "Golden hammer applies same solution everywhere."
    },
    {
      "question": "What pattern allows undo operations?",
      "answer": "command",
      "alternatives": ["command pattern"],
      "explanation": "Command pattern stores operation history."
    },
    {
      "question": "What pattern creates objects based on templates?",
      "answer": "prototype",
      "alternatives": ["prototype pattern"],
      "explanation": "Prototype clones objects instead of creating new ones."
    },
    {
      "question": "What book popularized design patterns?",
      "answer": "Gang of Four",
      "alternatives": ["GoF", "Design Patterns"],
      "explanation": "Gang of Four book documented 23 design patterns."
    },
    {
      "question": "What pattern manages object lifecycle efficiently?",
      "answer": "object pool",
      "alternatives": ["object pool pattern"],
      "explanation": "Object pool reuses expensive objects."
    },
    {
      "question": "What pattern implements lazy initialization safely?",
      "answer": "double-checked locking",
      "alternatives": ["double checked locking"],
      "explanation": "Double-checked locking optimizes thread-safe singleton."
    }
  ]
}
{
  "subtopic_id": "pipelining",
  "subtopic_name": "Pipelining",
  "mode": "elimination",
  "questions": [
    {
      "question": "What is instruction pipelining?",
      "options": [
        "Storing instructions in a queue",
        "Overlapping execution of multiple instructions",
        "Executing instructions in reverse order",
        "Caching frequently used instructions"
      ],
      "correct": 1,
      "explanation": "Instruction pipelining divides instruction execution into stages, allowing multiple instructions to be processed simultaneously at different stages."
    },
    {
      "question": "How many stages are in a classic RISC pipeline?",
      "options": [
        "3",
        "5",
        "7",
        "10"
      ],
      "correct": 1,
      "explanation": "The classic RISC pipeline has 5 stages: Fetch, Decode, Execute, Memory, and Write-back."
    },
    {
      "question": "What is a pipeline hazard?",
      "options": [
        "A type of CPU cache",
        "A condition that prevents smooth pipeline execution",
        "A security vulnerability",
        "An overheating issue"
      ],
      "correct": 1,
      "explanation": "Pipeline hazards are situations that prevent the next instruction from executing in its designated clock cycle, causing stalls."
    },
    {
      "question": "What type of hazard occurs when an instruction depends on a previous instruction's result?",
      "options": [
        "Structural hazard",
        "Control hazard",
        "Data hazard",
        "Cache hazard"
      ],
      "correct": 2,
      "explanation": "Data hazards occur when an instruction needs data that hasn't been produced by a previous instruction yet."
    },
    {
      "question": "What is a pipeline stall?",
      "options": [
        "Speeding up instruction execution",
        "Pausing the pipeline to resolve a hazard",
        "Bypassing certain pipeline stages",
        "Executing instructions out of order"
      ],
      "correct": 1,
      "explanation": "A pipeline stall (or bubble) temporarily halts the pipeline to wait for a hazard to be resolved."
    },
    {
      "question": "What technique forwards results directly between pipeline stages?",
      "options": [
        "Branch prediction",
        "Data forwarding",
        "Cache prefetching",
        "Instruction reordering"
      ],
      "correct": 1,
      "explanation": "Data forwarding (or bypassing) passes results from one stage directly to another without waiting for write-back, reducing stalls."
    },
    {
      "question": "What causes a control hazard?",
      "options": [
        "Memory conflicts",
        "Register dependencies",
        "Branch instructions",
        "Cache misses"
      ],
      "correct": 2,
      "explanation": "Control hazards occur with branch instructions because the pipeline doesn't know which instruction to fetch next until the branch resolves."
    },
    {
      "question": "What does branch prediction attempt to do?",
      "options": [
        "Eliminate all branches",
        "Guess the outcome of branch instructions",
        "Delay branch execution",
        "Execute both paths simultaneously"
      ],
      "correct": 1,
      "explanation": "Branch prediction tries to guess whether a branch will be taken, allowing the pipeline to continue fetching instructions speculatively."
    },
    {
      "question": "What happens during the Fetch stage of a pipeline?",
      "options": [
        "Instruction is executed",
        "Instruction is retrieved from memory",
        "Result is written to register",
        "Instruction is decoded"
      ],
      "correct": 1,
      "explanation": "The Fetch stage retrieves the next instruction from memory using the program counter."
    },
    {
      "question": "What is the ideal speedup from a pipeline with N stages?",
      "options": [
        "N times faster",
        "NÂ² times faster",
        "2N times faster",
        "N/2 times faster"
      ],
      "correct": 0,
      "explanation": "Ideally, an N-stage pipeline can achieve N times speedup, though hazards and other factors reduce this in practice."
    }
  ]
}
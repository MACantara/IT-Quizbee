{
  "subtopic_id": "oop_basics",
  "subtopic_name": "OOP Basics",
  "mode": "finals",
  "difficulty": "difficult",
  "questions": [
    {
      "question": "What is composition?",
      "answer": "Objects containing other objects",
      "alternatives": [
        "Has-a relationship"
      ],
      "explanation": "Composition: objects as attributes. Purpose: build complex objects. Advantage: more flexible than inheritance. Example: Car has Engine. Difference: is-a vs has-a. Importance: design pattern."
    },
    {
      "question": "What is aggregation?",
      "answer": "Weak form of composition",
      "alternatives": [
        "Weak composition"
      ],
      "explanation": "Aggregation: contains objects with independent life. Difference: objects can exist independently. Lifetimes: separate. Example: Company has Employees. Use case: flexible relationships. Importance: design concept."
    },
    {
      "question": "What is the SOLID principle?",
      "answer": "Design principles for OOP",
      "alternatives": [
        "Design principles"
      ],
      "explanation": "SOLID: five principles (Single, Open/Closed, Liskov, Interface Segregation, Dependency Inversion). Purpose: maintainability, scalability. Application: architecture design. Benefit: better code quality. Importance: best practices."
    },
    {
      "question": "What is the Single Responsibility Principle?",
      "answer": "One reason to change",
      "alternatives": [
        "SRP"
      ],
      "explanation": "SRP: class should have one job. Purpose: maintainability. Benefit: easier to test, modify. Violation: multiple responsibilities. Example: separation of concerns. Importance: SOLID principle."
    },
    {
      "question": "What is the OpenClosed Principle?",
      "answer": "Open for extension, closed for modification",
      "alternatives": [
        "OCP"
      ],
      "explanation": "OCP: extend without modifying existing code. Methods: inheritance, composition. Benefit: stability, reusability. Example: abstract classes. Purpose: flexibility. Importance: SOLID principle."
    },
    {
      "question": "What is the Liskov Substitution Principle?",
      "answer": "Child can substitute parent",
      "alternatives": [
        "LSP"
      ],
      "explanation": "LSP: derived class usable where parent expected. Purpose: predictable substitution. Violation: breaks contract. Importance: inheritance correctness. Example: Square from Rectangle (wrong). Importance: SOLID principle."
    },
    {
      "question": "What is the Interface Segregation Principle?",
      "answer": "Many specific interfaces vs general",
      "alternatives": [
        "ISP"
      ],
      "explanation": "ISP: clients shouldn't depend on unused methods. Purpose: loose coupling. Benefit: flexibility. Example: separate interfaces for different capabilities. Violation: fat interfaces. Importance: SOLID principle."
    },
    {
      "question": "What is the Dependency Inversion Principle?",
      "answer": "Depend on abstractions, not concrete",
      "alternatives": [
        "DIP"
      ],
      "explanation": "DIP: high-level depends on abstractions. Purpose: reduce coupling. Method: dependency injection. Benefit: testability. Example: interfaces over concrete classes. Importance: SOLID principle."
    },
    {
      "question": "What is a design pattern?",
      "answer": "Reusable solution to common problem",
      "alternatives": [
        "Design solution"
      ],
      "explanation": "Pattern: proven approach. Purpose: solve recurring problems. Types: creational, structural, behavioral. Benefit: best practices. Documentation: standardized. Importance: design template."
    },
    {
      "question": "What is the Factory pattern?",
      "answer": "Creating objects without specifying classes",
      "alternatives": [
        "Object creation"
      ],
      "explanation": "Factory: encapsulates creation logic. Purpose: decouple creation from usage. Benefit: flexibility in object types. Example: factory method. Types: static, instance. Importance: creational pattern."
    }
  ]
}
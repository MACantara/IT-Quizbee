{
  "subtopic_id": "oop_basics",
  "subtopic_name": "OOP Basics",
  "mode": "finals",
  "difficulty": "average",
  "questions": [
    {
      "question": "What type of variable is shared among all instances of a class?",
      "answer": "class variable",
      "alternatives": ["static variable", "class attribute"],
      "explanation": "Class variables are shared by all objects of that class."
    },
    {
      "question": "What type of variable is unique to each object instance?",
      "answer": "instance variable",
      "alternatives": ["object variable", "instance attribute"],
      "explanation": "Instance variables hold data specific to each object."
    },
    {
      "question": "What type of method can be called without creating an instance?",
      "answer": "static method",
      "alternatives": ["class method"],
      "explanation": "Static methods belong to the class rather than instances."
    },
    {
      "question": "What is the implicit first parameter in Python instance methods?",
      "answer": "self",
      "alternatives": [],
      "explanation": "Self refers to the instance calling the method."
    },
    {
      "question": "What is the implicit first parameter in Java instance methods?",
      "answer": "this",
      "alternatives": [],
      "explanation": "This keyword references the current object instance."
    },
    {
      "question": "What are the four main principles of OOP?",
      "answer": "encapsulation, inheritance, polymorphism, abstraction",
      "alternatives": ["abstraction, encapsulation, inheritance, polymorphism"],
      "explanation": "These four pillars form the foundation of object-oriented programming."
    },
    {
      "question": "What mechanism allows a class to acquire properties from another class?",
      "answer": "inheritance",
      "alternatives": [],
      "explanation": "Inheritance enables code reuse by extending existing classes."
    },
    {
      "question": "What allows objects of different classes to be treated uniformly?",
      "answer": "polymorphism",
      "alternatives": [],
      "explanation": "Polymorphism enables a single interface to represent different types."
    },
    {
      "question": "What principle hides internal implementation details?",
      "answer": "encapsulation",
      "alternatives": ["data hiding"],
      "explanation": "Encapsulation bundles data and methods while restricting access."
    },
    {
      "question": "What focuses on essential features while hiding complexity?",
      "answer": "abstraction",
      "alternatives": [],
      "explanation": "Abstraction simplifies complex systems by exposing only relevant details."
    }
  ]
}
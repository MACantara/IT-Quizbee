{
  "subtopic_id": "web_frameworks",
  "subtopic_name": "Web Frameworks",
  "mode": "finals",
  "difficulty": "average",
  "questions": [
    {
      "question": "What provides HTTP abstraction?",
      "answer": "Request object",
      "alternatives": [
        "HTTP request"
      ],
      "explanation": "Request object abstracts HTTP. Properties: method (GET, POST), params (URL), body (POST data), headers. Simplifies: accessing request data. Methods: get(), post() to respond. Framework: Flask request, Express req."
    },
    {
      "question": "What returns HTTP response?",
      "answer": "Response object",
      "alternatives": [
        "HTTP response"
      ],
      "explanation": "Response object sends HTTP response. Methods: json(), text(), render(), redirect(). Status: response code (200, 404, 500). Headers: Content-Type, cache control. Framework: Flask response, Express res."
    },
    {
      "question": "What defines API structure?",
      "answer": "Schema",
      "alternatives": [
        "Data schema"
      ],
      "explanation": "Schema defines data structure, validation. Example: User schema (name string, email required). JSON Schema: standard format. Validation: enforces requirements. Database: determines table structure. API: client knows expected format."
    },
    {
      "question": "What generates SQL automatically?",
      "answer": "Query builder",
      "alternatives": [
        "Database query builder"
      ],
      "explanation": "Query builder generates SQL from code. Syntax: User.filter(name='John').all(). Prevents: manual SQL, injection. Type-safe: IDE autocomplete. Framework: most provide. Debugging: inspect generated SQL."
    },
    {
      "question": "What performs database migrations?",
      "answer": "Migration tool",
      "alternatives": [
        "Database migration"
      ],
      "explanation": "Migration tool manages database schema changes. Version control: track schema evolution. Forward/backward: upgrade/downgrade. Tools: Alembic (Python), Rails migrations. Records: what changed, when. Production: careful execution needed."
    },
    {
      "question": "What caches computation results?",
      "answer": "Caching layer",
      "alternatives": [
        "Cache"
      ],
      "explanation": "Caching stores expensive computation results. Types: in-memory (Redis), HTTP (browser), database (query cache). Invalidation: clear old cache. Benefits: performance, reduced load. Trade-off: consistency (stale data). Common: caching queries, API responses."
    },
    {
      "question": "What handles file uploads?",
      "answer": "File upload handler",
      "alternatives": [
        "File upload"
      ],
      "explanation": "File upload handler processes uploaded files. Validation: file type, size. Storage: local disk or cloud (S3). Security: validate, scan for malware. Typical: form with file input, POST request. Multipart: form-data encoding."
    },
    {
      "question": "What enables cross-origin requests?",
      "answer": "CORS",
      "alternatives": [
        "Cross-Origin Resource Sharing"
      ],
      "explanation": "CORS allows requests from different origins. Browser blocks by default (same-origin policy). Server: specifies allowed origins. Headers: Access-Control-Allow-Origin. Development: localhost, production: specific domains. Security: prevents unauthorized requests."
    },
    {
      "question": "What logs application events?",
      "answer": "Logging",
      "alternatives": [
        "Application logging"
      ],
      "explanation": "Logging records application events. Levels: DEBUG (detail), INFO (status), WARNING (caution), ERROR (problem). Helps: debugging, monitoring, compliance. Destinations: files, external services (Sentry). Production: critical for troubleshooting."
    },
    {
      "question": "What defines job queues?",
      "answer": "Task queue",
      "alternatives": [
        "Background job"
      ],
      "explanation": "Task queue manages long-running jobs. Examples: send email, process image, analytics. Asynchronous: don't block request. Workers: process jobs independently. Tools: Celery (Python), Bull (Node.js). Benefits: responsiveness, scalability."
    }
  ]
}
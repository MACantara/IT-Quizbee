{
  "subtopic_id": "code_quality",
  "subtopic_name": "Code Quality",
  "mode": "elimination",
  "questions": [
    {
      "question": "What process restructures code without changing its external behavior?",
      "options": [
        "Debugging",
        "Refactoring",
        "Rewriting",
        "Optimizing"
      ],
      "correct": 1,
      "explanation": "Refactoring improves code structure, readability, and maintainability while preserving functionality."
    },
    {
      "question": "What indicates a deeper problem in code that may need refactoring?",
      "options": [
        "Bug",
        "Code Smell",
        "Syntax Error",
        "Runtime Error"
      ],
      "correct": 1,
      "explanation": "Code Smells are indicators of poor design choices that may require refactoring, though the code still functions."
    },
    {
      "question": "What measures the complexity of a program's control flow?",
      "options": [
        "Line Count",
        "Cyclomatic Complexity",
        "Coupling",
        "Cohesion"
      ],
      "correct": 1,
      "explanation": "Cyclomatic Complexity measures the number of linearly independent paths through source code."
    },
    {
      "question": "What represents the cost of additional rework caused by choosing quick solutions?",
      "options": [
        "Bug Count",
        "Code Quality",
        "Technical Debt",
        "Maintenance Cost"
      ],
      "correct": 2,
      "explanation": "Technical Debt is the implied cost of future rework required when choosing easy but limited solutions now."
    },
    {
      "question": "What systematic examination of code by peers improves quality?",
      "options": [
        "Unit Testing",
        "Code Review",
        "Debugging",
        "Profiling"
      ],
      "correct": 1,
      "explanation": "Code Reviews involve team members examining code changes to find defects and ensure quality standards."
    },
    {
      "question": "What code smell describes methods that are too long?",
      "options": [
        "Large Class",
        "Long Method",
        "Duplicate Code",
        "Lazy Class"
      ],
      "correct": 1,
      "explanation": "Long Method smell indicates methods that do too much and should be broken into smaller, focused methods."
    },
    {
      "question": "What automated tool checks code for style and potential errors?",
      "options": [
        "Compiler",
        "Debugger",
        "Linter",
        "Profiler"
      ],
      "correct": 2,
      "explanation": "Linters analyze code for stylistic errors, potential bugs, and violations of coding standards."
    },
    {
      "question": "What principle advocates for code that expresses intent clearly?",
      "options": [
        "DRY",
        "KISS",
        "Clean Code",
        "YAGNI"
      ],
      "correct": 2,
      "explanation": "Clean Code emphasizes writing code that is easy to read, understand, and maintain by others."
    },
    {
      "question": "What code smell involves identical code in multiple places?",
      "options": [
        "Long Method",
        "Large Class",
        "Duplicate Code",
        "Dead Code"
      ],
      "correct": 2,
      "explanation": "Duplicate Code violates the DRY principle and increases maintenance burden as changes must be made in multiple places."
    },
    {
      "question": "What measures how well source code adheres to standards?",
      "options": [
        "Performance Metric",
        "Code Coverage",
        "Code Quality Metrics",
        "Bug Density"
      ],
      "correct": 2,
      "explanation": "Code Quality Metrics quantify aspects like complexity, maintainability, and adherence to standards."
    }
  ]
}
{
  "subtopic_id": "design_patterns",
  "subtopic_name": "Design Patterns",
  "mode": "finals",
  "difficulty": "average",
  "questions": [
    {
      "question": "What pattern provides placeholder for expensive objects?",
      "answer": "proxy",
      "alternatives": [
        "proxy pattern"
      ],
      "explanation": "Proxy controls access to original objects.",
      "id": "des_pat_des_pat_a_finals_000"
    },
    {
      "question": "What pattern composes objects into tree structures?",
      "answer": "composite",
      "alternatives": [
        "composite pattern"
      ],
      "explanation": "Composite treats individual and composite objects uniformly.",
      "id": "des_pat_des_pat_a_finals_001"
    },
    {
      "question": "What pattern separates abstraction from implementation?",
      "answer": "bridge",
      "alternatives": [
        "bridge pattern"
      ],
      "explanation": "Bridge decouples abstraction and implementation.",
      "id": "des_pat_des_pat_a_finals_002"
    },
    {
      "question": "What pattern allows behavior changes based on state?",
      "answer": "state",
      "alternatives": [
        "state pattern"
      ],
      "explanation": "State pattern alters behavior when state changes.",
      "id": "des_pat_des_pat_a_finals_003"
    },
    {
      "question": "What pattern defines algorithm skeleton in base class?",
      "answer": "template method",
      "alternatives": [
        "template method pattern"
      ],
      "explanation": "Template method lets subclasses override specific steps.",
      "id": "des_pat_des_pat_a_finals_004"
    },
    {
      "question": "What pattern reduces coupling between objects?",
      "answer": "mediator",
      "alternatives": [
        "mediator pattern"
      ],
      "explanation": "Mediator centralizes communication between objects.",
      "id": "des_pat_des_pat_a_finals_005"
    },
    {
      "question": "What pattern traverses collections without exposing structure?",
      "answer": "iterator",
      "alternatives": [
        "iterator pattern"
      ],
      "explanation": "Iterator provides sequential access to elements.",
      "id": "des_pat_des_pat_a_finals_006"
    },
    {
      "question": "What pattern saves and restores object state?",
      "answer": "memento",
      "alternatives": [
        "memento pattern"
      ],
      "explanation": "Memento captures object state snapshots.",
      "id": "des_pat_des_pat_a_finals_007"
    },
    {
      "question": "What pattern handles object creation complexity?",
      "answer": "abstract factory",
      "alternatives": [
        "abstract factory pattern"
      ],
      "explanation": "Abstract factory creates families of related objects.",
      "id": "des_pat_des_pat_a_finals_008"
    },
    {
      "question": "What pattern shares objects to support large numbers?",
      "answer": "flyweight",
      "alternatives": [
        "flyweight pattern"
      ],
      "explanation": "Flyweight minimizes memory by sharing data.",
      "id": "des_pat_des_pat_a_finals_009"
    }
  ]
}
{
  "subtopic_id": "oop_basics",
  "subtopic_name": "OOP Basics",
  "mode": "finals",
  "difficulty": "average",
  "questions": [
    {
      "question": "What is method overloading?",
      "answer": "Same method name, different parameters",
      "alternatives": [
        "Compile-time polymorphism"
      ],
      "explanation": "Overloading: multiple methods, same name. Distinction: parameter types, count. Resolution: compile-time. Language: not all support. Benefit: intuitive naming. Importance: polymorphism type."
    },
    {
      "question": "What is method overriding?",
      "answer": "Replacing parents method in child",
      "alternatives": [
        "Runtime polymorphism"
      ],
      "explanation": "Overriding: child changes parent method. Purpose: customize behavior. Resolution: runtime. Requirement: same signature. Benefit: flexible implementations. Importance: inheritance feature."
    },
    {
      "question": "What is super()?",
      "answer": "Reference to parent class",
      "alternatives": [
        "Parent access"
      ],
      "explanation": "super(): access parent methods. Purpose: call parent implementation. Usage: constructors, overridden methods. Benefit: extend parent behavior. Language: Java, Python, C++. Importance: inheritance technique."
    },
    {
      "question": "What is this?",
      "answer": "Reference to current object",
      "alternatives": [
        "Self reference"
      ],
      "explanation": "this: represents current object. Purpose: distinguish instance variables. Usage: methods, constructors. Implicit: sometimes optional. Language: Java, C++, JavaScript. Importance: object reference."
    },
    {
      "question": "What is self?",
      "answer": "Pythons this equivalent",
      "alternatives": [
        "Python self"
      ],
      "explanation": "self: first parameter in Python methods. Purpose: refer to instance. Explicit: must include. Convention: always self by name. Usage: methods, constructors. Importance: Python standard."
    },
    {
      "question": "What is a static method?",
      "answer": "Method not tied to instances",
      "alternatives": [
        "Class method"
      ],
      "explanation": "Static: belongs to class, not instance. Access: without creating object. Purpose: utility functions. Parameter: no this or self. Benefit: shared behavior. Importance: special method type."
    },
    {
      "question": "What is a class variable?",
      "answer": "Shared across all instances",
      "alternatives": [
        "Static variable"
      ],
      "explanation": "Variable: belongs to class, not instance. Shared: all objects use same value. Modification: affects all instances. Purpose: shared state. Benefit: efficiency. Importance: variable type."
    },
    {
      "question": "What is an instance variable?",
      "answer": "Unique to each object",
      "alternatives": [
        "Member variable"
      ],
      "explanation": "Variable: belongs to specific instance. Created: when object instantiated. Modification: affects only that object. Purpose: individual state. Importance: default variable type."
    },
    {
      "question": "What is a getter?",
      "answer": "Method to retrieve attribute value",
      "alternatives": [
        "Accessor method"
      ],
      "explanation": "Getter: returns attribute value. Purpose: read-only access. Convention: get prefix or @property. Benefit: control access. Security: can validate. Importance: encapsulation technique."
    },
    {
      "question": "What is a setter?",
      "answer": "Method to modify attribute value",
      "alternatives": [
        "Mutator method"
      ],
      "explanation": "Setter: changes attribute value. Purpose: controlled modification. Convention: set prefix. Benefit: validation, side effects. Security: enforce rules. Importance: encapsulation technique."
    }
  ]
}
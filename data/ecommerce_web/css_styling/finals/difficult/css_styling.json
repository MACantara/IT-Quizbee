{
  "subtopic_id": "css_styling",
  "subtopic_name": "CSS Styling",
  "mode": "finals",
  "difficulty": "difficult",
  "questions": [
    {
      "question": "What calculates value from other values?",
      "answer": "calc()",
      "alternatives": [
        "CSS calc function"
      ],
      "explanation": "calc() performs calculations: addition, subtraction, multiplication, division. Syntax: calc(100% - 20px). Mixes units: powerful flexibility. Responsive: 50% width minus margin. Browser support: excellent. Dynamic sizing without JavaScript."
    },
    {
      "question": "What creates animations from keyframes?",
      "answer": "Animation",
      "alternatives": [
        "CSS animation"
      ],
      "explanation": "animation runs keyframe sequences. Syntax: @keyframes name { 0% {...} 100% {...} }. Property: animation-name, -duration, -timing-function, -iteration-count. Complex effects: loops, direction changes. Performance: GPU accelerated. Enhances engagement."
    },
    {
      "question": "What selects based on state?",
      "answer": "Pseudo-class",
      "alternatives": [
        ":hover, :focus, :active"
      ],
      "explanation": "Pseudo-class selects element state. Examples: :hover (mouse over), :focus (keyboard), :active (clicked), :visited (link visited). :nth-child(n): select by position. Syntax: selector:pseudo-class. No HTML change: purely CSS. Interactive behavior."
    },
    {
      "question": "What generates content without HTML?",
      "answer": "Pseudo-element",
      "alternatives": [
        "::before, ::after"
      ],
      "explanation": "Pseudo-element generates content without HTML. ::before: before content. ::after: after content. Syntax: selector::pseudo-element { content: \"text\" }. Common: ::first-line, ::selection. Content property. Reduces HTML clutter."
    },
    {
      "question": "What organizes style hierarchy?",
      "answer": "Specificity",
      "alternatives": [
        "CSS specificity"
      ],
      "explanation": "Specificity determines which rule applies. Calculate: inline (1000) > ID (100) > class (10) > element (1). Equal specificity: last rule wins (cascade). !important: override (avoid). Understand: debug styling conflicts. Lower specificity when possible: maintainability."
    },
    {
      "question": "What scopes styles to component?",
      "answer": "CSS Modules",
      "alternatives": [
        "Scoped CSS"
      ],
      "explanation": "CSS Modules scope styles to components. Import: styles as JavaScript object. Prevents: global naming conflicts. Unique class names generated. Tools: webpack, Next.js, Vue. Benefits: maintainability, reusability. Modern approach: separation of concerns."
    },
    {
      "question": "What defines design system colors?",
      "answer": "CSS Variables",
      "alternatives": [
        "Custom properties",
        "--variable"
      ],
      "explanation": "CSS Variables (custom properties) define reusable values. Syntax: --color-primary: #007bff; use: color: var(--color-primary). Benefits: consistency, maintainability, dynamic changes. JavaScript access: getComputedStyle(). Modern approach: DRY principle."
    },
    {
      "question": "What gradient blends colors?",
      "answer": "Gradient",
      "alternatives": [
        "CSS gradient"
      ],
      "explanation": "Gradient smoothly blends colors. Types: linear (direction), radial (center), conic (angle). Syntax: linear-gradient(90deg, red, blue). Multiple colors: smooth transitions. Performance: fast. Background, text, buttons. Creates professional appearance."
    },
    {
      "question": "What hides overflow content?",
      "answer": "overflow",
      "alternatives": [
        "Overflow property"
      ],
      "explanation": "overflow controls content exceeding container. Values: visible (default), hidden (cut), scroll (always), auto (when needed). X/Y: overflow-x, overflow-y. Scrollbars: browser controlled. Layouts: prevent unintended overflow. Text: text-overflow: ellipsis truncates."
    },
    {
      "question": "What property positions element?",
      "answer": "position",
      "alternatives": [
        "Positioning"
      ],
      "explanation": "position determines placement method. Values: static (default), relative (offset from normal), absolute (positioned within parent), fixed (viewport), sticky (scroll behavior). Properties: top, right, bottom, left (displacement). z-index: layering. Complex layouts."
    }
  ]
}
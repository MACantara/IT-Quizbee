{
  "subtopic_id": "code_quality",
  "subtopic_name": "Code Quality",
  "mode": "finals",
  "difficulty": "average",
  "questions": [
    {
      "question": "What refactoring moves code from one class or method to another?",
      "answer": "Extract Method",
      "alternatives": [
        "Method Extraction"
      ],
      "explanation": "Extract Method refactoring creates a new method from code fragments that can be grouped together.",
      "id": "cod_qua_cod_qua_a_finals_000"
    },
    {
      "question": "What code smell describes classes with too many responsibilities?",
      "answer": "Large Class",
      "alternatives": [
        "God Class",
        "Blob"
      ],
      "explanation": "Large Class smell occurs when a class tries to do too much, violating the Single Responsibility Principle.",
      "id": "cod_qua_cod_qua_a_finals_001"
    },
    {
      "question": "What metric measures how easily software can be modified?",
      "answer": "Maintainability Index",
      "alternatives": [],
      "explanation": "Maintainability Index calculates a value between 0 and 100 representing the ease of maintaining the code.",
      "id": "cod_qua_cod_qua_a_finals_002"
    },
    {
      "question": "What code smell describes unused code that's never executed?",
      "answer": "Dead Code",
      "alternatives": [],
      "explanation": "Dead Code is code that's never executed or used, cluttering the codebase and confusing developers.",
      "id": "cod_qua_cod_qua_a_finals_003"
    },
    {
      "question": "What technique automatically reformats code to match style guide?",
      "answer": "Code Formatting",
      "alternatives": [
        "Auto-formatting",
        "Prettier"
      ],
      "explanation": "Code Formatting tools automatically adjust code layout to conform to defined style rules.",
      "id": "cod_qua_cod_qua_a_finals_004"
    },
    {
      "question": "What smell describes methods with too many parameters?",
      "answer": "Long Parameter List",
      "alternatives": [],
      "explanation": "Long Parameter List makes methods hard to understand and use, often indicating the need for parameter objects.",
      "id": "cod_qua_cod_qua_a_finals_005"
    },
    {
      "question": "What code smell describes primitive types used instead of objects?",
      "answer": "Primitive Obsession",
      "alternatives": [],
      "explanation": "Primitive Obsession occurs when primitives are used for domain concepts that should be represented as objects.",
      "id": "cod_qua_cod_qua_a_finals_006"
    },
    {
      "question": "What refactoring combines similar functions into one?",
      "answer": "Consolidate Duplicate Code",
      "alternatives": [
        "Eliminate Duplication"
      ],
      "explanation": "This refactoring removes duplicate code by extracting it into a single location that can be reused.",
      "id": "cod_qua_cod_qua_a_finals_007"
    },
    {
      "question": "What measures the number of bugs per unit of code?",
      "answer": "Bug Density",
      "alternatives": [
        "Defect Density"
      ],
      "explanation": "Bug Density measures the number of defects divided by the size of the software module or system.",
      "id": "cod_qua_cod_qua_a_finals_008"
    },
    {
      "question": "What practice reviews code changes before merging?",
      "answer": "Pull Request Review",
      "alternatives": [
        "PR Review",
        "Merge Request Review"
      ],
      "explanation": "Pull Request Reviews allow team members to comment on and approve code before it's merged into the main branch.",
      "id": "cod_qua_cod_qua_a_finals_009"
    }
  ]
}
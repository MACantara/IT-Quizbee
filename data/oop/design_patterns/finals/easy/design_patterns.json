{
  "subtopic_id": "design_patterns",
  "subtopic_name": "Design Patterns",
  "mode": "finals",
  "difficulty": "easy",
  "questions": [
    {
      "question": "What pattern creates only one instance?",
      "answer": "singleton",
      "alternatives": [
        "singleton pattern"
      ],
      "explanation": "Singleton ensures single instance existence.",
      "id": "des_pat_des_pat_e_finals_000"
    },
    {
      "question": "What pattern creates objects without specifying classes?",
      "answer": "factory",
      "alternatives": [
        "factory pattern"
      ],
      "explanation": "Factory delegates object instantiation.",
      "id": "des_pat_des_pat_e_finals_001"
    },
    {
      "question": "What pattern adds behavior to objects?",
      "answer": "decorator",
      "alternatives": [
        "decorator pattern"
      ],
      "explanation": "Decorator wraps objects with new functionality.",
      "id": "des_pat_des_pat_e_finals_002"
    },
    {
      "question": "What pattern simplifies complex systems?",
      "answer": "facade",
      "alternatives": [
        "facade pattern"
      ],
      "explanation": "Facade provides unified interface.",
      "id": "des_pat_des_pat_e_finals_003"
    },
    {
      "question": "What pattern converts interfaces?",
      "answer": "adapter",
      "alternatives": [
        "adapter pattern"
      ],
      "explanation": "Adapter makes incompatible interfaces compatible.",
      "id": "des_pat_des_pat_e_finals_004"
    },
    {
      "question": "What pattern notifies multiple observers?",
      "answer": "observer",
      "alternatives": [
        "observer pattern"
      ],
      "explanation": "Observer implements publish-subscribe mechanism.",
      "id": "des_pat_des_pat_e_finals_005"
    },
    {
      "question": "What pattern encapsulates algorithms?",
      "answer": "strategy",
      "alternatives": [
        "strategy pattern"
      ],
      "explanation": "Strategy defines interchangeable algorithms.",
      "id": "des_pat_des_pat_e_finals_006"
    },
    {
      "question": "What pattern clones objects?",
      "answer": "prototype",
      "alternatives": [
        "prototype pattern"
      ],
      "explanation": "Prototype creates copies of existing objects.",
      "id": "des_pat_des_pat_e_finals_007"
    },
    {
      "question": "What pattern builds complex objects?",
      "answer": "builder",
      "alternatives": [
        "builder pattern"
      ],
      "explanation": "Builder constructs objects step by step.",
      "id": "des_pat_des_pat_e_finals_008"
    },
    {
      "question": "What pattern encapsulates requests?",
      "answer": "command",
      "alternatives": [
        "command pattern"
      ],
      "explanation": "Command turns requests into objects.",
      "id": "des_pat_des_pat_e_finals_009"
    }
  ]
}
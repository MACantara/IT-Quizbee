{
  "subtopic_id": "advanced_oop",
  "subtopic_name": "Advanced OOP",
  "mode": "finals",
  "difficulty": "easy",
  "questions": [
    {
      "question": "What is metaprogramming?",
      "answer": "Writing code that manipulates code",
      "alternatives": [
        "Code manipulation"
      ],
      "explanation": "Metaprogramming: code writes code. Purpose: automation. Example: reflection, decorators. Language: Python, Ruby. Importance: advanced."
    },
    {
      "question": "What is reflection?",
      "answer": "Inspect and modify structure at runtime",
      "alternatives": [
        "Runtime inspection"
      ],
      "explanation": "Reflection: examine class. Purpose: generic code. Method: getClass(). Benefit: flexibility. Language: Java. Importance: advanced."
    },
    {
      "question": "What is annotation?",
      "answer": "Metadata about code, not directly executable",
      "alternatives": [
        "Metadata"
      ],
      "explanation": "Annotation: metadata. Purpose: provide info. Example: @Override, @Deprecated. Language: Java. Importance: documentation."
    },
    {
      "question": "What is a generic?",
      "answer": "Type-parameterized class or method",
      "alternatives": [
        "Parameterized type"
      ],
      "explanation": "Generic: placeholder. Syntax: <T>. Purpose: type safety. Benefit: reusability. Example: List<String>. Importance: advanced."
    },
    {
      "question": "What is a mixin?",
      "answer": "Class providing methods without inheritance",
      "alternatives": [
        "Behavior provider"
      ],
      "explanation": "Mixin: provide behavior. Purpose: multiple inheritance effect. Language: Python (multiple inheritance). Importance: pattern."
    },
    {
      "question": "What is a trait?",
      "answer": "Composable unit of behavior",
      "alternatives": [
        "Behavior unit"
      ],
      "explanation": "Trait: like interface with implementation. Purpose: mixin alternative. Language: Scala, Rust. Importance: advanced feature."
    },
    {
      "question": "What is duck typing?",
      "answer": "If it acts like it, treat it like it",
      "alternatives": [
        "Structural typing"
      ],
      "explanation": "Duck typing: behavior-based. Purpose: flexibility. Language: Python, JavaScript. Benefit: dynamic. Importance: paradigm."
    },
    {
      "question": "What is protocol-oriented programming?",
      "answer": "Design around protocols, not classes",
      "alternatives": [
        "Protocol design"
      ],
      "explanation": "Protocol: specification. Purpose: flexibility. Language: Swift. Benefit: composition. Importance: paradigm."
    },
    {
      "question": "What is aspect-oriented programming?",
      "answer": "Separate cross-cutting concerns",
      "alternatives": [
        "AOP"
      ],
      "explanation": "AOP: aspects separate. Purpose: cleaner code. Example: logging, security. Language: Java (AspectJ). Importance: advanced paradigm."
    },
    {
      "question": "What is multiple dispatch?",
      "answer": "Method selection based on multiple arguments",
      "alternatives": [
        "Multi-method"
      ],
      "explanation": "Dispatch: based on types. Purpose: polymorphism. Language: Julia. Benefit: type-safe. Importance: advanced technique."
    }
  ]
}
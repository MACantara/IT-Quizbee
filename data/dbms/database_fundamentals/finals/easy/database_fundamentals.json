{
  "subtopic_id": "database_fundamentals",
  "subtopic_name": "Database Fundamentals",
  "mode": "finals",
  "difficulty": "easy",
  "questions": [
    {
      "question": "What is a collection of organized, persistent data?",
      "answer": "Database",
      "alternatives": [
        "Data repository",
        "Data store"
      ],
      "explanation": "A database is an organized collection of structured data stored persistently in a computer system. Databases enable efficient storage, retrieval, and management of large data volumes. Compared to flat files, databases offer organization, security, concurrency control, and query capabilities. Examples include relational databases (MySQL, PostgreSQL) and NoSQL databases (MongoDB, Cassandra)."
    },
    {
      "question": "What system manages databases and provides interfaces?",
      "answer": "Database Management System",
      "alternatives": [
        "DBMS"
      ],
      "explanation": "A Database Management System (DBMS) is software managing database creation, maintenance, and access. It handles data storage, retrieval, security, concurrency, and integrity. Key functions include query processing, transaction management, backup/recovery. Types include relational (SQL), document (MongoDB), key-value (Redis), and graph (Neo4j) databases."
    },
    {
      "question": "What logical structure organizes data into rows and columns?",
      "answer": "Table",
      "alternatives": [
        "Relation"
      ],
      "explanation": "A table (relation) is fundamental relational database structure organizing data into rows and columns. Each column represents an attribute; each row represents a record/tuple. Tables enable structured data organization and querying. Example: Student table with columns (ID, Name, Email) and rows for each student. Tables are linked via keys."
    },
    {
      "question": "What uniquely identifies each record in a table?",
      "answer": "Primary Key",
      "alternatives": [
        "Primary key constraint"
      ],
      "explanation": "A primary key is unique identifier for each record in a table, ensuring no duplicates. Properties: unique (no duplicates), not null (always has value), immutable (doesn't change). Simple key uses one column; composite key uses multiple columns. Example: Student ID in Student table. Enables joining tables and maintaining referential integrity."
    },
    {
      "question": "What field references primary key in another table?",
      "answer": "Foreign Key",
      "alternatives": [
        "Foreign key constraint"
      ],
      "explanation": "A foreign key is field referencing primary key in another table, establishing relationship between tables. Enforces referential integrity: foreign key values must exist as primary keys in referenced table. Example: Student ID in Enrollment table references Student ID in Student table. Prevents orphaned records and maintains data consistency."
    },
    {
      "question": "What property ensures database data is always accurate and valid?",
      "answer": "Data Integrity",
      "alternatives": [
        "Integrity constraint"
      ],
      "explanation": "Data integrity ensures database maintains accuracy, consistency, and validity of data. Types: entity integrity (primary keys unique and non-null), referential integrity (foreign keys valid), domain integrity (values within allowed ranges), semantic integrity (data reflects real-world relationships). Maintained via constraints, triggers, and validation rules."
    },
    {
      "question": "What model organizes data into related tables?",
      "answer": "Relational model",
      "alternatives": [
        "Relational data model"
      ],
      "explanation": "Relational model organizes data into tables (relations) with rows (tuples) and columns (attributes). Based on mathematical set theory. Data relationships through foreign keys. Supports normalization to reduce redundancy. Standard in enterprise databases (SQL Server, Oracle, PostgreSQL). Advantages: flexibility, integrity, query capability. Disadvantages: complex queries, performance for huge datasets."
    },
    {
      "question": "What language queries relational databases?",
      "answer": "SQL",
      "alternatives": [
        "Structured Query Language"
      ],
      "explanation": "SQL (Structured Query Language) is standard language for managing relational databases. Supports data definition (CREATE, ALTER, DROP), manipulation (SELECT, INSERT, UPDATE, DELETE), and control (GRANT, REVOKE). Declarative: specifies what data needed, not how to retrieve. Standard across DBMS (PostgreSQL, MySQL, Oracle, SQL Server)."
    },
    {
      "question": "What organized collection of related data objects?",
      "answer": "Schema",
      "alternatives": [
        "Database schema"
      ],
      "explanation": "Database schema is organizational structure defining tables, columns, data types, constraints, relationships, and indexes. Blueprints for database. Types: logical (conceptual design), physical (how data stored on disk). Schema evolution: altering existing schema. Schema documentation critical for understanding database structure and maintaining data consistency."
    },
    {
      "question": "What ensures database operations complete reliably?",
      "answer": "Transaction",
      "alternatives": [
        "Database transaction"
      ],
      "explanation": "Transaction is unit of work (sequence of operations) that either completes entirely or not at all. ACID properties ensure reliability: Atomicity (all-or-nothing), Consistency (valid state), Isolation (concurrent independence), Durability (persistent). Example: bank transfer (debit one account, credit another) must both complete or both fail. Essential for data consistency."
    }
  ]
}
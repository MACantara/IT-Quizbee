{
  "subtopic_id": "software_fundamentals",
  "subtopic_name": "Software Fundamentals",
  "mode": "finals",
  "difficulty": "difficult",
  "questions": [
    {
      "question": "What architecture separates software into independent services?",
      "answer": "microservices",
      "alternatives": ["microservice architecture"],
      "explanation": "Microservices enable modular application design."
    },
    {
      "question": "What software paradigm treats computation as mathematical functions?",
      "answer": "functional programming",
      "alternatives": [],
      "explanation": "Functional programming avoids state changes."
    },
    {
      "question": "What practice automates software delivery pipelines?",
      "answer": "CI/CD",
      "alternatives": ["Continuous Integration/Continuous Deployment"],
      "explanation": "CI/CD streamlines code deployment."
    },
    {
      "question": "What software container platform packages applications?",
      "answer": "Docker",
      "alternatives": [],
      "explanation": "Docker creates portable application containers."
    },
    {
      "question": "What manages containerized applications at scale?",
      "answer": "Kubernetes",
      "alternatives": ["K8s"],
      "explanation": "Kubernetes orchestrates container deployments."
    },
    {
      "question": "What technique optimizes code without changing behavior?",
      "answer": "refactoring",
      "alternatives": [],
      "explanation": "Refactoring improves code structure and maintainability."
    },
    {
      "question": "What software design principle promotes loose coupling?",
      "answer": "dependency injection",
      "alternatives": ["DI"],
      "explanation": "Dependency injection enhances testability."
    },
    {
      "question": "What license requires derivative works to be open source?",
      "answer": "copyleft",
      "alternatives": [],
      "explanation": "Copyleft licenses enforce openness."
    },
    {
      "question": "What pattern separates data from presentation?",
      "answer": "MVC",
      "alternatives": ["Model-View-Controller"],
      "explanation": "MVC organizes application architecture."
    },
    {
      "question": "What methodology develops software in short cycles?",
      "answer": "Scrum",
      "alternatives": [],
      "explanation": "Scrum uses sprints for iterative development."
    }
  ]
}
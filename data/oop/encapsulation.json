{
  "subtopic_id": "encapsulation",
  "subtopic_name": "Encapsulation",
  "questions": [
    {
      "question": "What is encapsulation in OOP?",
      "options": [
        "Bundling data and methods that operate on that data within a single unit",
        "Creating multiple classes",
        "Inheriting properties from parent class",
        "Using many objects"
      ],
      "correct": 0,
      "explanation": "Encapsulation is the bundling of data (attributes) and methods (functions) that operate on the data into a single unit (class), and restricting direct access to some components to protect data integrity."
    },
    {
      "question": "What is data hiding?",
      "options": [
        "Deleting data",
        "Encrypting data",
        "Restricting direct access to data members from outside the class",
        "Storing data in files"
      ],
      "correct": 2,
      "explanation": "Data hiding is a key aspect of encapsulation where data members are made private or protected, preventing direct access from outside the class. Access is provided through public methods (getters/setters)."
    },
    {
      "question": "Which access modifier provides the highest level of data hiding in Java?",
      "options": [
        "public",
        "protected",
        "default",
        "private"
      ],
      "correct": 3,
      "explanation": "The 'private' access modifier provides the highest level of encapsulation by making members accessible only within the same class, completely hiding them from outside access."
    },
    {
      "question": "What are getter methods?",
      "options": [
        "Methods that get data from user input",
        "Methods that return the value of private variables",
        "Methods that delete data",
        "Methods that download files"
      ],
      "correct": 1,
      "explanation": "Getter methods (accessors) are public methods that return the value of private instance variables, providing controlled read access to encapsulated data."
    },
    {
      "question": "What are setter methods?",
      "options": [
        "Methods that set up the program",
        "Methods that allow controlled modification of private variables",
        "Methods that configure settings",
        "Methods that initialize arrays"
      ],
      "correct": 1,
      "explanation": "Setter methods (mutators) are public methods that allow controlled modification of private instance variables, often including validation logic to maintain data integrity."
    },
    {
      "question": "What is the main benefit of encapsulation?",
      "options": [
        "Faster code execution",
        "Less memory usage",
        "Data protection and controlled access",
        "Easier to write code"
      ],
      "correct": 2,
      "explanation": "The main benefit of encapsulation is data protection and controlled access. It prevents unauthorized access, maintains data integrity, and allows internal implementation changes without affecting external code."
    },
    {
      "question": "Which principle is closely related to encapsulation?",
      "options": [
        "Information hiding",
        "Multiple inheritance",
        "Static typing",
        "Recursion"
      ],
      "correct": 0,
      "explanation": "Information hiding is a fundamental principle closely related to encapsulation. It involves hiding the internal representation and implementation details of a class from the outside world."
    },
    {
      "question": "What does it mean for a class to be 'tightly encapsulated'?",
      "options": [
        "It has many methods",
        "All data members are private",
        "It uses inheritance",
        "It has no methods"
      ],
      "correct": 1,
      "explanation": "A class is considered tightly encapsulated when all of its data members (instance variables) are declared as private, ensuring maximum data hiding and controlled access through public methods."
    },
    {
      "question": "Can encapsulation exist without inheritance?",
      "options": [
        "Yes, encapsulation is independent of inheritance",
        "No, they must work together",
        "Only in Java",
        "Only in procedural programming"
      ],
      "correct": 0,
      "explanation": "Yes, encapsulation is an independent OOP principle that doesn't require inheritance. A class can be well-encapsulated without inheriting from or being inherited by any other class."
    },
    {
      "question": "Why might you use validation in a setter method?",
      "options": [
        "To make code longer",
        "To ensure data integrity by checking values before assignment",
        "To slow down the program",
        "To use more memory"
      ],
      "correct": 1,
      "explanation": "Validation in setter methods ensures data integrity by checking that values meet certain criteria before assignment. For example, ensuring age is positive or email format is valid, preventing invalid states."
    }
  ]
}
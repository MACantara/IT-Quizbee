{
  "subtopic_id": "software_design",
  "subtopic_name": "Software Design",
  "mode": "finals",
  "difficulty": "average",
  "questions": [
    {
      "question": "The design pattern that decouples abstraction from implementation.",
      "answer": "Bridge",
      "alternatives": ["Bridge Pattern"],
      "explanation": "Bridge pattern separates abstraction from implementation so they can vary independently."
    },
    {
      "question": "The design pattern that adds responsibilities to objects dynamically.",
      "answer": "Decorator",
      "alternatives": ["Decorator Pattern"],
      "explanation": "Decorator pattern attaches additional responsibilities to objects dynamically without modifying their structure."
    },
    {
      "question": "The design pattern that provides a surrogate for another object.",
      "answer": "Proxy",
      "alternatives": ["Proxy Pattern"],
      "explanation": "Proxy pattern provides a placeholder that controls access to another object."
    },
    {
      "question": "The design pattern that encapsulates requests as objects.",
      "answer": "Command",
      "alternatives": ["Command Pattern"],
      "explanation": "Command pattern encapsulates requests as objects, enabling queuing, logging, and undoable operations."
    },
    {
      "question": "The design pattern that defines a family of interchangeable algorithms.",
      "answer": "Strategy",
      "alternatives": ["Strategy Pattern"],
      "explanation": "Strategy pattern defines a family of algorithms and makes them interchangeable within a context."
    },
    {
      "question": "The SOLID principle stating software should be open for extension but closed for modification.",
      "answer": "Open-Closed Principle",
      "alternatives": ["OCP"],
      "explanation": "Open-Closed Principle states entities should be extendable without modifying existing code."
    },
    {
      "question": "The SOLID principle stating derived classes must be substitutable for base classes.",
      "answer": "Liskov Substitution Principle",
      "alternatives": ["LSP"],
      "explanation": "LSP ensures subclasses can replace their parent classes without breaking functionality."
    },
    {
      "question": "The architectural pattern organizing system into horizontal layers.",
      "answer": "Layered Architecture",
      "alternatives": ["N-Tier Architecture", "Multi-Tier"],
      "explanation": "Layered architecture organizes system into horizontal layers like presentation, business logic, and data access."
    },
    {
      "question": "The design pattern that notifies multiple objects of state changes.",
      "answer": "Observer",
      "alternatives": ["Observer Pattern"],
      "explanation": "Observer pattern defines a one-to-many dependency where state changes notify all dependents."
    },
    {
      "question": "The design pattern that separates complex object construction from representation.",
      "answer": "Builder",
      "alternatives": ["Builder Pattern"],
      "explanation": "Builder pattern separates the construction of complex objects from their representation."
    }
  ]
}
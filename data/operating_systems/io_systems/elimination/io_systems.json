{
  "subtopic_id": "io_systems",
  "subtopic_name": "I/O Systems",
  "questions": [
    {
      "question": "What is I/O in operating systems?",
      "options": [
        "Input/Output operations for data transfer between computer and external devices",
        "Internal Operations",
        "Internet Operations",
        "Installation Operations"
      ],
      "correct": 0,
      "explanation": "I/O (Input/Output) refers to communication between the computer system and external devices like keyboards, disks, displays, and networks. The OS manages these operations through device drivers and I/O subsystems."
    },
    {
      "question": "What is a device driver?",
      "options": [
        "Software that provides a uniform interface for the OS to communicate with hardware",
        "A physical cable",
        "A type of CPU",
        "A memory chip"
      ],
      "correct": 0,
      "explanation": "A device driver is software that acts as a translator between the operating system and a hardware device. It provides a uniform interface and handles device-specific details, allowing the OS to communicate with diverse hardware."
    },
    {
      "question": "What is polling in I/O?",
      "options": [
        "The CPU repeatedly checks device status to see if it's ready",
        "Deleting devices",
        "Installing drivers",
        "Encrypting data"
      ],
      "correct": 0,
      "explanation": "Polling is an I/O method where the CPU repeatedly checks (polls) a device's status register to determine if it's ready for data transfer. Simple but inefficient as it wastes CPU cycles continuously checking."
    },
    {
      "question": "What is an interrupt in I/O systems?",
      "options": [
        "A signal from device to CPU indicating it needs attention or has completed an operation",
        "A system crash",
        "A virus",
        "A user command"
      ],
      "correct": 0,
      "explanation": "An interrupt is a hardware signal sent to the CPU by a device to indicate it needs attention or has completed an operation. The CPU suspends current work, executes an interrupt handler, then resumes. More efficient than polling."
    },
    {
      "question": "What is DMA (Direct Memory Access)?",
      "options": [
        "A method allowing devices to transfer data directly to/from memory without CPU involvement",
        "A type of RAM",
        "A CPU instruction",
        "A file system"
      ],
      "correct": 0,
      "explanation": "DMA allows devices to transfer data directly to/from main memory without continuous CPU intervention. A DMA controller manages the transfer, freeing the CPU for other tasks. Used for high-speed devices like disks."
    },
    {
      "question": "What is buffering in I/O?",
      "options": [
        "Temporarily storing data in memory during transfer between devices",
        "Encrypting data",
        "Compressing files",
        "Deleting temporary files"
      ],
      "correct": 0,
      "explanation": "Buffering is the use of a memory area to temporarily hold data being transferred between devices with different speeds. It smooths out speed differences and allows asynchronous operation. Example: disk buffer, network buffer."
    },
    {
      "question": "What is spooling?",
      "options": [
        "Storing output in buffer for a device that can't handle multiple requests simultaneously",
        "Installing software",
        "Disk formatting",
        "Memory allocation"
      ],
      "correct": 0,
      "explanation": "Spooling (Simultaneous Peripheral Operations OnLine) stores output for a device (like a printer) that can only serve one request at a time. Print jobs are spooled to disk, then sent to printer one at a time."
    },
    {
      "question": "What is the difference between blocking and non-blocking I/O?",
      "options": [
        "Blocking I/O waits for completion; non-blocking I/O returns immediately",
        "No difference",
        "Blocking is faster",
        "Non-blocking uses more memory"
      ],
      "correct": 0,
      "explanation": "Blocking (synchronous) I/O causes the process to wait until the operation completes. Non-blocking (asynchronous) I/O returns control immediately, allowing the process to continue while I/O happens in the background."
    },
    {
      "question": "What is an I/O port?",
      "options": [
        "A memory address or register used to communicate with I/O devices",
        "A USB connector",
        "A network socket",
        "A disk partition"
      ],
      "correct": 0,
      "explanation": "An I/O port is a channel or address through which the CPU communicates with I/O devices. Can be a memory-mapped address or a separate I/O address space. Used to send commands and transfer data to/from devices."
    },
    {
      "question": "What is the purpose of an I/O scheduler?",
      "options": [
        "To order and optimize I/O requests for efficiency and fairness",
        "To install drivers",
        "To format disks",
        "To encrypt data"
      ],
      "correct": 0,
      "explanation": "An I/O scheduler orders pending I/O requests to optimize performance (minimize seek time), ensure fairness, and meet different workload requirements. Examples: NOOP, Deadline, CFQ (Completely Fair Queuing) schedulers."
    }
  ],
  "mode": "elimination"
}
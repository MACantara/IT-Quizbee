{
  "subtopic_id": "inheritance",
  "subtopic_name": "Inheritance",
  "mode": "finals",
  "difficulty": "average",
  "questions": [
    {
      "question": "What type of inheritance does Java NOT support for classes?",
      "answer": "multiple inheritance",
      "alternatives": ["multiple"],
      "explanation": "Java prevents multiple class inheritance to avoid ambiguity."
    },
    {
      "question": "What type of inheritance has multiple children from one parent?",
      "answer": "hierarchical inheritance",
      "alternatives": ["hierarchical"],
      "explanation": "Hierarchical inheritance creates a tree-like class structure."
    },
    {
      "question": "What keyword prevents a class from being inherited?",
      "answer": "final",
      "alternatives": ["Final"],
      "explanation": "Final classes cannot serve as base classes."
    },
    {
      "question": "What method is automatically called when creating a child object?",
      "answer": "constructor",
      "alternatives": ["parent constructor", "base constructor"],
      "explanation": "Parent constructors execute before child constructors."
    },
    {
      "question": "What C++ visibility mode makes public members become protected in child?",
      "answer": "protected inheritance",
      "alternatives": ["protected"],
      "explanation": "Protected inheritance changes accessibility of inherited members."
    },
    {
      "question": "What allows Java to achieve multiple inheritance?",
      "answer": "interfaces",
      "alternatives": ["interface"],
      "explanation": "Java classes can implement multiple interfaces."
    },
    {
      "question": "What keyword calls the parent class constructor explicitly?",
      "answer": "super",
      "alternatives": ["super()"],
      "explanation": "Super() invokes the parent constructor with arguments."
    },
    {
      "question": "What is the topmost class in Java hierarchy?",
      "answer": "Object",
      "alternatives": ["Object class"],
      "explanation": "All Java classes implicitly extend Object class."
    },
    {
      "question": "What access specifier allows inheritance but not outside access?",
      "answer": "protected",
      "alternatives": ["Protected"],
      "explanation": "Protected members are accessible in subclasses but not publicly."
    },
    {
      "question": "What problem occurs when inheriting from multiple parents with same method?",
      "answer": "diamond problem",
      "alternatives": ["ambiguity", "diamond ambiguity"],
      "explanation": "Diamond problem creates confusion about which method to inherit."
    }
  ]
}
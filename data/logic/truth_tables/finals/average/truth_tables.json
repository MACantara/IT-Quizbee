{
  "subtopic_id": "truth_tables",
  "subtopic_name": "Truth Tables",
  "mode": "finals",
  "difficulty": "average",
  "questions": [
    {
      "question": "What is operator precedence in tables?",
      "answer": "NOT > AND > OR >  > ",
      "alternatives": [
        "Precedence order"
      ],
      "explanation": "Order: determines evaluation sequence. NOT: highest priority. Conditional: lower than OR. Biconditional: lowest priority. Parentheses: override precedence. Importance: prevents ambiguity. Example: pqr = (pq)r."
    },
    {
      "question": "What represents tautologies in table?",
      "answer": "All rows true in result column",
      "alternatives": [
        "Tautology indicator"
      ],
      "explanation": "Tautology: complete column of true values. Example: pp always true. Significance: universal truth. Application: logical laws. Verification: truth table confirms. Example formula: (pq)(pq)."
    },
    {
      "question": "What represents contradictions in table?",
      "answer": "All rows false in result column",
      "alternatives": [
        "Contradiction indicator"
      ],
      "explanation": "Contradiction: complete column of false values. Example: pp always false. Significance: impossibility. Application: detect errors. Verification: truth table confirms. Example formula: (pq)(pq)."
    },
    {
      "question": "What represents contingencies in table?",
      "answer": "Mixed true and false in result",
      "alternatives": [
        "Contingency indicator"
      ],
      "explanation": "Contingency: some rows true, some false. Most formulas: contingent. Truth depends: on variable values. Analysis: determine nature first. Frequency: most common type. Example formula: pq."
    },
    {
      "question": "How do you evaluate subformulas?",
      "answer": "Left-to-right, respecting precedence",
      "alternatives": [
        "Evaluation method"
      ],
      "explanation": "Method: build columns for sub-expressions. Order: respect precedence (NOT, AND, OR, etc.). Parentheses: highest priority. Column sequence: inputs, sub-expressions, final result. Organization: clarity and accuracy. Verification: double-check each column."
    },
    {
      "question": "What is short-circuit evaluation?",
      "answer": "Stopping evaluation when result determined",
      "alternatives": [
        "Early termination"
      ],
      "explanation": "AND: stops at first false (result false). OR: stops at first true (result true). Efficiency: avoids unnecessary work. Implementation: circuit/computer optimization. Logic: full evaluation still valid. Practical: computer optimization technique."
    },
    {
      "question": "What is the output column?",
      "answer": "Final result of formula for each row",
      "alternatives": [
        "Result column"
      ],
      "explanation": "Column: computed last (usually rightmost). Values: true or false for each input combination. Purpose: shows formula behavior. Analysis: patterns reveal properties. Importance: main output of table."
    },
    {
      "question": "What is an output pattern?",
      "answer": "Sequence of result values",
      "alternatives": [
        "Truth pattern"
      ],
      "explanation": "Pattern: string of T's and F's. Example: TFTF for alternating values. Recognition: identifies formula type. Tautology: all T's. Contradiction: all F's. Analysis: compare patterns. Unique: each formula has unique pattern."
    },
    {
      "question": "How many output patterns possible for n vars?",
      "answer": "2^(2^n)",
      "alternatives": [
        "Pattern count"
      ],
      "explanation": "Formula: 2^(2^n) total possible patterns. 1 variable: 4 patterns (2^2). 2 variables: 16 patterns (2^4). 3 variables: 256 patterns (2^8). Growth: very rapid. Most used: few common patterns."
    },
    {
      "question": "What is row independent operation?",
      "answer": "Computing each row separately",
      "alternatives": [
        "Row computation"
      ],
      "explanation": "Independence: each row evaluated independently. Advantage: can parallelize. Simplicity: no cross-row dependencies. Standard: truth table method. Implementation: systematic evaluation. Benefit: error detection row-by-row."
    }
  ]
}
{
  "subtopic_id": "software_design",
  "subtopic_name": "Software Design",
  "questions": [
    {
      "question": "What is software design?",
      "options": [
        "The process of defining the architecture, components, and interfaces of a system",
        "Writing code",
        "Testing software",
        "Deploying applications"
      ],
      "correct": 0,
      "explanation": "Software design is the process of defining the architecture, components, interfaces, and other characteristics of a system. It transforms requirements into a blueprint for constructing software."
    },
    {
      "question": "What is software architecture?",
      "options": [
        "The high-level structure of a software system defining major components and their relationships",
        "Building design",
        "Code syntax",
        "Database schema"
      ],
      "correct": 0,
      "explanation": "Software architecture is the high-level structure of a software system, defining major components (modules, subsystems), their responsibilities, and their interactions. It provides the fundamental organization of the system."
    },
    {
      "question": "What is modular design?",
      "options": [
        "Dividing software into separate, independent modules with specific functions",
        "Using only one module",
        "Random organization",
        "No structure"
      ],
      "correct": 0,
      "explanation": "Modular design divides software into separate, independent modules, each responsible for a specific function. This improves maintainability, reusability, and allows parallel development. Modules have well-defined interfaces."
    },
    {
      "question": "What is cohesion in software design?",
      "options": [
        "The degree to which elements within a module belong together",
        "Module size",
        "Code length",
        "Number of functions"
      ],
      "correct": 0,
      "explanation": "Cohesion measures how closely related and focused the responsibilities of a single module are. High cohesion (good) means a module does one thing well. Low cohesion (bad) means a module has unrelated responsibilities."
    },
    {
      "question": "What is coupling in software design?",
      "options": [
        "The degree of interdependence between modules",
        "Module naming",
        "Code formatting",
        "Variable types"
      ],
      "correct": 0,
      "explanation": "Coupling measures the degree of interdependence between modules. Loose coupling (good) means modules are independent. Tight coupling (bad) means modules are highly dependent, making changes difficult and reducing reusability."
    },
    {
      "question": "What is the Model-View-Controller (MVC) pattern?",
      "options": [
        "An architectural pattern separating data, presentation, and logic",
        "A database pattern",
        "A testing pattern",
        "A deployment pattern"
      ],
      "correct": 0,
      "explanation": "MVC separates application into three interconnected components: Model (data and business logic), View (presentation/UI), and Controller (handles input and updates model/view). This separation improves organization and maintainability."
    },
    {
      "question": "What is layered architecture?",
      "options": [
        "Organizing system into horizontal layers, each providing services to the layer above",
        "Flat structure",
        "Random organization",
        "Single layer system"
      ],
      "correct": 0,
      "explanation": "Layered architecture organizes a system into hierarchical layers (e.g., Presentation, Business Logic, Data Access, Database). Each layer depends only on layers below it. Common examples: 3-tier and n-tier architectures."
    },
    {
      "question": "What is the client-server architecture?",
      "options": [
        "A distributed architecture where clients request services from servers",
        "Single computer system",
        "Peer-to-peer only",
        "No network needed"
      ],
      "correct": 0,
      "explanation": "Client-server architecture is a distributed system where client processes request services and server processes provide them. Clients initiate requests; servers respond. Examples: web applications, email systems, databases."
    },
    {
      "question": "What is a microservices architecture?",
      "options": [
        "An architectural style where applications are composed of small, independent services",
        "A monolithic architecture",
        "A single large service",
        "No architecture"
      ],
      "correct": 0,
      "explanation": "Microservices architecture structures an application as a collection of loosely coupled, independently deployable services. Each service is small, focused on a specific business capability, and communicates via APIs. Contrasts with monolithic architecture."
    },
    {
      "question": "What is the difference between high-level and low-level design?",
      "options": [
        "High-level defines overall architecture; low-level defines detailed component implementation",
        "No difference",
        "High-level is easier",
        "Low-level comes first"
      ],
      "correct": 0,
      "explanation": "High-level design (HLD) defines system architecture, major components, and their interactions. Low-level design (LLD) provides detailed specifications for each component, including algorithms, data structures, and interfaces for implementation."
    }
  ],
  "mode": "elimination"
}
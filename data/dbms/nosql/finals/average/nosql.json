{
  "subtopic_id": "nosql",
  "subtopic_name": "NoSQL Databases",
  "mode": "finals",
  "difficulty": "average",
  "questions": [
    {
      "question": "What does NoSQL stand for?",
      "answer": "Not Only SQL",
      "alternatives": [],
      "explanation": "NoSQL stands for 'Not Only SQL', indicating that these databases can use query languages other than SQL or support both SQL and non-SQL approaches. It doesn't mean they completely exclude SQL, but rather that they provide alternatives and flexibility beyond traditional relational models."
    },
    {
      "question": "Which type of NoSQL database stores data as key-value pairs?",
      "answer": "Key-value store",
      "alternatives": [],
      "explanation": "Key-value stores are the simplest type of NoSQL database, storing data as a collection of key-value pairs. Examples include Redis, Amazon DynamoDB, and Riak. They're extremely fast for lookups, insertions, and deletions using the key, making them ideal for caching, session management, and shopping carts."
    },
    {
      "question": "Which NoSQL database is an example of a document database?",
      "answer": "MongoDB",
      "alternatives": [],
      "explanation": "MongoDB is a popular document database that stores data in JSON-like documents (BSON format). Document databases store semi-structured data with flexible schemas, allowing different documents in the same collection to have different fields. Other examples include CouchDB and Couchbase."
    },
    {
      "question": "What is the CAP theorem in distributed databases?",
      "answer": "Consistency, Availability, Partition tolerance",
      "alternatives": [],
      "explanation": "The CAP theorem states that a distributed database can only guarantee two of three properties: Consistency (all nodes see the same data at the same time), Availability (every request receives a response), and Partition tolerance (system continues operating despite network failures). Most NoSQL databases sacrifice consistency for availability and partition tolerance."
    },
    {
      "question": "Which type of NoSQL database is optimized for storing and querying relationships between entities?",
      "answer": "Graph database",
      "alternatives": [],
      "explanation": "Graph databases like Neo4j, Amazon Neptune, and OrientDB are designed to store nodes (entities) and edges (relationships) between them. They're optimized for queries that traverse relationships, making them ideal for social networks, recommendation engines, fraud detection, and network topology analysis."
    },
    {
      "question": "What is a column-family database?",
      "answer": "A database that stores data in column families, allowing different rows to have different columns",
      "alternatives": [],
      "explanation": "Column-family databases (like Cassandra, HBase, and ScyllaDB) store data in column families, where each row can have a different set of columns. Data is stored by column rather than by row, making them efficient for queries that access specific columns across many rows. They're designed for massive scalability and high write throughput."
    },
    {
      "question": "When should you choose a NoSQL database over a relational database?",
      "answer": "When dealing with large volumes of unstructured or semi-structured data with flexible schemas",
      "alternatives": [],
      "explanation": "NoSQL databases are preferred for: large volumes of data, unstructured or semi-structured data, flexible or evolving schemas, horizontal scalability requirements, high read/write throughput, and when eventual consistency is acceptable. Relational databases are better for complex transactions, strong consistency, and complex queries with JOINs."
    },
    {
      "question": "What is eventual consistency in NoSQL databases?",
      "answer": "Data becomes consistent across all nodes after some time, but not immediately",
      "alternatives": [],
      "explanation": "Eventual consistency means that after an update, not all nodes will reflect the change immediately, but they will all eventually converge to the same value given enough time without new updates. This trade-off allows for higher availability and partition tolerance (per CAP theorem) but means reads might temporarily return stale data."
    },
    {
      "question": "What is sharding in NoSQL databases?",
      "answer": "Partitioning data across multiple servers based on a shard key",
      "alternatives": [],
      "explanation": "Sharding is the process of horizontally partitioning data across multiple servers (shards). Each shard contains a subset of the data based on a shard key. This allows NoSQL databases to scale horizontally by distributing load across multiple machines, enabling them to handle massive amounts of data and high throughput."
    },
    {
      "question": "Which NoSQL database characteristic allows for horizontal scaling?",
      "answer": "Distributed architecture with data partitioning",
      "alternatives": [],
      "explanation": "NoSQL databases achieve horizontal scaling through distributed architecture, where data is partitioned (sharded) across multiple servers. New servers can be added to increase capacity and throughput. This contrasts with vertical scaling (adding more power to a single server), which has physical limits. The flexible schema and eventual consistency model also facilitate this distribution."
    }
  ]
}
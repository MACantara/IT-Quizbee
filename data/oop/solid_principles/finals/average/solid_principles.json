{
  "subtopic_id": "solid_principles",
  "subtopic_name": "SOLID Principles",
  "mode": "finals",
  "difficulty": "average",
  "questions": [
    {
      "question": "What metric measures Single Responsibility violations?",
      "answer": "cohesion",
      "alternatives": [
        "class cohesion"
      ],
      "explanation": "Low cohesion indicates multiple responsibilities.",
      "id": "sol_pri_sol_pri_a_finals_000"
    },
    {
      "question": "What technique implements Open/Closed Principle?",
      "answer": "inheritance",
      "alternatives": [
        "polymorphism",
        "abstraction"
      ],
      "explanation": "Inheritance and composition enable extension.",
      "id": "sol_pri_sol_pri_a_finals_001"
    },
    {
      "question": "What violates Liskov Substitution Principle?",
      "answer": "breaking contracts",
      "alternatives": [
        "changing behavior",
        "violating preconditions"
      ],
      "explanation": "Subtypes must maintain parent contracts.",
      "id": "sol_pri_sol_pri_a_finals_002"
    },
    {
      "question": "What helps implement Interface Segregation?",
      "answer": "role interfaces",
      "alternatives": [
        "small interfaces",
        "specific interfaces"
      ],
      "explanation": "Role interfaces serve specific client needs.",
      "id": "sol_pri_sol_pri_a_finals_003"
    },
    {
      "question": "What implements Dependency Inversion?",
      "answer": "dependency injection",
      "alternatives": [
        "DI",
        "inversion of control"
      ],
      "explanation": "Dependency injection provides abstractions.",
      "id": "sol_pri_sol_pri_a_finals_004"
    },
    {
      "question": "What pattern supports Single Responsibility?",
      "answer": "facade",
      "alternatives": [
        "facade pattern"
      ],
      "explanation": "Facade delegates to specialized classes.",
      "id": "sol_pri_sol_pri_a_finals_005"
    },
    {
      "question": "What pattern supports Open/Closed?",
      "answer": "strategy",
      "alternatives": [
        "strategy pattern"
      ],
      "explanation": "Strategy adds behavior without modification.",
      "id": "sol_pri_sol_pri_a_finals_006"
    },
    {
      "question": "What ensures Liskov Substitution compliance?",
      "answer": "behavioral subtyping",
      "alternatives": [
        "design by contract"
      ],
      "explanation": "Behavioral subtyping maintains expected behavior.",
      "id": "sol_pri_sol_pri_a_finals_007"
    },
    {
      "question": "What reduces Interface Segregation violations?",
      "answer": "interface splitting",
      "alternatives": [
        "breaking interfaces"
      ],
      "explanation": "Split large interfaces into focused ones.",
      "id": "sol_pri_sol_pri_a_finals_008"
    },
    {
      "question": "What supports Dependency Inversion?",
      "answer": "abstract factory",
      "alternatives": [
        "factory pattern"
      ],
      "explanation": "Abstract factory provides abstraction layer.",
      "id": "sol_pri_sol_pri_a_finals_009"
    }
  ]
}
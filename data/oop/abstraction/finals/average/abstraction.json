{
  "subtopic_id": "abstraction",
  "subtopic_name": "Abstraction",
  "mode": "finals",
  "difficulty": "average",
  "questions": [
    {
      "question": "What Python decorator creates abstract methods?",
      "answer": "@abstractmethod",
      "alternatives": ["abstractmethod"],
      "explanation": "Abstractmethod decorator enforces implementation."
    },
    {
      "question": "What can abstract classes contain besides abstract methods?",
      "answer": "concrete methods",
      "alternatives": ["regular methods", "implemented methods"],
      "explanation": "Abstract classes can mix abstract and concrete methods."
    },
    {
      "question": "What allows interfaces to have method implementations?",
      "answer": "default methods",
      "alternatives": ["defender methods"],
      "explanation": "Default methods provide implementations in interfaces."
    },
    {
      "question": "What abstraction level hides file system details?",
      "answer": "logical abstraction",
      "alternatives": ["logical level"],
      "explanation": "Logical abstraction presents conceptual views."
    },
    {
      "question": "What abstraction level provides user views?",
      "answer": "view abstraction",
      "alternatives": ["view level"],
      "explanation": "View abstraction customizes user perspectives."
    },
    {
      "question": "What keyword prevents abstraction in methods?",
      "answer": "final",
      "alternatives": ["Final"],
      "explanation": "Final methods cannot be overridden."
    },
    {
      "question": "What programming approach focuses on contracts?",
      "answer": "contract programming",
      "alternatives": ["design by contract"],
      "explanation": "Contract programming defines preconditions and postconditions."
    },
    {
      "question": "What C++ feature enables abstraction?",
      "answer": "pure virtual functions",
      "alternatives": ["pure virtual"],
      "explanation": "Pure virtual functions create abstract classes."
    },
    {
      "question": "What separates interface from implementation?",
      "answer": "abstraction",
      "alternatives": ["abstraction principle"],
      "explanation": "Abstraction divides what from how."
    },
    {
      "question": "What allows multiple implementations of same contract?",
      "answer": "interfaces",
      "alternatives": ["interface"],
      "explanation": "Interfaces enable polymorphic behavior."
    }
  ]
}
{
  "subtopic_id": "instruction_set",
  "subtopic_name": "Instruction Set Architecture",
  "mode": "elimination",
  "questions": [
    {
      "question": "What does RISC stand for?",
      "options": [
        "Reduced Instruction Set Computer",
        "Rapid Instruction Set Computing",
        "Real-time Instruction Set Code",
        "Register Instruction Set Control"
      ],
      "correct": 0,
      "explanation": "RISC stands for Reduced Instruction Set Computer, a design philosophy that uses a small set of simple instructions that execute quickly."
    },
    {
      "question": "What does CISC stand for?",
      "options": [
        "Central Instruction Set Computer",
        "Complex Instruction Set Computer",
        "Compact Instruction Set Code",
        "Controlled Instruction Set Computing"
      ],
      "correct": 1,
      "explanation": "CISC stands for Complex Instruction Set Computer, featuring a large set of complex instructions that can perform multiple operations."
    },
    {
      "question": "Which architecture typically uses fixed-length instructions?",
      "options": [
        "CISC",
        "RISC",
        "Both equally",
        "Neither"
      ],
      "correct": 1,
      "explanation": "RISC architectures typically use fixed-length instructions, making decoding simpler and faster, while CISC uses variable-length instructions."
    },
    {
      "question": "What is an opcode in an instruction?",
      "options": [
        "The memory address of data",
        "The operation to be performed",
        "The result of an operation",
        "The number of operands"
      ],
      "correct": 1,
      "explanation": "The opcode (operation code) specifies what operation the instruction will perform, such as ADD, SUB, or LOAD."
    },
    {
      "question": "Which architecture is ARM based on?",
      "options": [
        "CISC",
        "RISC",
        "MISC",
        "VLIW"
      ],
      "correct": 1,
      "explanation": "ARM (Advanced RISC Machine) is based on RISC architecture, emphasizing simplicity and efficiency."
    },
    {
      "question": "What is the primary advantage of RISC architecture?",
      "options": [
        "Larger instruction set",
        "Simpler instructions execute faster",
        "More complex operations per instruction",
        "Variable instruction length"
      ],
      "correct": 1,
      "explanation": "RISC's simple instructions can execute in a single clock cycle, leading to faster overall execution and easier pipelining."
    },
    {
      "question": "What addressing mode uses a register to point to memory?",
      "options": [
        "Immediate addressing",
        "Direct addressing",
        "Register indirect addressing",
        "Indexed addressing"
      ],
      "correct": 2,
      "explanation": "Register indirect addressing uses the contents of a register as the memory address to access data."
    },
    {
      "question": "Which processor architecture is x86 based on?",
      "options": [
        "RISC",
        "CISC",
        "MISC",
        "EPIC"
      ],
      "correct": 1,
      "explanation": "The x86 architecture (Intel and AMD) is based on CISC, though modern implementations include RISC-like optimizations."
    },
    {
      "question": "What is immediate addressing?",
      "options": [
        "Data is in memory",
        "Data is in a register",
        "Data is part of the instruction itself",
        "Data address is calculated"
      ],
      "correct": 2,
      "explanation": "Immediate addressing includes the actual data value directly in the instruction, providing fastest access without memory lookup."
    },
    {
      "question": "What does ISA stand for?",
      "options": [
        "Instruction Set Architecture",
        "Internal System Access",
        "Integrated Software Application",
        "Input/Output System Array"
      ],
      "correct": 0,
      "explanation": "ISA is the Instruction Set Architecture, defining the interface between hardware and software, including instructions and data types."
    }
  ]
}
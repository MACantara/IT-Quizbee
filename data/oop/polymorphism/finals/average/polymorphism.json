{
  "subtopic_id": "polymorphism",
  "subtopic_name": "Polymorphism",
  "mode": "finals",
  "difficulty": "average",
  "questions": [
    {
      "question": "What polymorphism type uses generic types?",
      "answer": "parametric polymorphism",
      "alternatives": ["parametric"],
      "explanation": "Parametric polymorphism works with generic types."
    },
    {
      "question": "What polymorphism type uses function or operator overloading?",
      "answer": "ad-hoc polymorphism",
      "alternatives": ["ad hoc polymorphism"],
      "explanation": "Ad-hoc polymorphism provides different implementations."
    },
    {
      "question": "What polymorphism type uses inheritance?",
      "answer": "subtype polymorphism",
      "alternatives": ["inclusion polymorphism"],
      "explanation": "Subtype polymorphism allows substituting derived types."
    },
    {
      "question": "What C++ table stores virtual function pointers?",
      "answer": "vtable",
      "alternatives": ["virtual table", "v-table"],
      "explanation": "Vtables enable dynamic method dispatch."
    },
    {
      "question": "What determines which overloaded method to call?",
      "answer": "method signature",
      "alternatives": ["function signature", "parameters"],
      "explanation": "Signatures include parameter types and count."
    },
    {
      "question": "What Java annotation prevents method overriding?",
      "answer": "@Override",
      "alternatives": ["Override"],
      "explanation": "Override annotation ensures correct method signature."
    },
    {
      "question": "What allows operators to work with custom types?",
      "answer": "operator overloading",
      "alternatives": ["overloading operators"],
      "explanation": "Operator overloading customizes operator behavior."
    },
    {
      "question": "What mechanism resolves method calls at runtime?",
      "answer": "dynamic dispatch",
      "alternatives": ["dynamic method dispatch"],
      "explanation": "Dynamic dispatch selects methods based on actual type."
    },
    {
      "question": "What decorator enables method overriding in Python?",
      "answer": "no decorator needed",
      "alternatives": ["none"],
      "explanation": "Python allows overriding without special syntax."
    },
    {
      "question": "What feature allows multiple constructors?",
      "answer": "constructor overloading",
      "alternatives": ["overloading constructors"],
      "explanation": "Constructor overloading provides initialization options."
    }
  ]
}
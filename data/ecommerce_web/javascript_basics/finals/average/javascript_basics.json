{
  "subtopic_id": "javascript_basics",
  "subtopic_name": "JavaScript Basics",
  "mode": "finals",
  "difficulty": "average",
  "questions": [
    {
      "question": "What transforms array elements?",
      "answer": "map()",
      "alternatives": [
        "Array map method"
      ],
      "explanation": "map() transforms each array element using function. Returns: new array (same length). Syntax: array.map(element => element * 2). Common: convert data format, calculate values. Not modifying original. Functional programming: preferred over for loops."
    },
    {
      "question": "What filters array elements?",
      "answer": "filter()",
      "alternatives": [
        "Array filter method"
      ],
      "explanation": "filter() selects elements meeting condition. Returns: new array with matching elements. Syntax: array.filter(element => element > 5). Common: find items, remove invalid. Non-destructive: original unchanged. Chainable: combine with map(), reduce()."
    },
    {
      "question": "What selects HTML element?",
      "answer": "document.querySelector()",
      "alternatives": [
        "DOM selector"
      ],
      "explanation": "document.querySelector() selects first matching element. Syntax: document.querySelector('.class'). Returns: element or null. Selectors: CSS syntax. Alternative: getElementById(), getElementsByClassName() (less common now). Manipulate: change content, style, attributes."
    },
    {
      "question": "What responds to user action?",
      "answer": "Event listener",
      "alternatives": [
        "Event handler"
      ],
      "explanation": "Event listener responds to user action (click, input, submit). Syntax: element.addEventListener('event', function). Events: 'click', 'submit', 'keydown', 'change'. Parameters: event object contains details. Remove: removeEventListener(). Essential: interactivity."
    },
    {
      "question": "What modifies HTML content?",
      "answer": "innerHTML",
      "alternatives": [
        "innerHTML property"
      ],
      "explanation": "innerHTML sets/gets HTML content. Syntax: element.innerHTML = '<p>Hello</p>'. Security risk: XSS if trusting user input. Alternative: textContent (text only). Caution: overwrites children. Parse/render: browser processes HTML. Common but dangerous."
    },
    {
      "question": "What changes element style?",
      "answer": "style property",
      "alternatives": [
        "Style attribute"
      ],
      "explanation": "style property modifies CSS. Syntax: element.style.color = 'red'. Properties: camelCase (backgroundColor not background-color). Inline styles: high specificity. Alternative: classList (better). Apply multiple: use class instead of individual properties."
    },
    {
      "question": "What manages element classes?",
      "answer": "classList",
      "alternatives": [
        "Class management"
      ],
      "explanation": "classList manages CSS classes. Methods: add(), remove(), toggle(). Syntax: element.classList.add('active'). Multiple classes: preferred over style property. Separation: HTML structure, CSS styling. Dynamic behavior: toggle on events."
    },
    {
      "question": "What triggers multiple conditions?",
      "answer": "Switch statement",
      "alternatives": [
        "Switch/case"
      ],
      "explanation": "Switch evaluates multiple conditions. Syntax: switch(value) { case 1: ... break; }. Break: prevents fallthrough. Default: if no match. Cleaner than if/else chains. Pattern matching: exact value comparison. Efficient: multiple branches."
    },
    {
      "question": "What reuses code?",
      "answer": "Function",
      "alternatives": [
        "Method",
        "Function definition"
      ],
      "explanation": "Function encapsulates reusable code. Syntax: function name(parameters) {...} or const name = (parameters) => {...}. Arrow functions: modern syntax. Parameters: inputs. Return: output. Call: name(arguments). DRY: don't repeat yourself principle."
    },
    {
      "question": "What waits for delayed execution?",
      "answer": "setTimeout()",
      "alternatives": [
        "Timeout function"
      ],
      "explanation": "setTimeout() executes code after delay. Syntax: setTimeout(function, milliseconds). Example: setTimeout(() => alert('hi'), 2000). Cancel: clearTimeout(id). Common: delays, animations, API polling. setInterval(): repeats after intervals."
    }
  ]
}
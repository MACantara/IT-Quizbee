{
  "subtopic_id": "testing",
  "subtopic_name": "Software Testing",
  "mode": "finals",
  "difficulty": "difficult",
  "questions": [
    {
      "question": "What testing technique introduces small faults to verify tests detect them?",
      "answer": "Mutation Testing",
      "alternatives": [],
      "explanation": "Mutation Testing creates modified versions of code with small changes to verify that test cases can detect these intentional defects."
    },
    {
      "question": "What testing technique provides random data to find unexpected errors?",
      "answer": "Fuzz Testing",
      "alternatives": ["Fuzzing"],
      "explanation": "Fuzz Testing feeds random, invalid, or unexpected data to the system to discover security vulnerabilities, crashes, or memory leaks."
    },
    {
      "question": "What testing approach verifies properties that should always hold true?",
      "answer": "Property-Based Testing",
      "alternatives": [],
      "explanation": "Property-Based Testing defines invariants or properties that should always be true and generates test cases automatically to verify these properties."
    },
    {
      "question": "What coverage metric measures the percentage of code lines executed?",
      "answer": "Statement Coverage",
      "alternatives": ["Line Coverage"],
      "explanation": "Statement Coverage measures the proportion of executable statements that have been executed at least once during testing."
    },
    {
      "question": "What coverage metric measures the percentage of decision points tested?",
      "answer": "Branch Coverage",
      "alternatives": ["Decision Coverage"],
      "explanation": "Branch Coverage ensures each possible branch from each decision point is executed at least once, testing both true and false outcomes."
    },
    {
      "question": "What test object simulates the behavior of real objects in controlled ways?",
      "answer": "Mock",
      "alternatives": ["Mock Object"],
      "explanation": "Mocks are objects that simulate real objects with predefined behavior and can verify interactions, recording calls made to them."
    },
    {
      "question": "What simplified object provides fixed responses without behavior verification?",
      "answer": "Stub",
      "alternatives": [],
      "explanation": "Stubs provide canned answers to calls made during tests but don't record information about how they were called."
    },
    {
      "question": "What testing verifies two services can communicate correctly?",
      "answer": "Contract Testing",
      "alternatives": [],
      "explanation": "Contract Testing verifies that services can communicate by ensuring the provider's responses match the consumer's expectations defined in a contract."
    },
    {
      "question": "What testing intentionally disrupts production systems to test resilience?",
      "answer": "Chaos Engineering",
      "alternatives": [],
      "explanation": "Chaos Engineering introduces controlled failures into production systems to verify they can withstand unexpected conditions and remain resilient."
    },
    {
      "question": "What metric measures all possible paths through the code executed?",
      "answer": "Path Coverage",
      "alternatives": [],
      "explanation": "Path Coverage measures the percentage of all possible execution paths through the code that have been tested, the most comprehensive coverage metric."
    }
  ]
}
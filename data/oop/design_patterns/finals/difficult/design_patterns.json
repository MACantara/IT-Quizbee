{
  "subtopic_id": "design_patterns",
  "subtopic_name": "Design Patterns",
  "mode": "finals",
  "difficulty": "difficult",
  "questions": [
    {
      "question": "What pattern separates operations from object structure?",
      "answer": "visitor",
      "alternatives": [
        "visitor pattern"
      ],
      "explanation": "Visitor adds operations without modifying classes.",
      "id": "des_pat_des_pat_d_finals_000"
    },
    {
      "question": "What pattern handles requests through chain of handlers?",
      "answer": "chain of responsibility",
      "alternatives": [
        "chain of responsibility pattern"
      ],
      "explanation": "Chain of responsibility passes requests along handler chain.",
      "id": "des_pat_des_pat_d_finals_001"
    },
    {
      "question": "What pattern interprets sentences in a language?",
      "answer": "interpreter",
      "alternatives": [
        "interpreter pattern"
      ],
      "explanation": "Interpreter evaluates grammar and expressions.",
      "id": "des_pat_des_pat_d_finals_002"
    },
    {
      "question": "What pattern coordinates complex object interactions?",
      "answer": "mediator",
      "alternatives": [
        "mediator pattern"
      ],
      "explanation": "Mediator encapsulates object interactions.",
      "id": "des_pat_des_pat_d_finals_003"
    },
    {
      "question": "What anti-pattern creates unnecessary abstraction?",
      "answer": "golden hammer",
      "alternatives": [
        "gold plating"
      ],
      "explanation": "Golden hammer applies same solution everywhere.",
      "id": "des_pat_des_pat_d_finals_004"
    },
    {
      "question": "What pattern allows undo operations?",
      "answer": "command",
      "alternatives": [
        "command pattern"
      ],
      "explanation": "Command pattern stores operation history.",
      "id": "des_pat_des_pat_d_finals_005"
    },
    {
      "question": "What pattern creates objects based on templates?",
      "answer": "prototype",
      "alternatives": [
        "prototype pattern"
      ],
      "explanation": "Prototype clones objects instead of creating new ones.",
      "id": "des_pat_des_pat_d_finals_006"
    },
    {
      "question": "What book popularized design patterns?",
      "answer": "Gang of Four",
      "alternatives": [
        "GoF",
        "Design Patterns"
      ],
      "explanation": "Gang of Four book documented 23 design patterns.",
      "id": "des_pat_des_pat_d_finals_007"
    },
    {
      "question": "What pattern manages object lifecycle efficiently?",
      "answer": "object pool",
      "alternatives": [
        "object pool pattern"
      ],
      "explanation": "Object pool reuses expensive objects.",
      "id": "des_pat_des_pat_d_finals_008"
    },
    {
      "question": "What pattern implements lazy initialization safely?",
      "answer": "double-checked locking",
      "alternatives": [
        "double checked locking"
      ],
      "explanation": "Double-checked locking optimizes thread-safe singleton.",
      "id": "des_pat_des_pat_d_finals_009"
    }
  ]
}
{
  "subtopic_id": "polymorphism",
  "subtopic_name": "Polymorphism",
  "mode": "elimination",
  "questions": [
    {
      "question": "What does polymorphism mean in Greek?",
      "options": [
        "One shape",
        "Many shapes",
        "No shape",
        "Fixed shape"
      ],
      "correct": 1,
      "explanation": "Polymorphism means many forms or shapes.",
      "id": "oop_poly_elim_000"
    },
    {
      "question": "What type of polymorphism occurs at compile time?",
      "options": [
        "Runtime polymorphism",
        "Dynamic polymorphism",
        "Compile-time polymorphism",
        "Late binding"
      ],
      "correct": 2,
      "explanation": "Compile-time polymorphism is resolved during compilation.",
      "id": "oop_poly_elim_001"
    },
    {
      "question": "What is another name for compile-time polymorphism?",
      "options": [
        "Late binding",
        "Dynamic binding",
        "Early binding",
        "Virtual binding"
      ],
      "correct": 2,
      "explanation": "Compile-time polymorphism uses early binding.",
      "id": "oop_poly_elim_002"
    },
    {
      "question": "What feature implements compile-time polymorphism?",
      "options": [
        "Method overriding",
        "Method overloading",
        "Virtual functions",
        "Abstract classes"
      ],
      "correct": 1,
      "explanation": "Method overloading resolves methods at compile time.",
      "id": "oop_poly_elim_003"
    },
    {
      "question": "What type of polymorphism occurs at runtime?",
      "options": [
        "Compile-time polymorphism",
        "Static polymorphism",
        "Runtime polymorphism",
        "Early binding"
      ],
      "correct": 2,
      "explanation": "Runtime polymorphism resolves methods during execution.",
      "id": "oop_poly_elim_004"
    },
    {
      "question": "What feature implements runtime polymorphism?",
      "options": [
        "Method overloading",
        "Method overriding",
        "Operator overloading",
        "Constructor overloading"
      ],
      "correct": 1,
      "explanation": "Method overriding enables runtime polymorphism.",
      "id": "oop_poly_elim_005"
    },
    {
      "question": "What keyword in C++ enables runtime polymorphism?",
      "options": [
        "static",
        "const",
        "virtual",
        "final"
      ],
      "correct": 2,
      "explanation": "Virtual functions allow dynamic method resolution.",
      "id": "oop_poly_elim_006"
    },
    {
      "question": "What differentiates overloaded methods?",
      "options": [
        "Return type",
        "Access modifier",
        "Parameters",
        "Exception handling"
      ],
      "correct": 2,
      "explanation": "Overloaded methods have different parameter lists.",
      "id": "oop_poly_elim_007"
    },
    {
      "question": "What must be identical in method overriding?",
      "options": [
        "Implementation",
        "Method signature",
        "Access modifier",
        "Return statement"
      ],
      "correct": 1,
      "explanation": "Overridden methods must have the same signature.",
      "id": "oop_poly_elim_008"
    },
    {
      "question": "What is polymorphism that works without type checking?",
      "options": [
        "Static typing",
        "Strong typing",
        "Duck typing",
        "Weak typing"
      ],
      "correct": 2,
      "explanation": "Duck typing focuses on behavior rather than type.",
      "id": "oop_poly_elim_009"
    }
  ]
}
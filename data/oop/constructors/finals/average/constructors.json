{
  "subtopic_id": "constructors",
  "subtopic_name": "Constructors & Destructors",
  "mode": "finals",
  "difficulty": "average",
  "questions": [
    {
      "question": "What happens when constructors call other constructors?",
      "answer": "constructor chaining",
      "alternatives": ["chaining"],
      "explanation": "Constructor chaining reuses initialization logic."
    },
    {
      "question": "What keyword in Java calls another constructor?",
      "answer": "this",
      "alternatives": ["this()"],
      "explanation": "This() invokes another constructor in the same class."
    },
    {
      "question": "What prevents constructor creation?",
      "answer": "private constructor",
      "alternatives": ["private"],
      "explanation": "Private constructors restrict instantiation."
    },
    {
      "question": "What pattern uses private constructors?",
      "answer": "singleton",
      "alternatives": ["singleton pattern"],
      "explanation": "Singleton pattern ensures one instance."
    },
    {
      "question": "What Java method runs during garbage collection?",
      "answer": "finalize",
      "alternatives": ["finalize()"],
      "explanation": "Finalize() performs cleanup before garbage collection."
    },
    {
      "question": "What provides automatic memory management?",
      "answer": "garbage collector",
      "alternatives": ["garbage collection", "GC"],
      "explanation": "Garbage collectors reclaim unused memory."
    },
    {
      "question": "What order are constructors called in inheritance?",
      "answer": "parent then child",
      "alternatives": ["base then derived", "superclass then subclass"],
      "explanation": "Parent constructors execute before child constructors."
    },
    {
      "question": "What order are destructors called in inheritance?",
      "answer": "child then parent",
      "alternatives": ["derived then base", "subclass then superclass"],
      "explanation": "Child destructors execute before parent destructors."
    },
    {
      "question": "What constructor accepts one parameter for conversion?",
      "answer": "conversion constructor",
      "alternatives": ["converting constructor"],
      "explanation": "Conversion constructors enable implicit type conversion."
    },
    {
      "question": "What keyword prevents implicit conversions?",
      "answer": "explicit",
      "alternatives": ["Explicit"],
      "explanation": "Explicit keyword disables automatic conversions."
    }
  ]
}
{
  "subtopic_id": "software_fundamentals",
  "subtopic_name": "Software Fundamentals",
  "mode": "finals",
  "difficulty": "easy",
  "questions": [
    {
      "question": "What is software?",
      "answer": "Program instructions for computers",
      "alternatives": [
        "Code and data"
      ],
      "explanation": "Software: intangible computer instructions. Purpose: control hardware, process data. Categories: system, application. Distribution: digital delivery. Licensing: copyright protected typically."
    },
    {
      "question": "What is an application?",
      "answer": "Program for specific task",
      "alternatives": [
        "User software"
      ],
      "explanation": "Application: software for end-users. Purpose: accomplish specific task. Examples: browsers, editors, games. Distribution: installed or cloud-based. Updates: regular improvements."
    },
    {
      "question": "What is system software?",
      "answer": "OS and core utilities",
      "alternatives": [
        "System programs"
      ],
      "explanation": "System software: manages computer hardware. Purpose: allocate resources, run applications. Includes: OS, drivers, utilities. Requirement: needed before applications. Complexity: highly complex."
    },
    {
      "question": "What is an operating system?",
      "answer": "Software managing hardware resources",
      "alternatives": [
        "OS"
      ],
      "explanation": "OS: main system software layer. Function: resource allocation, multitasking, security. Examples: Windows, macOS, Linux. Importance: essential for computer. Responsibility: fairness among programs."
    },
    {
      "question": "What is a driver?",
      "answer": "Software controlling hardware device",
      "alternatives": [
        "Device software"
      ],
      "explanation": "Driver: interface between OS and hardware. Purpose: translate OS commands. Installation: often automatic. Updates: improve compatibility. Importance: device functionality depends."
    },
    {
      "question": "What is firmware?",
      "answer": "Software permanently stored in hardware",
      "alternatives": [
        "Permanent software"
      ],
      "explanation": "Firmware: ROM-stored software. Purpose: hardware initialization, low-level control. Updates: difficult, risky. Examples: BIOS, router software. Distinction: between SW and HW."
    },
    {
      "question": "What is a utility?",
      "answer": "System maintenance software",
      "alternatives": [
        "System tool"
      ],
      "explanation": "Utility: performs system maintenance tasks. Examples: backup, compression, optimization. Purpose: system health, performance. Installation: standalone or bundled. Importance: system longevity."
    },
    {
      "question": "What is open-source software?",
      "answer": "Code freely available for viewing/modification",
      "alternatives": [
        "Free source code"
      ],
      "explanation": "Open-source: source code visible, modifiable. License: various copyleft/permissive. Examples: Linux, Firefox, Python. Benefits: transparency, community-driven. Adoption: increasing worldwide."
    },
    {
      "question": "What is proprietary software?",
      "answer": "Closed-source commercial software",
      "alternatives": [
        "Commercial software"
      ],
      "explanation": "Proprietary: source code secret, restricted. License: restrictive, paid. Examples: Windows, Photoshop. Control: vendor controlled. Cost: typically paid."
    },
    {
      "question": "What is software licensing?",
      "answer": "Legal permissions for software use",
      "alternatives": [
        "License agreement"
      ],
      "explanation": "License: governs software usage rights. Types: GPL, MIT, Apache, commercial. Compliance: legally binding. Violation: legal consequences. Importance: intellectual property protection."
    }
  ]
}
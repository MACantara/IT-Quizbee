{
  "subtopic_id": "solid_principles",
  "subtopic_name": "SOLID Principles",
  "mode": "finals",
  "difficulty": "average",
  "questions": [
    {
      "question": "What metric measures Single Responsibility violations?",
      "answer": "cohesion",
      "alternatives": ["class cohesion"],
      "explanation": "Low cohesion indicates multiple responsibilities."
    },
    {
      "question": "What technique implements Open/Closed Principle?",
      "answer": "inheritance",
      "alternatives": ["polymorphism", "abstraction"],
      "explanation": "Inheritance and composition enable extension."
    },
    {
      "question": "What violates Liskov Substitution Principle?",
      "answer": "breaking contracts",
      "alternatives": ["changing behavior", "violating preconditions"],
      "explanation": "Subtypes must maintain parent contracts."
    },
    {
      "question": "What helps implement Interface Segregation?",
      "answer": "role interfaces",
      "alternatives": ["small interfaces", "specific interfaces"],
      "explanation": "Role interfaces serve specific client needs."
    },
    {
      "question": "What implements Dependency Inversion?",
      "answer": "dependency injection",
      "alternatives": ["DI", "inversion of control"],
      "explanation": "Dependency injection provides abstractions."
    },
    {
      "question": "What pattern supports Single Responsibility?",
      "answer": "facade",
      "alternatives": ["facade pattern"],
      "explanation": "Facade delegates to specialized classes."
    },
    {
      "question": "What pattern supports Open/Closed?",
      "answer": "strategy",
      "alternatives": ["strategy pattern"],
      "explanation": "Strategy adds behavior without modification."
    },
    {
      "question": "What ensures Liskov Substitution compliance?",
      "answer": "behavioral subtyping",
      "alternatives": ["design by contract"],
      "explanation": "Behavioral subtyping maintains expected behavior."
    },
    {
      "question": "What reduces Interface Segregation violations?",
      "answer": "interface splitting",
      "alternatives": ["breaking interfaces"],
      "explanation": "Split large interfaces into focused ones."
    },
    {
      "question": "What supports Dependency Inversion?",
      "answer": "abstract factory",
      "alternatives": ["factory pattern"],
      "explanation": "Abstract factory provides abstraction layer."
    }
  ]
}
{
  "subtopic_id": "propositional_logic",
  "subtopic_name": "Propositional Logic",
  "mode": "finals",
  "difficulty": "difficult",
  "questions": [
    {
      "question": "What is functional completeness?",
      "answer": "Operators express all truth functions",
      "alternatives": [
        "Universal completeness"
      ],
      "explanation": "Complete set: {, , } sufficient. Alternative: {NAND} alone sufficient. Alternative: {NOR} alone sufficient. Importance: minimal operators needed. Application: circuit design (fewer gates). Consequence: any formula expressible."
    },
    {
      "question": "What is Normal Conjunctive Form?",
      "answer": "AND of OR clauses",
      "alternatives": [
        "CNF"
      ],
      "explanation": "CNF: (AB)(CD)... structure. Standardization: all formulas convertible. Algorithm: distribution, association. Importance: SAT solver input format. Complexity: conversion can increase size. Use: theorem proving, automated reasoning."
    },
    {
      "question": "What is Normal Disjunctive Form?",
      "answer": "OR of AND clauses",
      "alternatives": [
        "DNF"
      ],
      "explanation": "DNF: (AB)(CD)... structure. Alternative to CNF: different normal form. Conversion: different algorithm. Size: typically larger than CNF. Simplicity: sometimes more intuitive. Use: analysis, visualization, truth conditions."
    },
    {
      "question": "What represents formula structure?",
      "answer": "Parse tree",
      "alternatives": [
        "Syntax tree"
      ],
      "explanation": "Parse tree: hierarchical operator application. Nodes: operators, leaves: atoms. Root: main connective. Construction: respecting operator precedence. Use: formal analysis, evaluation. Complexity: tree size indicates formula complexity. Application: compiler design, parsing."
    },
    {
      "question": "What determines operator precedence?",
      "answer": "Standard ordering (NOT, AND, OR, etc.)",
      "alternatives": [
        "Operator precedence rules"
      ],
      "explanation": "Precedence: NOT > AND > OR >  > . Evaluation: higher precedence first. Parentheses: override precedence. Convention: different systems may vary. Importance: prevents ambiguity. Example: pq means (p)q, not (pq)."
    },
    {
      "question": "What enables automated formula satisfaction?",
      "answer": "SAT solver algorithm",
      "alternatives": [
        "Satisfiability solver"
      ],
      "explanation": "SAT: determine if formula satisfiable. NP-complete: potentially hard (exponential). Algorithms: DPLL, CDCL, others. Efficiency: heuristics, learning clauses. Application: verification, synthesis, security. Importance: cornerstone of computer science."
    },
    {
      "question": "What is resolution principle?",
      "answer": "Inference rule for clause combining",
      "alternatives": [
        "Proof by resolution"
      ],
      "explanation": "Resolution: from pA and pB derive AB. Soundness: preserves truth. Completeness: can prove any tautology. Efficiency: systematic search. Application: theorem proving, logic programming. Basis: many automated reasoners."
    },
    {
      "question": "What prevents formula interpretation ambiguity?",
      "answer": "Parenthesization",
      "alternatives": [
        "Explicit grouping"
      ],
      "explanation": "Parentheses: make precedence explicit. Importance: removes ambiguity. Example: (pq)r vs p(qr) different. Standard: right-associativity sometimes assumed. Clarity: always better with parentheses. Parsing: guides interpretation."
    },
    {
      "question": "What is the Semantic Tableaux?",
      "answer": "Proof method using formula reduction",
      "alternatives": [
        "Tableau method"
      ],
      "explanation": "Tableaux: tree of formula branches. Rules: decompose formulas into simpler. Contradiction: closed branch (detected). Completeness: can prove valid formulas. Efficiency: often more intuitive. Application: automated reasoning, theorem proving."
    },
    {
      "question": "What is satisfiability?",
      "answer": "Formula true for some variable assignment",
      "alternatives": [
        "Satisfiable formula"
      ],
      "explanation": "Satisfiable:  assignment makes formula true. Unsatisfiable: no such assignment. Tautology: always satisfiable (every assignment). Contradiction: never satisfiable. Testing: truth table (exponential) or SAT solver. Importance: fundamental decidability question."
    }
  ]
}
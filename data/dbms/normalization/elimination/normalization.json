{
  "subtopic_id": "normalization",
  "subtopic_name": "Normalization",
  "mode": "elimination",
  "questions": [
    {
      "question": "What is the primary goal of database normalization?",
      "options": [
        "To increase data redundancy",
        "To reduce data redundancy and improve integrity",
        "To make queries slower",
        "To increase storage space"
      ],
      "correct": 1,
      "explanation": "Normalization organizes data to minimize redundancy and dependency, improving data integrity.",
      "id": "dbms_norm_elim_000"
    },
    {
      "question": "What is First Normal Form (1NF)?",
      "options": [
        "No partial dependencies",
        "Each column contains atomic values",
        "No transitive dependencies",
        "All attributes depend on the key"
      ],
      "correct": 1,
      "explanation": "1NF requires that all column values be atomic, meaning indivisible and single-valued.",
      "id": "dbms_norm_elim_001"
    },
    {
      "question": "What does Second Normal Form (2NF) eliminate?",
      "options": [
        "Transitive dependencies",
        "Partial dependencies",
        "Multi-valued dependencies",
        "Join dependencies"
      ],
      "correct": 1,
      "explanation": "2NF removes partial dependencies where non-key attributes depend on part of a composite key.",
      "id": "dbms_norm_elim_002"
    },
    {
      "question": "What does Third Normal Form (3NF) eliminate?",
      "options": [
        "Partial dependencies",
        "Atomic values",
        "Transitive dependencies",
        "Functional dependencies"
      ],
      "correct": 2,
      "explanation": "3NF eliminates transitive dependencies where non-key attributes depend on other non-key attributes.",
      "id": "dbms_norm_elim_003"
    },
    {
      "question": "What condition must be met for a table to be in 2NF?",
      "options": [
        "Must be in 1NF and have no transitive dependencies",
        "Must be in 1NF and have no partial dependencies",
        "Must have a composite primary key",
        "Must have all atomic values"
      ],
      "correct": 1,
      "explanation": "A table must first be in 1NF and then have all non-key attributes fully dependent on the entire primary key.",
      "id": "dbms_norm_elim_004"
    },
    {
      "question": "What is a partial dependency?",
      "options": [
        "A non-key attribute depends on another non-key attribute",
        "A non-key attribute depends on part of a composite key",
        "All attributes depend on the whole key",
        "A key depends on a non-key attribute"
      ],
      "correct": 1,
      "explanation": "A partial dependency exists when a non-key attribute depends on only part of a composite primary key.",
      "id": "dbms_norm_elim_005"
    },
    {
      "question": "What is a transitive dependency?",
      "options": [
        "A depends on B, and B depends on C",
        "A non-key attribute depends on part of the key",
        "All attributes depend on the primary key",
        "Multiple tables depend on each other"
      ],
      "correct": 0,
      "explanation": "A transitive dependency occurs when a non-key attribute depends on another non-key attribute, which depends on the key.",
      "id": "dbms_norm_elim_006"
    },
    {
      "question": "What normal form requires every non-key attribute to be non-transitively dependent on the primary key?",
      "options": [
        "1NF",
        "2NF",
        "3NF",
        "BCNF"
      ],
      "correct": 2,
      "explanation": "Third Normal Form (3NF) requires elimination of transitive dependencies on the primary key.",
      "id": "dbms_norm_elim_007"
    },
    {
      "question": "What is Boyce-Codd Normal Form (BCNF)?",
      "options": [
        "Same as 3NF",
        "A stronger version of 3NF",
        "Weaker than 2NF",
        "Only for composite keys"
      ],
      "correct": 1,
      "explanation": "BCNF is a stricter version of 3NF where every determinant must be a candidate key.",
      "id": "dbms_norm_elim_008"
    },
    {
      "question": "What process involves breaking a table into multiple tables?",
      "options": [
        "Denormalization",
        "Normalization",
        "Decomposition",
        "Aggregation"
      ],
      "correct": 2,
      "explanation": "Decomposition splits a table into smaller tables to achieve higher normal forms and reduce redundancy.",
      "id": "dbms_norm_elim_009"
    }
  ]
}
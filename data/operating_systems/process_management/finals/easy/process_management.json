{
  "subtopic_id": "process_management",
  "subtopic_name": "Process Management",
  "mode": "finals",
  "difficulty": "easy",
  "questions": [
    {
      "question": "What is a program in execution with its own resources?",
      "answer": "Process",
      "alternatives": [],
      "explanation": "A process is an executing program with allocated memory, file handles, and other resources. Each process has its own address space and PCB."
    },
    {
      "question": "What lightweight execution unit shares memory within a process?",
      "answer": "Thread",
      "alternatives": [],
      "explanation": "Threads execute within a process sharing the same memory space. They enable concurrent execution with lower overhead than separate processes."
    },
    {
      "question": "What process state means it's currently executing on the CPU?",
      "answer": "Running",
      "alternatives": [],
      "explanation": "The running state indicates active CPU execution. Only one process per core can be running at any given time."
    },
    {
      "question": "What state indicates a process is waiting in the ready queue?",
      "answer": "Ready",
      "alternatives": [],
      "explanation": "The ready state means the process has all resources except CPU time. It's queued for scheduling."
    },
    {
      "question": "What state means a process is waiting for I/O completion?",
      "answer": "Blocked",
      "alternatives": ["Waiting"],
      "explanation": "The blocked or waiting state indicates the process cannot proceed until an event occurs. It's not schedulable during this time."
    },
    {
      "question": "What data structure stores process state and context information?",
      "answer": "Process Control Block",
      "alternatives": ["PCB"],
      "explanation": "The PCB contains all information about a process including registers, state, memory limits, and file descriptors."
    },
    {
      "question": "What UNIX system call creates a child process?",
      "answer": "fork",
      "alternatives": [],
      "explanation": "fork creates a duplicate process with a new process ID. The child is a copy of the parent at the time of the call."
    },
    {
      "question": "What system call loads a new program into a process?",
      "answer": "exec",
      "alternatives": [],
      "explanation": "exec replaces the current process image with a new program. The process ID remains the same but code and data are replaced."
    },
    {
      "question": "What system call makes a parent wait for child termination?",
      "answer": "wait",
      "alternatives": [],
      "explanation": "wait suspends the parent until a child terminates. It returns the child's exit status and cleans up the zombie process."
    },
    {
      "question": "What terminated process still has a process table entry?",
      "answer": "Zombie process",
      "alternatives": ["Zombie"],
      "explanation": "A zombie process has finished execution but its PCB remains until the parent calls wait. It holds minimal system resources."
    }
  ]
}
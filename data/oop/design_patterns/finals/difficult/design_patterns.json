{
  "subtopic_id": "design_patterns",
  "subtopic_name": "Design Patterns",
  "mode": "finals",
  "difficulty": "difficult",
  "questions": [
    {
      "question": "What is the Visitor pattern?",
      "answer": "Separate operations from structure",
      "alternatives": [
        "Double dispatch"
      ],
      "explanation": "Visitor: operation objects. Purpose: add operations without modification. Pattern: double dispatch. Benefit: flexibility. Importance: behavioral pattern."
    },
    {
      "question": "What is the flyweight pattern?",
      "answer": "Share common data across many objects",
      "alternatives": [
        "Object sharing"
      ],
      "explanation": "Flyweight: intrinsic state shared. Purpose: memory efficiency. Benefit: reduce memory. Example: text editor characters. Importance: structural pattern."
    },
    {
      "question": "What is the Abstract Factory pattern?",
      "answer": "Create families of related objects",
      "alternatives": [
        "Object families"
      ],
      "explanation": "Factory: creates families. Purpose: consistency. Benefit: switch families easily. Example: UI themes. Importance: creational pattern."
    },
    {
      "question": "What is double dispatch?",
      "answer": "Method selection based on two types",
      "alternatives": [
        "Two types"
      ],
      "explanation": "Dispatch: first call selects object. Method: second call depends on both types. Benefit: type-safe. Example: visitor. Importance: advanced technique."
    },
    {
      "question": "What is an anti-pattern?",
      "answer": "Solution that looks good but causes problems",
      "alternatives": [
        "Bad pattern"
      ],
      "explanation": "Anti-pattern: appears beneficial. Problem: hidden costs. Example: God object. Purpose: avoid these. Importance: learning tool."
    },
    {
      "question": "What is the God Object anti-pattern?",
      "answer": "One class does too much",
      "alternatives": [
        "Too much"
      ],
      "explanation": "God object: violates SRP. Problem: hard to maintain. Solution: split responsibilities. Example: large controller. Importance: anti-pattern."
    },
    {
      "question": "What is the Spaghetti Code anti-pattern?",
      "answer": "Unstructured code hard to follow",
      "alternatives": [
        "Messy code"
      ],
      "explanation": "Spaghetti: tangled flow. Problem: hard to understand. Solution: structure, patterns. Example: deep nesting. Importance: anti-pattern."
    },
    {
      "question": "What is the Lazy Singleton pattern issue?",
      "answer": "Thread-unsafe singleton creation",
      "alternatives": [
        "Thread safety"
      ],
      "explanation": "Issue: race condition. Solution: eager initialization or double-checked locking. Language: Java requires synchronization. Importance: concurrency issue."
    },
    {
      "question": "What is the difference between State and Strategy?",
      "answer": "State is internal and changes, Strategy is external choice",
      "alternatives": [
        "Distinction"
      ],
      "explanation": "State: internal, controlled by context. Strategy: external, chosen by client. Both: encapsulate behavior. Purpose: understand difference. Importance: distinction."
    },
    {
      "question": "What is the Pattern Language concept?",
      "answer": "Related patterns forming a comprehensive solution",
      "alternatives": [
        "Pattern relations"
      ],
      "explanation": "Language: patterns work together. Purpose: higher-level solutions. Benefit: understand relationships. Example: POSA patterns. Importance: pattern thinking."
    }
  ]
}
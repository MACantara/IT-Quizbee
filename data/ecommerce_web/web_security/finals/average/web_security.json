{
  "subtopic_id": "web_security",
  "subtopic_name": "Web Security",
  "mode": "finals",
  "difficulty": "average",
  "questions": [
    {
      "question": "What prevents request forgery?",
      "answer": "CSRF protection",
      "alternatives": [
        "Anti-CSRF tokens"
      ],
      "explanation": "CSRF protection prevents cross-site requests. Attack: attacker makes unauthorized requests. Prevention: tokens validate request origin. Techniques: SameSite cookies, Origin checking. Implementation: hidden tokens in forms. Importance: protects users. Transparent: doesn't affect UX."
    },
    {
      "question": "What prevents script injection?",
      "answer": "XSS prevention",
      "alternatives": [
        "Cross-site scripting"
      ],
      "explanation": "XSS prevention prevents malicious scripts. Attack: inject script in page, steal cookies/data. Prevention: output encoding, CSP headers, sanitization. Input: filter user-supplied data. Output: encode before displaying. Levels: reflected, stored, DOM-based. Testing: security scanners detect."
    },
    {
      "question": "What prevents data leakage?",
      "answer": "SQL injection prevention",
      "alternatives": [
        "Parameterized queries"
      ],
      "explanation": "SQL injection prevention protects database. Attack: malicious SQL in input. Prevention: parameterized queries, ORM, stored procedures. Techniques: prepare statement, escape characters. Testing: penetration testing finds vulnerabilities. Impact: critical vulnerability. Importance: common, dangerous."
    },
    {
      "question": "What secures sessions?",
      "answer": "Session management",
      "alternatives": [
        "Session security"
      ],
      "explanation": "Session management maintains secure sessions. Techniques: secure tokens, expiration, HTTPOnly cookies. Timeout: logout after inactivity. Regenerate: new session on login. Revocation: logout invalidates session. Tracking: user activity logged. Importance: prevents hijacking. Implementation: frameworks provide."
    },
    {
      "question": "What controls policy?",
      "answer": "Content Security Policy",
      "alternatives": [
        "CSP"
      ],
      "explanation": "CSP controls which content loads. Purpose: prevent XSS attacks, data exfiltration. Directives: script-src, style-src, img-src, etc. Implementation: HTTP header, meta tag. Violation: reports blocked resources. Strict: stronger protection, may break. Flexibility: balance security and functionality."
    },
    {
      "question": "What secures headers?",
      "answer": "Security headers",
      "alternatives": [
        "HTTP security headers"
      ],
      "explanation": "Security headers provide protection. Examples: X-Frame-Options (clickjacking), X-Content-Type-Options (MIME sniffing), Strict-Transport-Security (HTTPS). Implementation: server-side configuration. Benefit: prevents certain attacks. Multiple: layered defense. Monitoring: verify headers present."
    },
    {
      "question": "What detects intrusions?",
      "answer": "Intrusion detection",
      "alternatives": [
        "IDS",
        "Threat detection"
      ],
      "explanation": "Intrusion detection identifies attacks. Methods: signature-based (known patterns), anomaly-based (unusual behavior). Alerts: suspicious activity flagged. Response: investigate, block attackers. Tools: SIEM systems, WAF rules. Automation: real-time alerts. Importance: early threat detection."
    },
    {
      "question": "What authenticates API requests?",
      "answer": "API security",
      "alternatives": [
        "API authentication"
      ],
      "explanation": "API security protects endpoints. Techniques: API keys, OAuth, JWT tokens. Validation: verify requester identity, authorization. Rate limiting: prevent abuse. HTTPS: encrypt traffic. Logging: audit access. Versioning: manage changes. Testing: security scanners, penetration tests."
    },
    {
      "question": "What manages vulnerabilities?",
      "answer": "Vulnerability management",
      "alternatives": [
        "Patch management"
      ],
      "explanation": "Vulnerability management identifies, fixes vulnerabilities. Process: scan, assess, prioritize, patch. Tools: vulnerability scanners, penetration testing. Timelines: critical patches urgent. Testing: verify fixes work. Disclosure: responsible process. Continuous: ongoing vigilance. Priority: reduce attack surface."
    },
    {
      "question": "What handles incidents?",
      "answer": "Incident response",
      "alternatives": [
        "Security incident"
      ],
      "explanation": "Incident response handles security breaches. Process: detect, respond, investigate, recover. Planning: incident response team, procedures. Communication: notify affected parties. Forensics: understand what happened. Mitigation: prevent future incidents. Learning: improve from incidents. Timing: respond quickly."
    }
  ]
}
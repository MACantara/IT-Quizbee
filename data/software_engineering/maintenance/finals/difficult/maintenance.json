{
  "subtopic_id": "maintenance",
  "subtopic_name": "Software Maintenance",
  "mode": "finals",
  "difficulty": "difficult",
  "questions": [
    {
      "question": "What is software maintenance?",
      "answer": "Modifying software after delivery to correct faults, improve performance, or adapt to changes",
      "alternatives": [],
      "explanation": "Software maintenance is the process of modifying a software product after it has been delivered to correct faults, improve performance or other attributes, or adapt to a changed environment."
    },
    {
      "question": "What is corrective maintenance?",
      "answer": "Fixing bugs and errors discovered after software release",
      "alternatives": [],
      "explanation": "Corrective maintenance involves diagnosing and fixing bugs, defects, and errors discovered in the software after it has been released to users. It's reactive maintenance in response to problems."
    },
    {
      "question": "What is adaptive maintenance?",
      "answer": "Modifying software to work in new or changed environments",
      "alternatives": [],
      "explanation": "Adaptive maintenance modifies software to keep it usable in a changed or changing environment, such as new operating systems, hardware, databases, or regulatory requirements. It ensures compatibility."
    },
    {
      "question": "What is perfective maintenance?",
      "answer": "Improving performance, maintainability, or adding enhancements requested by users",
      "alternatives": [],
      "explanation": "Perfective maintenance improves software by enhancing performance, maintainability, or adding new features based on user requests. It makes the software better without fixing defects or adapting to changes."
    },
    {
      "question": "What is preventive maintenance?",
      "answer": "Making changes to prevent future problems and improve maintainability",
      "alternatives": [],
      "explanation": "Preventive (or proactive) maintenance involves making changes to prevent future problems, such as refactoring code, updating documentation, and improving code structure to make future maintenance easier."
    },
    {
      "question": "What is technical debt in maintenance?",
      "answer": "Accumulated cost of quick fixes and shortcuts that make future maintenance harder",
      "alternatives": [],
      "explanation": "Technical debt is the implied cost of future rework caused by choosing quick, easy solutions now instead of better approaches. It accumulates over time and makes maintenance increasingly difficult and expensive."
    },
    {
      "question": "What is a software patch?",
      "answer": "A small update to fix specific bugs or security vulnerabilities",
      "alternatives": [],
      "explanation": "A patch is a small software update designed to fix specific problems, typically bugs or security vulnerabilities. Patches are usually applied without requiring a full reinstallation of the software."
    },
    {
      "question": "What is regression testing in maintenance?",
      "answer": "Re-testing software after changes to ensure existing functionality still works",
      "alternatives": [],
      "explanation": "Regression testing verifies that recent code changes haven't adversely affected existing functionality. It's crucial in maintenance to ensure fixes or enhancements don't introduce new bugs."
    },
    {
      "question": "Why does maintenance cost typically exceed development cost?",
      "answer": "Software often operates for many years, requiring ongoing fixes, updates, and adaptations",
      "alternatives": [],
      "explanation": "Maintenance typically costs more than initial development because software may be used for decades, requiring continuous bug fixes, updates, adaptations to new environments, and enhancements. Studies show maintenance can be 60-90% of total lifecycle cost."
    },
    {
      "question": "What is software evolution?",
      "answer": "The continuous change and growth of software over its lifetime",
      "alternatives": [],
      "explanation": "Software evolution is the process of continuous change and growth of software systems over their lifetime. Lehman's Laws describe how software must continuously evolve or become increasingly less useful as environments change."
    }
  ]
}
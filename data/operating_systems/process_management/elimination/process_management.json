{
  "subtopic_id": "process_management",
  "subtopic_name": "Process Management",
  "mode": "elimination",
  "questions": [
    {
      "question": "What is a program in execution called?",
      "options": [
        "Thread",
        "Process",
        "Job",
        "Task"
      ],
      "correct": 1,
      "explanation": "A process is a program in execution with its own memory space, resources, and execution state. It includes code, data, stack, and process control block."
    },
    {
      "question": "What process state indicates it's waiting for CPU time?",
      "options": [
        "Running",
        "Blocked",
        "Ready",
        "Terminated"
      ],
      "correct": 2,
      "explanation": "The ready state means the process has all needed resources except CPU time. It's waiting in the ready queue for the scheduler to assign CPU."
    },
    {
      "question": "What state is a process in when it's being executed by the CPU?",
      "options": [
        "Ready",
        "Running",
        "Waiting",
        "Suspended"
      ],
      "correct": 1,
      "explanation": "The running state indicates the process is currently executing instructions on the CPU. Only one process per CPU core can be in this state."
    },
    {
      "question": "What state indicates a process is waiting for I/O or an event?",
      "options": [
        "Ready",
        "Running",
        "Blocked",
        "New"
      ],
      "correct": 2,
      "explanation": "The blocked or waiting state means the process cannot proceed until an event occurs, like I/O completion. It's not eligible for CPU scheduling."
    },
    {
      "question": "What is the lightweight unit of execution within a process?",
      "options": [
        "Job",
        "Task",
        "Thread",
        "Fiber"
      ],
      "correct": 2,
      "explanation": "Threads are lightweight execution units within a process that share the same memory space. Multiple threads enable concurrent execution within one process."
    },
    {
      "question": "What data structure holds a process's state information?",
      "options": [
        "Stack",
        "Heap",
        "Process Control Block",
        "Page table"
      ],
      "correct": 2,
      "explanation": "The Process Control Block stores all information about a process including state, program counter, registers, memory limits, and scheduling data."
    },
    {
      "question": "What creates a duplicate of the calling process in UNIX?",
      "options": [
        "exec",
        "fork",
        "spawn",
        "clone"
      ],
      "correct": 1,
      "explanation": "The fork system call creates a child process that's a copy of the parent. The child gets a separate PCB and memory space with identical content."
    },
    {
      "question": "What system call replaces a process's memory with a new program?",
      "options": [
        "fork",
        "wait",
        "exec",
        "exit"
      ],
      "correct": 2,
      "explanation": "The exec family of system calls loads a new program into the current process's memory space, replacing the existing code and data."
    },
    {
      "question": "What mechanism allows processes to wait for child process completion?",
      "options": [
        "fork",
        "exec",
        "wait",
        "signal"
      ],
      "correct": 2,
      "explanation": "The wait system call suspends the parent process until one of its child processes terminates, returning the child's exit status."
    },
    {
      "question": "What is a process that has finished but still has an entry in the process table?",
      "options": [
        "Orphan process",
        "Daemon process",
        "Zombie process",
        "Background process"
      ],
      "correct": 2,
      "explanation": "A zombie process has completed execution but its PCB remains because the parent hasn't collected its exit status with wait. It consumes minimal resources."
    }
  ]
}
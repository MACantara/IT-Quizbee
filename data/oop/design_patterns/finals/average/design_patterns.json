{
  "subtopic_id": "design_patterns",
  "subtopic_name": "Design Patterns",
  "mode": "finals",
  "difficulty": "average",
  "questions": [
    {
      "question": "What are design patterns?",
      "answer": "Reusable solutions to commonly occurring problems in software design",
      "alternatives": [],
      "explanation": "Design patterns are proven, reusable solutions to commonly occurring problems in software design. They represent best practices and provide templates for solving design issues."
    },
    {
      "question": "What are the three main categories of design patterns?",
      "answer": "Creational, Structural, and Behavioral",
      "alternatives": [],
      "explanation": "Design patterns are categorized into three main types: Creational (object creation), Structural (object composition), and Behavioral (object interaction and responsibility)."
    },
    {
      "question": "What is the Singleton pattern?",
      "answer": "Ensures a class has only one instance and provides global access to it",
      "alternatives": [],
      "explanation": "The Singleton pattern ensures that a class has only one instance throughout the application and provides a global point of access to that instance."
    },
    {
      "question": "What is the Factory pattern?",
      "answer": "Creates objects without specifying the exact class to create",
      "alternatives": [],
      "explanation": "The Factory pattern provides an interface for creating objects without specifying their exact classes. It delegates object instantiation to subclasses or methods."
    },
    {
      "question": "What is the Observer pattern?",
      "answer": "Defines a one-to-many dependency where objects are notified of state changes",
      "alternatives": [],
      "explanation": "The Observer pattern defines a one-to-many dependency between objects so that when one object (subject) changes state, all its dependents (observers) are automatically notified and updated."
    },
    {
      "question": "What is the Strategy pattern?",
      "answer": "Defines a family of algorithms and makes them interchangeable",
      "alternatives": [],
      "explanation": "The Strategy pattern defines a family of algorithms, encapsulates each one, and makes them interchangeable. It lets the algorithm vary independently from clients that use it."
    },
    {
      "question": "What is the Decorator pattern?",
      "answer": "Adds new functionality to objects dynamically without altering their structure",
      "alternatives": [],
      "explanation": "The Decorator pattern allows adding new functionality to an object dynamically by wrapping it with decorator objects, providing a flexible alternative to subclassing."
    },
    {
      "question": "What is the Adapter pattern?",
      "answer": "Allows incompatible interfaces to work together",
      "alternatives": [],
      "explanation": "The Adapter pattern (or Wrapper) allows objects with incompatible interfaces to collaborate by wrapping an interface around an existing class to match another expected interface."
    },
    {
      "question": "What is the MVC pattern?",
      "answer": "Model-View-Controller: separates data, presentation, and logic",
      "alternatives": [],
      "explanation": "MVC (Model-View-Controller) is an architectural pattern that separates an application into three interconnected components: Model (data), View (presentation), and Controller (logic)."
    },
    {
      "question": "What problem does the Builder pattern solve?",
      "answer": "Constructs complex objects step by step",
      "alternatives": [],
      "explanation": "The Builder pattern solves the problem of constructing complex objects with many optional parameters by providing a step-by-step construction process, improving code readability."
    }
  ]
}
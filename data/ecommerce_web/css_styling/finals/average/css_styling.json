{
  "subtopic_id": "css_styling",
  "subtopic_name": "CSS Styling",
  "mode": "finals",
  "difficulty": "average",
  "questions": [
    {
      "question": "What property creates space outside element?",
      "answer": "margin",
      "alternatives": [
        "Margin property"
      ],
      "explanation": "margin creates space outside element (outside border). Directions: margin-top, -right, -bottom, -left. Shorthand: margin: 10px 20px. Collapsing: adjacent margins combine (not add). Auto: margin: auto centers. Important: doesn't affect element size (unlike padding)."
    },
    {
      "question": "What property displays element?",
      "answer": "display",
      "alternatives": [
        "Display property"
      ],
      "explanation": "display controls layout behavior. Values: block (full width), inline (text flow), inline-block (hybrid), flex (flexible), grid (layout), none (hidden). Default: block for divs, inline for span. Changes element nature. Foundation of modern layout."
    },
    {
      "question": "What layout method uses flexible containers?",
      "answer": "Flexbox",
      "alternatives": [
        "CSS Flexbox",
        "Flexible Box"
      ],
      "explanation": "Flexbox (Flexible Box) layout aligns items flex direction (row/column). Properties: flex-direction, justify-content (horizontal), align-items (vertical), flex-wrap. Container: display: flex. Children: flex (grow), flex-shrink, flex-basis. Responsive, adaptive layouts. Industry standard."
    },
    {
      "question": "What layout method organizes grid structure?",
      "answer": "CSS Grid",
      "alternatives": [
        "Grid layout"
      ],
      "explanation": "CSS Grid creates two-dimensional layout. Container: display: grid. Properties: grid-template-columns (widths), grid-template-rows (heights). Children: grid-column, grid-row placement. Responsive: repeat(), fr units. Powerful: complex layouts easily. Combines with media queries."
    },
    {
      "question": "What adjusts styles for screen sizes?",
      "answer": "Media queries",
      "alternatives": [
        "Responsive design"
      ],
      "explanation": "Media queries apply styles conditionally. Syntax: @media (max-width: 768px) { styles }. Breakpoints: mobile (400px), tablet (768px), desktop (1024px). Mobile-first: design mobile first, add complexity. Responsive: one codebase, multiple screens. Essential for modern web."
    },
    {
      "question": "What units scale with viewport?",
      "answer": "Relative units",
      "alternatives": [
        "em",
        "rem",
        "vw"
      ],
      "explanation": "Relative units scale based on context. em: relative to element font-size. rem: relative to root font-size. % : relative to parent. vw/vh: viewport width/height. Responsive: flexible sizing. Absolute: px (fixed). Mix for flexibility: use rem for base sizes."
    },
    {
      "question": "What controls element opacity?",
      "answer": "opacity",
      "alternatives": [
        "Transparency"
      ],
      "explanation": "opacity sets transparency. Values: 0 (invisible) to 1 (opaque). 0.5 = 50% transparent. Affects element and children. rgba color: transparency without affecting children. Hover effects: opacity changes on interaction. Subtle effects improve UX."
    },
    {
      "question": "What applies visual effects?",
      "answer": "Transform",
      "alternatives": [
        "CSS transform"
      ],
      "explanation": "transform applies 2D/3D effects. Functions: rotate(), scale(), translate(), skew(). No layout impact: performance good. Animations: smooth transitions. Example: transform: rotate(45deg) scale(1.2). Performance: hardware accelerated. Modern effects possible."
    },
    {
      "question": "What animates property changes?",
      "answer": "Transition",
      "alternatives": [
        "CSS transition"
      ],
      "explanation": "transition smooths property changes. Syntax: transition: property duration timing-function. Example: transition: color 0.3s ease. Hover: trigger transition on interaction. Duration: how long (ms/s). Timing: linear, ease, ease-in, ease-out. Improves UX."
    },
    {
      "question": "What combines selectors?",
      "answer": "Selector combinators",
      "alternatives": [
        "Combinators"
      ],
      "explanation": "Selector combinators combine selectors. Types: descendant (space), child (>), adjacent sibling (+), general sibling (~). Example: div > p (children), ul + p (after). Specificity increases. Complex selectors: careful use. Readability: balance power and clarity."
    }
  ]
}
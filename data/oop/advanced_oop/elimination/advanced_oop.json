{
  "subtopic_id": "advanced_oop",
  "subtopic_name": "Advanced OOP",
  "questions": [
    {
      "question": "What is an interface in OOP?",
      "options": [
        "A class with only abstract methods",
        "A concrete class",
        "A variable type",
        "A loop structure"
      ],
      "correct": 0,
      "explanation": "An interface is a reference type that contains only abstract method signatures (and constants). It defines a contract that implementing classes must follow."
    },
    {
      "question": "What is multiple inheritance?",
      "options": [
        "Inheriting from one parent",
        "Inheriting from multiple parent classes",
        "Creating multiple objects",
        "Having multiple methods"
      ],
      "correct": 1,
      "explanation": "Multiple inheritance is when a class inherits from more than one parent class. Some languages like C++ support it, while Java uses interfaces to achieve similar functionality."
    },
    {
      "question": "What is an inner class?",
      "options": [
        "A class defined within another class",
        "A small class",
        "A private method",
        "A loop"
      ],
      "correct": 0,
      "explanation": "An inner class (or nested class) is a class defined within another class. It can access private members of the outer class and is used for logical grouping."
    },
    {
      "question": "What is a static nested class in Java?",
      "options": [
        "A nested class that doesn't need outer class instance",
        "A regular nested class",
        "A method",
        "A variable"
      ],
      "correct": 0,
      "explanation": "A static nested class is a nested class declared with the static keyword. It doesn't have access to instance variables of the outer class and doesn't require an outer class instance."
    },
    {
      "question": "What is an anonymous class?",
      "options": [
        "A class without a name defined inline",
        "A named class",
        "A static class",
        "An abstract class"
      ],
      "correct": 0,
      "explanation": "An anonymous class is a class without a name that is declared and instantiated in a single expression. It's typically used for implementing interfaces or extending classes on the fly."
    },
    {
      "question": "What is method chaining?",
      "options": [
        "Calling multiple methods in sequence on the same object",
        "Creating a chain of objects",
        "Linking classes",
        "A design pattern"
      ],
      "correct": 0,
      "explanation": "Method chaining (or fluent interface) is a technique where methods return the object itself (return this), allowing multiple method calls to be chained in a single statement."
    },
    {
      "question": "What is the purpose of the 'final' keyword in Java for classes?",
      "options": [
        "Prevents the class from being inherited",
        "Makes class faster",
        "Makes class public",
        "Creates constant class"
      ],
      "correct": 0,
      "explanation": "The 'final' keyword when applied to a class prevents it from being inherited (subclassed). This is useful for security and design purposes, like the String class in Java."
    },
    {
      "question": "What is composition in OOP?",
      "options": [
        "A 'has-a' relationship where objects contain other objects",
        "A 'is-a' relationship",
        "Multiple inheritance",
        "Method overloading"
      ],
      "correct": 0,
      "explanation": "Composition is a design principle where a class contains instances of other classes as members, representing a 'has-a' relationship (e.g., Car has-a Engine)."
    },
    {
      "question": "What is aggregation?",
      "options": [
        "A weak 'has-a' relationship where contained objects can exist independently",
        "Strong relationship",
        "Inheritance",
        "Polymorphism"
      ],
      "correct": 0,
      "explanation": "Aggregation is a specialized form of association representing a 'has-a' relationship where the contained object can exist independently of the container (e.g., Department has-a Teacher)."
    },
    {
      "question": "What is the diamond problem?",
      "options": [
        "Ambiguity arising from multiple inheritance",
        "A shape in code",
        "A design pattern",
        "A syntax error"
      ],
      "correct": 0,
      "explanation": "The diamond problem occurs in multiple inheritance when a class inherits from two classes that have a common ancestor, leading to ambiguity about which parent's method to use."
    }
  ],
  "mode": "elimination"
}
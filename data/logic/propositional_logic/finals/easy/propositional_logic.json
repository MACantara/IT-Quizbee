{
  "subtopic_id": "propositional_logic",
  "subtopic_name": "Propositional Logic",
  "mode": "finals",
  "difficulty": "easy",
  "questions": [
    {
      "question": "What is a proposition?",
      "answer": "Statement that is either true or false",
      "alternatives": [
        "Logical statement"
      ],
      "explanation": "Proposition: declarative sentence with truth value. Examples: 'It is raining', '2+2=4'. Not propositions: questions, commands. Variables: p, q, r typically. Atomic: cannot break down further. Combined: using logical operators. Foundation: basis of logic systems."
    },
    {
      "question": "What is a logical operator?",
      "answer": "Symbol connecting propositions",
      "alternatives": [
        "Logical connector"
      ],
      "explanation": "Operator: combines propositions. Types: AND (), OR (), NOT (), conditional (), biconditional (). Purpose: form complex statements. Truth: determined by operator and operands. Precedence: order matters. Importance: core logic building blocks."
    },
    {
      "question": "What does AND require?",
      "answer": "Both propositions must be true",
      "alternatives": [
        "Conjunction"
      ],
      "explanation": "AND (): both must be true for result true. Truth table: TT=T, all others false. Example: 'It rains AND temperature is cold'. Usage: restricts possibilities. Logic gate: implemented in circuits. Symbol:  or &."
    },
    {
      "question": "What does OR allow?",
      "answer": "At least one proposition true",
      "alternatives": [
        "Disjunction"
      ],
      "explanation": "OR (): at least one true makes result true. Truth table: FF=F, all others true. Example: 'Coffee OR tea for breakfast'. Inclusive: both can be true. Exclusive (XOR): only one true. Symbol:  or |."
    },
    {
      "question": "What does NOT do?",
      "answer": "Reverses truth value",
      "alternatives": [
        "Negation"
      ],
      "explanation": "NOT (): inverts truth value. Truth table: T=F, F=T. Example: NOT raining. Double negation: (p)=p. De Morgan: applies to complex statements. Symbol:  or !."
    },
    {
      "question": "What connects hypothesis to conclusion?",
      "answer": "Conditional (if-then)",
      "alternatives": [
        "Implication"
      ],
      "explanation": "Conditional (): 'if p then q'. Truth: false only when p true and q false. Example: 'If study then pass'. Antecedent: p (hypothesis). Consequent: q (conclusion). Logic: assumption matters. Symbol:  or ."
    },
    {
      "question": "What requires both directions?",
      "answer": "Biconditional (if and only if)",
      "alternatives": [
        "Double implication"
      ],
      "explanation": "Biconditional (): p if and only if q. Truth: both same (both true or both false). Example: 'Triangle iff three sides'. Equivalence: both must imply each other. Necessary and sufficient. Symbol:  or ."
    },
    {
      "question": "What organizes all truth combinations?",
      "answer": "Truth table",
      "alternatives": [
        "Possibility matrix"
      ],
      "explanation": "Truth table: all possible inputs and outputs. Rows: 2^n for n variables. Purpose: evaluate all cases. Completeness: includes every combination. Verification: check formulas systematically. Standard: show input columns, output column."
    },
    {
      "question": "What are independent statements?",
      "answer": "Atomic propositions",
      "alternatives": [
        "Base propositions"
      ],
      "explanation": "Atomic: cannot decompose further. Basic building blocks. Complex: combine atoms with operators. Variables: represent atomic propositions. Example: p, q, r are atomic. Reduction: any formula to atoms. Foundation: logical analysis starts here."
    },
    {
      "question": "What is logical equivalence?",
      "answer": "Two propositions with same truth values",
      "alternatives": [
        "Same meaning"
      ],
      "explanation": "Equivalent: p and q always have same truth value. Notation: p  q. Example: pq  qp (commutative). Laws: De Morgan, associative, distributive. Identity: pF  p. Importance: simplify complex formulas."
    }
  ]
}
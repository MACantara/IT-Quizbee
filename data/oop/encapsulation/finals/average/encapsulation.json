{
  "subtopic_id": "encapsulation",
  "subtopic_name": "Encapsulation",
  "mode": "finals",
  "difficulty": "average",
  "questions": [
    {
      "question": "What Java annotation automatically generates getters and setters?",
      "answer": "@Data",
      "alternatives": ["Data annotation", "Lombok Data"],
      "explanation": "The @Data annotation from Lombok generates boilerplate accessor methods."
    },
    {
      "question": "What C# feature provides shorthand for getters and setters?",
      "answer": "properties",
      "alternatives": ["auto-properties", "automatic properties"],
      "explanation": "Properties simplify the syntax for encapsulating fields."
    },
    {
      "question": "What keyword in Java makes a field unchangeable after initialization?",
      "answer": "final",
      "alternatives": ["Final"],
      "explanation": "Final fields can only be assigned once and cannot be modified."
    },
    {
      "question": "What keyword in C++ makes member functions unable to modify object state?",
      "answer": "const",
      "alternatives": ["Const"],
      "explanation": "Const member functions promise not to change member variables."
    },
    {
      "question": "What design principle states classes should expose minimal interface?",
      "answer": "principle of least privilege",
      "alternatives": ["least privilege", "minimal exposure"],
      "explanation": "Classes should reveal only what is absolutely necessary."
    },
    {
      "question": "What validation can setters perform before assigning values?",
      "answer": "input validation",
      "alternatives": ["data validation", "value checking"],
      "explanation": "Setters can verify data meets constraints before assignment."
    },
    {
      "question": "What Python decorator creates a getter method?",
      "answer": "@property",
      "alternatives": ["property decorator"],
      "explanation": "The @property decorator allows method access like an attribute."
    },
    {
      "question": "What Python decorator creates a setter method?",
      "answer": "@property_name.setter",
      "alternatives": ["setter decorator"],
      "explanation": "The setter decorator enables controlled attribute assignment."
    },
    {
      "question": "What access level allows access within the same package?",
      "answer": "package-private",
      "alternatives": ["default", "package"],
      "explanation": "Package-private is the default access level in Java."
    },
    {
      "question": "What benefit does encapsulation provide for maintenance?",
      "answer": "easier modification",
      "alternatives": ["maintainability", "flexibility"],
      "explanation": "Encapsulation allows changing implementation without affecting external code."
    }
  ]
}
{
  "subtopic_id": "number_systems",
  "subtopic_name": "Number Systems",
  "mode": "finals",
  "difficulty": "easy",
  "questions": [
    {
      "question": "What is binary?",
      "answer": "Base-2 number system",
      "alternatives": [
        "Two-digit system"
      ],
      "explanation": "Binary: uses 0 and 1 only. Computer: fundamental language. Conversion: divide by 2 repeatedly. Example: 5 in decimal = 101 in binary. Advantage: electronics can represent. Limitation: requires more digits."
    },
    {
      "question": "What is decimal?",
      "answer": "Base-10 number system",
      "alternatives": [
        "Ten-digit system"
      ],
      "explanation": "Decimal: digits 0-9 used. Human: natural number system. Standard: everyday numbers. Conversion: binary multiply by powers of 2. Example: 101 binary = 5 decimal. Usage: normal calculations."
    },
    {
      "question": "What is hexadecimal?",
      "answer": "Base-16 number system",
      "alternatives": [
        "Hex system"
      ],
      "explanation": "Hexadecimal: uses 0-9, A-F digits. Short: compact representation than binary. Computers: memory addresses, colors. Example: FF hex = 255 decimal. Conversion: groups of 4 binary bits. Notation: 0x prefix typically."
    },
    {
      "question": "What is octal?",
      "answer": "Base-8 number system",
      "alternatives": [
        "Eight-digit system"
      ],
      "explanation": "Octal: digits 0-7 used. Historical: Unix file permissions use. Computing: less common now. Conversion: groups of 3 binary bits. Example: 77 octal = 63 decimal. Notation: 0 prefix typically."
    },
    {
      "question": "What is a bit?",
      "answer": "Binary digit",
      "alternatives": [
        "Smallest unit"
      ],
      "explanation": "Bit: 0 or 1 only. Fundamental: computer basic unit. Storage: smallest addressable unit. Purpose: represents on/off state. Information: minimum unit of information. Speed: measured in bits per second."
    },
    {
      "question": "What is a byte?",
      "answer": "8 bits",
      "alternatives": [
        "8-bit group"
      ],
      "explanation": "Byte: standard grouping unit. Storage: typically 256 values (0-255). Addressable: usually smallest memory unit. Example: ASCII character = 1 byte. Units: KB, MB, GB based on bytes. Standard: universal computing unit."
    },
    {
      "question": "What is a nibble?",
      "answer": "4 bits",
      "alternatives": [
        "Half-byte"
      ],
      "explanation": "Nibble: half a byte. Hex: represents one hexadecimal digit. Binary: 4 consecutive bits. Usage: less common today. Historical: older systems. Relationship: 2 nibbles = 1 byte."
    },
    {
      "question": "What is bit shifting?",
      "answer": "Moving bits left or right",
      "alternatives": [
        "Bit operation"
      ],
      "explanation": "Bit shifting: rapid multiplication/division. Left: multiplies by 2. Right: divides by 2. Speed: faster than arithmetic. Uses: optimization, masking. Example: 5 << 1 = 10 (multiply by 2)."
    },
    {
      "question": "What is a bitmask?",
      "answer": "Selective bit manipulation",
      "alternatives": [
        "Bit filtering"
      ],
      "explanation": "Bitmask: isolates specific bits. Uses: flags, permissions, options. Operation: AND with mask pattern. Efficiency: low overhead. Applications: systems programming, embedded."
    },
    {
      "question": "What are bit flags?",
      "answer": "Individual bits as booleans",
      "alternatives": [
        "Boolean bits"
      ],
      "explanation": "Bit flags: compact storage. Usage: permissions, settings. Benefits: 8 flags per byte. Example: file permissions in Unix. Implementation: bit shifting, masking. Efficiency: memory-efficient."
    }
  ]
}
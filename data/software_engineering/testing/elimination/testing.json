{
  "subtopic_id": "testing",
  "subtopic_name": "Software Testing",
  "mode": "elimination",
  "questions": [
    {
      "question": "Which testing level focuses on testing individual components or functions in isolation?",
      "options": [
        "System Testing",
        "Unit Testing",
        "Integration Testing",
        "Acceptance Testing"
      ],
      "correct": 1,
      "explanation": "Unit Testing tests individual units or components of the software in isolation to ensure each part functions correctly before integration.",
      "id": "sof_eng_test_elim_000"
    },
    {
      "question": "What is the primary purpose of integration testing?",
      "options": [
        "To test individual functions",
        "To verify user requirements",
        "To test interactions between integrated components",
        "To test the complete system"
      ],
      "correct": 2,
      "explanation": "Integration Testing verifies that different modules or components work correctly together when integrated, checking interfaces and interactions between them.",
      "id": "sof_eng_test_elim_001"
    },
    {
      "question": "Which testing approach examines the software without knowledge of internal code structure?",
      "options": [
        "White-box Testing",
        "Gray-box Testing",
        "Structural Testing",
        "Black-box Testing"
      ],
      "correct": 3,
      "explanation": "Black-box Testing examines functionality without looking at internal code implementation, focusing on inputs and expected outputs.",
      "id": "sof_eng_test_elim_002"
    },
    {
      "question": "What does test coverage measure in software testing?",
      "options": [
        "The percentage of code executed by tests",
        "The number of test cases written",
        "The time taken to run tests",
        "The number of bugs found"
      ],
      "correct": 0,
      "explanation": "Test Coverage measures the extent to which the code is executed by test cases, typically expressed as a percentage of code lines, branches, or paths tested.",
      "id": "sof_eng_test_elim_003"
    },
    {
      "question": "Which testing type involves re-running previously conducted tests to ensure new changes haven't broken existing functionality?",
      "options": [
        "Smoke Testing",
        "Regression Testing",
        "Sanity Testing",
        "Exploratory Testing"
      ],
      "correct": 1,
      "explanation": "Regression Testing ensures that new code changes, bug fixes, or features haven't adversely affected existing functionality that previously worked.",
      "id": "sof_eng_test_elim_004"
    },
    {
      "question": "What is the main goal of smoke testing?",
      "options": [
        "To test all features thoroughly",
        "To verify critical functionality works before detailed testing",
        "To find security vulnerabilities",
        "To measure performance"
      ],
      "correct": 2,
      "explanation": "Smoke Testing is a preliminary check that verifies the basic critical functionality works, determining whether the build is stable enough for further testing.",
      "id": "sof_eng_test_elim_005"
    },
    {
      "question": "In Test-Driven Development, when are tests written?",
      "options": [
        "After writing the code",
        "Before writing the code",
        "During code review",
        "After deployment"
      ],
      "correct": 1,
      "explanation": "In TDD, tests are written before the actual code, following the Red-Green-Refactor cycle where you write a failing test first, then write code to pass it.",
      "id": "sof_eng_test_elim_006"
    },
    {
      "question": "Which type of testing evaluates system performance under expected load conditions?",
      "options": [
        "Load Testing",
        "Unit Testing",
        "Functional Testing",
        "Static Testing"
      ],
      "correct": 0,
      "explanation": "Load Testing evaluates system behavior and performance under expected user load, checking response times, throughput, and resource utilization.",
      "id": "sof_eng_test_elim_007"
    },
    {
      "question": "What is the purpose of User Acceptance Testing (UAT)?",
      "options": [
        "To test code quality",
        "To verify the system meets business requirements",
        "To find bugs in the code",
        "To test system architecture"
      ],
      "correct": 1,
      "explanation": "UAT verifies that the system meets business requirements and is acceptable to end users, typically conducted by actual users or clients before final deployment.",
      "id": "sof_eng_test_elim_008"
    },
    {
      "question": "Which testing framework is commonly used for Python unit testing?",
      "options": [
        "JUnit",
        "NUnit",
        "pytest",
        "Jasmine"
      ],
      "correct": 2,
      "explanation": "pytest is a popular testing framework for Python that makes it easy to write simple and scalable test cases with minimal boilerplate code.",
      "id": "sof_eng_test_elim_009"
    }
  ]
}